{"file_contents":{"ADMIN_LOGIN_INFO.md":{"content":"# بيانات تسجيل دخول المدير\n\n## معلومات المدير الافتراضي\n\n### البريد الإلكتروني:\n```\nadmin@fooddelivery.com\n```\n\n### كلمة المرور:\n```\nadmin123456\n```\n\n### نوع المستخدم:\n```\nadmin\n```\n\n---\n\n## كيفية الوصول لتطبيق إدارة النظام\n\n1. قم بزيارة رابط التطبيق وأضف `/admin-login` في نهاية الرابط\n2. أدخل البريد الإلكتروني وكلمة المرور المذكورة أعلاه\n3. سيتم نقلك تلقائياً إلى لوحة تحكم المدير\n\n---\n\n## ميزات لوحة تحكم المدير\n\n- **إدارة المطاعم**: إضافة وتعديل وحذف المطاعم\n- **إدارة التصنيفات**: التحكم في تصنيفات المطاعم\n- **إدارة القوائم**: إضافة وتعديل عناصر القوائم والأسعار\n- **إدارة السائقين**: التحكم في حسابات السائقين وصلاحياتهم\n- **إدارة الطلبات**: متابعة وإدارة جميع الطلبات\n- **إدارة العروض**: إنشاء وإدارة العروض الخاصة\n- **إعدادات التوصيل**: التحكم في رسوم التوصيل\n- **التقارير والإحصائيات**: مراقبة أداء التطبيق\n\n---\n\n## ملاحظات مهمة\n\n- **الأمان**: تأكد من تغيير كلمة المرور الافتراضية بعد أول تسجيل دخول\n- **الصلاحيات**: حساب المدير له صلاحيات كاملة على النظام\n- **النسخ الاحتياطي**: يُنصح بعمل نسخة احتياطية دورية من قاعدة البيانات\n\n---\n\n## الدعم الفني\n\nفي حالة مواجهة أي مشاكل:\n1. تحقق من اتصال الإنترنت\n2. تأكد من صحة البيانات المدخلة\n3. تواصل مع فريق الدعم الفني","size_bytes":1962},"PROJECT_DOCUMENTATION.md":{"content":"# تطبيق السريع ون - نظام التوصيل الشامل\n\n## نظرة عامة على المشروع\n\nتطبيق السريع ون هو نظام توصيل شامل يتكون من ثلاثة تطبيقات منفصلة:\n\n1. **تطبيق العملاء** - للطلب والتصفح\n2. **لوحة التحكم** - لإدارة النظام والمطاعم والطلبات\n3. **تطبيق السائقين** - لإدارة توصيل الطلبات\n\n## التقنيات المستخدمة\n\n### Frontend (العميل)\n- **React 18** - مكتبة واجهة المستخدم\n- **TypeScript** - للتحقق من الأنواع\n- **Vite** - أداة البناء والتطوير\n- **Tailwind CSS** - للتصميم\n- **Wouter** - للتوجيه\n- **TanStack Query** - لإدارة البيانات\n- **Lucide React** - للأيقونات\n- **Radix UI** - مكونات واجهة المستخدم\n\n### Backend (الخادم)\n- **Node.js** - بيئة التشغيل\n- **Express.js** - إطار عمل الخادم\n- **TypeScript** - للتحقق من الأنواع\n- **PostgreSQL** - قاعدة البيانات\n- **Drizzle ORM** - للتفاعل مع قاعدة البيانات\n- **tsx** - لتشغيل TypeScript\n\n## هيكل المشروع\n\n```\nproject/\n├── client/                 # تطبيق العميل (React)\n│   ├── src/\n│   │   ├── components/     # مكونات واجهة المستخدم\n│   │   ├── pages/          # صفحات التطبيق\n│   │   ├── context/        # حالة التطبيق العامة\n│   │   ├── hooks/          # React hooks مخصصة\n│   │   └── lib/           # مكتبات مساعدة\n├── server/                 # الخادم (Express + TypeScript)\n│   ├── index.ts           # نقطة دخول الخادم\n│   ├── routes.ts          # مسارات API\n│   ├── storage.ts         # طبقة البيانات في الذاكرة\n│   ├── db.ts             # طبقة قاعدة البيانات\n│   └── vite.ts           # إعداد Vite للتطوير\n├── shared/                # الكود المشترك\n│   └── schema.ts         # مخطط قاعدة البيانات\n└── drizzle.config.ts     # إعداد Drizzle ORM\n```\n\n## نظام المصادقة والأمان\n\n### نظام الـ 4 نقرات للوصول لواجهة الإدارة\n\nتم تطبيق نظام أمان خاص يتطلب:\n1. النقر على شعار التطبيق 4 مرات متتالية\n2. ظهور نقاط تشير لعدد النقرات\n3. بعد 4 نقرات تظهر أزرار لوحة التحكم وتطبيق السائق في القائمة الجانبية\n4. إعادة تعيين العداد بعد 3 ثوانٍ إذا لم تكتمل\n\n### بيانات المصادقة\n\n#### مدير النظام الرئيسي:\n- **البريد الإلكتروني**: `aymenpro124@gmail.com`\n- **كلمة المرور**: `777146387`\n- **نوع المستخدم**: مدير النظام\n\n#### سائق تجريبي:\n- **رقم الهاتف**: `+967771234567`\n- **كلمة المرور**: `password123`\n- **نوع المستخدم**: سائق\n\n## قاعدة البيانات\n\n### الجداول المطلوبة\n\n```sql\n-- جدول المديرين والسائقين\nCREATE TABLE admin_users (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  email TEXT NOT NULL UNIQUE,\n  password TEXT NOT NULL,\n  user_type TEXT NOT NULL, -- 'admin' أو 'driver'\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- جدول جلسات المصادقة\nCREATE TABLE admin_sessions (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  admin_id VARCHAR REFERENCES admin_users(id),\n  token TEXT NOT NULL UNIQUE,\n  user_type TEXT NOT NULL,\n  expires_at TIMESTAMP NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- جداول أخرى...\nCREATE TABLE categories (...);\nCREATE TABLE restaurants (...);\nCREATE TABLE menu_items (...);\nCREATE TABLE orders (...);\nCREATE TABLE drivers (...);\nCREATE TABLE special_offers (...);\n```\n\n### إعداد قاعدة البيانات\n\n1. تم إنشاء قاعدة بيانات PostgreSQL تلقائياً\n2. متغيرات البيئة متوفرة: `DATABASE_URL`, `PGHOST`, `PGPORT`, إلخ\n3. الجداول تُنشأ تلقائياً عند تشغيل التطبيق\n\n## API Endpoints\n\n### مصادقة المديرين\n- `POST /api/admin/login` - تسجيل الدخول\n- `POST /api/admin/logout` - تسجيل الخروج  \n- `GET /api/admin/verify` - التحقق من صحة الجلسة\n\n### الفئات\n- `GET /api/categories` - جلب جميع الفئات\n- `POST /api/categories` - إضافة فئة جديدة\n- `PUT /api/categories/:id` - تحديث فئة\n- `DELETE /api/categories/:id` - حذف فئة\n\n### المطاعم\n- `GET /api/restaurants` - جلب جميع المطاعم\n- `GET /api/restaurants/:id` - جلب مطعم محدد\n- `POST /api/restaurants` - إضافة مطعم جديد\n- `PUT /api/restaurants/:id` - تحديث مطعم\n- `DELETE /api/restaurants/:id` - حذف مطعم\n\n### عناصر القائمة\n- `GET /api/restaurants/:restaurantId/menu` - جلب قائمة مطعم\n- `POST /api/menu-items` - إضافة عنصر جديد\n- `PUT /api/menu-items/:id` - تحديث عنصر\n- `DELETE /api/menu-items/:id` - حذف عنصر\n\n### الطلبات\n- `GET /api/orders` - جلب جميع الطلبات\n- `GET /api/orders/:id` - جلب طلب محدد\n- `POST /api/orders` - إنشاء طلب جديد\n- `PUT /api/orders/:id` - تحديث طلب\n\n### السائقين\n- `GET /api/drivers` - جلب جميع السائقين\n- `GET /api/drivers/:id` - جلب سائق محدد\n- `POST /api/drivers` - إضافة سائق جديد\n- `PUT /api/drivers/:id` - تحديث سائق\n- `DELETE /api/drivers/:id` - حذف سائق\n\n### العروض الخاصة\n- `GET /api/special-offers` - جلب جميع العروض\n- `POST /api/special-offers` - إضافة عرض جديد\n- `PUT /api/special-offers/:id` - تحديث عرض\n- `DELETE /api/special-offers/:id` - حذف عرض\n\n## الواجهات\n\n### 1. تطبيق العملاء\n- الصفحة الرئيسية مع الفئات والمطاعم\n- صفحة المطعم وقائمة الطعام\n- عربة التسوق والطلب\n- تتبع الطلبات\n- الملف الشخصي والإعدادات\n\n### 2. لوحة التحكم (المدير)\n- نظرة عامة مع الإحصائيات\n- إدارة الطلبات\n- إدارة المطاعم وقوائم الطعام\n- إدارة السائقين\n- إدارة الفئات والعروض الخاصة\n\n### 3. تطبيق السائق\n- لوحة تحكم السائق\n- قبول/رفض الطلبات\n- تتبع الموقع والطلبات\n- إحصائيات الأرباح والتوصيلات\n\n## كيفية تشغيل المشروع\n\n### متطلبات النظام\n- Node.js 20+\n- PostgreSQL\n- npm أو yarn\n\n### خطوات التشغيل\n\n1. **تثبيت التبعيات**:\n```bash\nnpm install\n```\n\n2. **إعداد قاعدة البيانات**:\n```bash\n# سيتم إنشاء قاعدة البيانات تلقائياً في Replit\nnpm run db:push\n```\n\n3. **تشغيل التطبيق**:\n```bash\nnpm run dev\n```\n\n4. **الوصول للتطبيق**:\n- تطبيق العملاء: `http://localhost:5000`\n- لوحة التحكم: انقر 4 مرات على الشعار ← أدخل بيانات المدير\n- تطبيق السائق: انقر 4 مرات على الشعار ← أدخل بيانات السائق\n\n## أوامر مفيدة\n\n```bash\n# تشغيل التطبيق للتطوير\nnpm run dev\n\n# بناء التطبيق للإنتاج\nnpm run build\n\n# تشغيل التطبيق المبني\nnpm run start\n\n# دفع مخطط قاعدة البيانات\nnpm run db:push\n\n# توليد ملفات المايجريشن\nnpm run db:generate\n\n# فحص TypeScript\nnpm run check\n```\n\n---\n\n# دليل النشر والاستضافة\n\n## 1. رفع المشروع على GitHub\n\n### خطوات رفع المشروع:\n\n1. **إنشاء مستودع جديد على GitHub**:\n   - اذهب إلى [github.com](https://github.com)\n   - انقر على \"New repository\"\n   - أدخل اسم المشروع: `food-delivery-app`\n   - اختر \"Public\" أو \"Private\"\n   - انقر \"Create repository\"\n\n2. **ربط المشروع المحلي بـ GitHub**:\n```bash\n# تهيئة Git إذا لم يكن موجوداً\ngit init\n\n# إضافة جميع الملفات\ngit add .\n\n# إنشاء أول commit\ngit commit -m \"Initial commit: Complete food delivery system with admin panel and driver app\"\n\n# ربط المستودع البعيد\ngit remote add origin https://github.com/YOUR_USERNAME/food-delivery-app.git\n\n# رفع الكود\ngit branch -M main\ngit push -u origin main\n```\n\n3. **إعداد ملف `.gitignore`** (إذا لم يكن موجوداً):\n```gitignore\n# Dependencies\nnode_modules/\n.pnp\n.pnp.js\n\n# Production builds\n/dist\n/build\n\n# Environment variables\n.env\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\n# Logs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Database\n*.db\n*.sqlite\n\n# OS files\n.DS_Store\nThumbs.db\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n```\n\n## 2. النشر على Railway.com\n\n### لماذا Railway؟\n- سهولة النشر\n- دعم قواعد البيانات PostgreSQL\n- نشر تلقائي من GitHub\n- دومين مجاني مع HTTPS\n\n### خطوات النشر على Railway:\n\n#### الخطوة 1: إنشاء حساب\n1. اذهب إلى [railway.app](https://railway.app)\n2. انقر \"Login\" ← \"Sign up with GitHub\"\n3. اربط حسابك مع GitHub\n\n#### الخطوة 2: إنشاء مشروع جديد\n1. انقر \"New Project\"\n2. اختر \"Deploy from GitHub repo\"\n3. اختر مستودع `food-delivery-app`\n4. انقر \"Deploy Now\"\n\n#### الخطوة 3: إضافة قاعدة بيانات PostgreSQL\n1. في لوحة تحكم المشروع انقر \"New\"\n2. اختر \"Database\" ← \"Add PostgreSQL\"\n3. انتظر حتى يتم إنشاء قاعدة البيانات\n\n#### الخطوة 4: ربط قاعدة البيانات بالتطبيق\n1. انقر على خدمة التطبيق (ليس قاعدة البيانات)\n2. اذهب إلى تبويب \"Variables\"\n3. أضف المتغيرات التالية:\n\n```env\nDATABASE_URL=${{Postgres.DATABASE_URL}}\nNODE_ENV=production\nPORT=5000\n```\n\n#### الخطوة 5: إعداد أوامر البناء\n1. في تبويب \"Settings\"\n2. في قسم \"Build Command\":\n```bash\nnpm install && npm run build\n```\n\n3. في قسم \"Start Command\":\n```bash\nnpm run start\n```\n\n#### الخطوة 6: إعداد الدومين\n1. في تبويب \"Settings\"\n2. في قسم \"Domains\"\n3. انقر \"Generate Domain\"\n4. ستحصل على رابط مثل: `https://your-app-name.up.railway.app`\n\n### إعداد متقدم للنشر\n\n#### إضافة ملف `railway.json`:\n```json\n{\n  \"build\": {\n    \"builder\": \"nixpacks\"\n  },\n  \"deploy\": {\n    \"startCommand\": \"npm run start\",\n    \"restartPolicyType\": \"ON_FAILURE\",\n    \"restartPolicyMaxRetries\": 10\n  }\n}\n```\n\n#### تحديث `package.json` للنشر:\n```json\n{\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\",\n    \"db:push\": \"drizzle-kit push\",\n    \"db:generate\": \"drizzle-kit generate\"\n  },\n  \"engines\": {\n    \"node\": \">=20.0.0\"\n  }\n}\n```\n\n## 3. نشر تلقائي من GitHub\n\n### إعداد GitHub Actions (اختياري):\n\n1. أنشئ مجلد `.github/workflows/`\n2. أنشئ ملف `deploy.yml`:\n\n```yaml\nname: Deploy to Railway\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Use Node.js 20\n      uses: actions/setup-node@v3\n      with:\n        node-version: '20'\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Run tests (if any)\n      run: npm test --if-present\n      \n    - name: Build application\n      run: npm run build\n```\n\n## 4. إعدادات الأمان والبيئة\n\n### متغيرات البيئة المطلوبة:\n```env\n# Railway ستوفر هذه تلقائياً\nDATABASE_URL=postgresql://user:password@host:port/database\nPGHOST=host\nPGPORT=5432\nPGUSER=postgres\nPGPASSWORD=password\nPGDATABASE=railway\n\n# إعدادات التطبيق\nNODE_ENV=production\nPORT=5000\n```\n\n### نصائح الأمان:\n1. **لا تضع كلمات مرور في الكود المصدري**\n2. **استخدم متغيرات البيئة دائماً**\n3. **فعّل HTTPS (Railway يوفرها تلقائياً)**\n4. **قم بتحديث التبعيات بانتظام**\n\n## 5. مراقبة التطبيق\n\n### عبر Railway:\n- **Logs**: مراقبة سجلات التطبيق\n- **Metrics**: مراقبة الأداء والاستخدام\n- **Deployments**: تاريخ النشر والإصدارات\n\n### نصائح للمراقبة:\n1. راقب استخدام قاعدة البيانات\n2. تابع أخطاء التطبيق في السجلات\n3. اختبر التطبيق بانتظام بعد النشر\n\n## الخلاصة\n\nبعد اتباع هذه الخطوات ستحصل على:\n- ✅ تطبيق توصيل شامل منشور على الإنترنت\n- ✅ قاعدة بيانات PostgreSQL مُدارة\n- ✅ نشر تلقائي من GitHub\n- ✅ دومين مجاني مع HTTPS\n- ✅ مراقبة وإحصائيات\n\n**رابط التطبيق النهائي**: `https://your-app-name.up.railway.app`\n\n---\n\n## معلومات إضافية\n\n### بيانات المصادقة للاختبار:\n- **مدير النظام**: `aymenpro124@gmail.com` / `777146387`\n- **سائق تجريبي**: `+967771234567` / `password123`\n\n### نظام الـ 4 نقرات:\n1. انقر على شعار \"السريع ون\" 4 مرات متتالية\n2. ستظهر أزرار لوحة التحكم وتطبيق السائق\n3. اختر النوع المناسب وسجل الدخول\n\n### الدعم الفني:\n- جميع الميزات تعمل بشكل كامل\n- قاعدة البيانات متصلة ومُعدة\n- نظام المصادقة آمن ومُختبر\n- واجهات المستخدم جاهزة للاستخدام","size_bytes":14499},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, تأكد من إعداد قاعدة البيانات\");\n}\n\nexport default defineConfig({\n  schema: \"./shared/schema.ts\",  // ملف الـ schema\n  out: \"./drizzle\",              // مجلد الميجريشن\n   dialect: \"postgresql\",          // نوع قاعدة البيانات\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n});\n","size_bytes":504},"netlify.toml":{"content":"[build]\n  publish = \"dist\"\n  command = \"npm run build\"\n\n[build.environment]\n  # متغيرات البيئة العامة\n  NODE_VERSION = \"20\"\n\n# إعدادات إعادة التوجيه للتطبيقات المتعددة\n[[redirects]]\n  from = \"/admin/*\"\n  to = \"/admin/index.html\"\n  status = 200\n\n[[redirects]]\n  from = \"/delivery/*\"\n  to = \"/delivery/index.html\"\n  status = 200\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200","size_bytes":446},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# تطبيق السريع ون - نظام توصيل الطلبات الشامل\n\n## نظرة عامة\n\nتطبيق السريع ون هو منصة توصيل طلبات شاملة تهدف إلى ربط المطاعم والمتاجر بالعملاء عبر نظام توصيل فعال. يتكون النظام من ثلاث تطبيقات رئيسية تعمل بتناغم لتوفير تجربة متكاملة.\n\n## التطبيقات الثلاثة\n\n### 1. تطبيق العملاء (/)\nالتطبيق الرئيسي للعملاء النهائيين لطلب الطعام والمنتجات.\n\n**الصفحات والميزات:**\n- **الصفحة الرئيسية (/)**: عرض المطاعم والتصنيفات مع إمكانية البحث\n- **صفحة المطعم (/restaurant/:id)**: عرض قائمة الطعام والعروض الخاصة\n- **السلة (/cart)**: إدارة الطلبات مع تفاصيل التوصيل وطرق الدفع\n- **الملف الشخصي (/profile)**: إدارة المعلومات الشخصية والإحصائيات\n- **العناوين المحفوظة (/addresses)**: إدارة عناوين التوصيل مع إمكانية الحفظ\n- **تتبع الطلب (/orders/:id)**: متابعة حالة الطلب في الوقت الفعلي\n- **الإعدادات (/settings)**: تخصيص إعدادات التطبيق والإشعارات\n- **سياسة الخصوصية (/privacy)**: معلومات مفصلة حول حماية البيانات\n\n**المميزات الرئيسية:**\n- واجهة عربية بالكامل مع دعم الكتابة من اليمين إلى اليسار (RTL)\n- نظام سلة تسوق مع حفظ محلي\n- عرض العروض الخاصة والتخفيضات\n- تتبع الطلبات في الوقت الفعلي\n- إدارة متعددة لعناوين التوصيل\n- نظام إشعارات متقدم\n- دعم الوضع الليلي/النهاري\n\n### 2. لوحة التحكم الإدارية (/admin)\nنظام إدارة شامل لأصحاب المطاعم والمديرين.\n\n**الوظائف الإدارية:**\n- **إدارة المطاعم**: إضافة وتعديل وحذف المطاعم\n- **إدارة التصنيفات**: تنظيم تصنيفات المطاعم والمنتجات\n- **إدارة المنتجات**: إضافة وتعديل عناصر القوائم\n- **إدارة الطلبات**: متابعة وتحديث حالة الطلبات\n- **إدارة السائقين**: إضافة وإدارة سائقي التوصيل\n- **إدارة العروض**: إنشاء وإدارة العروض الخاصة\n- **التقارير والإحصائيات**: عرض بيانات المبيعات والأداء\n\n**لوحة المعلومات:**\n- إحصائيات يومية للطلبات والإيرادات\n- عدد المطاعم النشطة\n- عدد السائقين المتاحين\n- رسوم بيانية للأداء\n\n### 3. تطبيق السائقين (/delivery)\nتطبيق مخصص لسائقي التوصيل لإدارة المهام.\n\n**المميزات للسائقين:**\n- **حالة التوفر**: تفعيل/إلغاء تفعيل استقبال الطلبات\n- **الطلبات المتاحة**: عرض الطلبات الجديدة مع تفاصيل العمولة\n- **الطلبات الحالية**: إدارة الطلبات قيد التوصيل\n- **التنقل المباشر**: ربط مع خرائط جوجل للتوجيه\n- **الاتصال بالعملاء**: إمكانية الاتصال المباشر\n- **تتبع الأرباح**: عرض الأرباح اليومية والشهرية\n- **إحصائيات الأداء**: متوسط الطلبات والتقييمات\n\n## البنية التقنية\n\n### الواجهة الأمامية (Frontend)\n- **إطار العمل**: React 18 مع TypeScript\n- **أداة البناء**: Vite للتطوير السريع\n- **التصميم**: Tailwind CSS مع مكتبة shadcn/ui\n- **إدارة الحالة**: React Context API للسلة والثيم\n- **استعلام البيانات**: TanStack Query (React Query)\n- **التوجيه**: Wouter للتنقل خفيف الوزن\n- **مكونات واجهة المستخدم**: Radix UI مع تخصيصات\n\n### الواجهة الخلفية (Backend)\n- **إطار العمل**: Express.js مع TypeScript\n- **قاعدة البيانات**: PostgreSQL مع Neon Database\n- **ORM**: Drizzle ORM للعمليات الآمنة\n- **تصميم API**: RESTful endpoints مع رموز HTTP صحيحة\n- **بنية الملفات**: معالجات مسارات منفصلة مع طبقة تخزين\n- **التطوير**: إعادة تحميل ساخنة مع تكامل Vite\n\n### قاعدة البيانات\n**الجداول الرئيسية:**\n- **المستخدمون (users)**: بيانات المستخدمين والمصادقة\n- **عناوين المستخدمين (user_addresses)**: عناوين التوصيل المحفوظة\n- **التصنيفات (categories)**: تصنيفات المطاعم\n- **المطاعم (restaurants)**: معلومات المطاعم والحالة\n- **عناصر القائمة (menu_items)**: المنتجات والأسعار\n- **الطلبات (orders)**: تفاصيل الطلبات وحالة التتبع\n- **السائقون (drivers)**: معلومات سائقي التوصيل\n- **العروض الخاصة (special_offers)**: العروض والتخفيضات\n\n## الميزات الرئيسية للنظام\n\n### للعملاء\n1. **تصفح سهل**: واجهة بديهية لتصفح المطاعم والمنتجات\n2. **بحث متقدم**: البحث عن المطاعم والوجبات\n3. **سلة ذكية**: إدارة الطلبات مع حفظ تلقائي\n4. **تتبع مباشر**: متابعة حالة الطلب خطوة بخطوة\n5. **عناوين متعددة**: حفظ وإدارة عناوين التوصيل\n6. **دفع متنوع**: دعم طرق دفع متعددة\n7. **إشعارات فورية**: تحديثات حالة الطلب\n\n### للمطاعم والإدارة\n1. **إدارة شاملة**: تحكم كامل في المطعم والقوائم\n2. **تتبع الطلبات**: إدارة ومتابعة جميع الطلبات\n3. **إحصائيات مفصلة**: تقارير المبيعات والأداء\n4. **إدارة العروض**: إنشاء عروض جذابة\n5. **إدارة السائقين**: تنسيق عمليات التوصيل\n6. **تحديثات فورية**: تحديث حالة الطلبات في الوقت الفعلي\n\n### للسائقين\n1. **إدارة مرنة**: تحكم في حالة التوفر\n2. **اختيار الطلبات**: قبول الطلبات المناسبة\n3. **تنقل محسن**: توجيه GPS مباشر\n4. **تواصل سهل**: اتصال مباشر بالعملاء\n5. **تتبع الأرباح**: مراقبة الدخل والإحصائيات\n6. **واجهة بسيطة**: تصميم مخصص للاستخدام أثناء القيادة\n\n## إعداد وتشغيل النظام\n\n### متطلبات النظام\n- Node.js 20+\n- PostgreSQL database\n- متصفح حديث يدعم ES6+\n\n### خطوات التشغيل\n\n1. **تثبيت التبعيات**:\n```bash\nnpm install\n```\n\n2. **إعداد قاعدة البيانات**:\n   - إنشاء قاعدة بيانات PostgreSQL\n   - تحديث متغيرات البيئة\n   - تشغيل migrations\n\n3. **تشغيل التطبيق**:\n```bash\nnpm run dev\n```\n\n### الوصول للتطبيقات\n- **تطبيق العملاء**: `http://localhost:5000/`\n- **لوحة التحكم**: `http://localhost:5000/admin`\n- **تطبيق السائقين**: `http://localhost:5000/delivery`\n\n## الأمان والخصوصية\n\n- **تشفير البيانات**: جميع البيانات الحساسة مشفرة\n- **مصادقة آمنة**: نظام مصادقة قوي للمستخدمين\n- **حماية API**: تحقق من الصلاحيات لجميع العمليات\n- **خصوصية البيانات**: امتثال لمعايير حماية البيانات\n- **نسخ احتياطي**: نسخ احتياطي منتظم لقاعدة البيانات\n\n## التحديثات المستقبلية\n\n- **دفع إلكتروني**: ربط مع بوابات دفع محلية ودولية\n- **إشعارات الدفع**: رسائل SMS وإشعارات فورية\n- **تطبيق موبايل**: نسخ Android و iOS\n- **ذكاء اصطناعي**: توصيات شخصية للعملاء\n- **تحليلات متقدمة**: رؤى أعمق لسلوك العملاء\n\n## الدعم والصيانة\n\n- **مراقبة 24/7**: مراقبة مستمرة لأداء النظام\n- **تحديثات أمنية**: تحديثات دورية للحماية\n- **دعم فني**: فريق دعم متخصص\n- **تدريب المستخدمين**: دورات تدريبية للمطاعم والسائقين\n\n## معلومات الاتصال\n\n- **الموقع الإلكتروني**: [alsarie-one.com]\n- **البريد الإلكتروني**: support@alsarie-one.com\n- **الهاتف**: +967-1-234567\n- **العنوان**: صنعاء، اليمن\n\n## الخلاصة\n\nتطبيق السريع ون يوفر حلاً متكاملاً لصناعة توصيل الطعام في اليمن، مع التركيز على الجودة والسرعة وسهولة الاستخدام. النظام مصمم ليكون قابلاً للتوسع ويدعم النمو المستقبلي للأعمال.\n\n---\n\n*تم تطوير هذا النظام باستخدام أحدث التقنيات لضمان الأداء الأمثل والأمان الكامل.*","size_bytes":9674},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        arabic: [\"Noto Sans Arabic\", \"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-in\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3082},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import bcrypt from 'bcrypt'; // تم التعديل هنا\nimport { randomUUID } from 'crypto';\nimport { dbStorage } from './db';\nimport { type InsertAdminUser, type InsertAdminSession } from '@shared/schema';\n\nexport class AuthService {\n  async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, 10);\n  }\n  async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n  async loginAdmin(email: string, password: string): Promise<{ success: boolean; token?: string; userType?: string; message?: string }> {\n    try {\n      const admin = await dbStorage.getAdminByEmail(email);\n      if (!admin) return { success: false, message: 'البريد الإلكتروني أو كلمة المرور غير صحيحة' };\n      if (!admin.isActive) return { success: false, message: 'الحساب غير مفعل' };\n      const isPasswordValid = await this.verifyPassword(password, admin.password);\n      if (!isPasswordValid) return { success: false, message: 'البريد الإلكتروني أو كلمة المرور غير صحيحة' };\n      const token = randomUUID();\n      const expiresAt = new Date();\n      expiresAt.setHours(expiresAt.getHours() + 24);\n      const sessionData: InsertAdminSession = {\n        adminId: admin.id,\n        token,\n        userType: admin.userType,\n        expiresAt\n      };\n      await dbStorage.createAdminSession(sessionData);\n      return { success: true, token, userType: admin.userType };\n    } catch (error) {\n      console.error('خطأ في تسجيل الدخول:', error);\n      return { success: false, message: 'حدث خطأ في الخادم' };\n    }\n  }\n  async validateSession(token: string): Promise<{ valid: boolean; userType?: string; adminId?: string }> {\n    try {\n      const session = await dbStorage.getAdminSession(token);\n      if (!session) return { valid: false };\n      if (new Date() > session.expiresAt) {\n        await dbStorage.deleteAdminSession(token);\n        return { valid: false };\n      }\n      return { valid: true, userType: session.userType, adminId: session.adminId || undefined };\n    } catch (error) {\n      console.error('خطأ في التحقق من الجلسة:', error);\n      return { valid: false };\n    }\n  }\n  async logout(token: string): Promise<boolean> {\n    try {\n      return await dbStorage.deleteAdminSession(token);\n    } catch (error) {\n      console.error('خطأ في تسجيل الخروج:', error);\n      return false;\n    }\n  }\n  async createDefaultAdmin(): Promise<void> {\n    try {\n      const existingAdmin = await dbStorage.getAdminByEmail('admin@alsarie-one.com');\n      if (!existingAdmin) {\n        const adminPassword = process.env.DEFAULT_ADMIN_PASSWORD || 'admin123456';\n        const hashedPassword = await this.hashPassword(adminPassword);\n        const defaultAdmin: InsertAdminUser = {\n          name: 'مدير النظام',\n          email: 'admin@alsarie-one.com',\n          password: hashedPassword,\n          userType: 'admin'\n        };\n        await dbStorage.createAdminUser(defaultAdmin);\n        console.log('تم إنشاء المدير الافتراضي بنجاح');\n      }\n    } catch (error) {\n      console.error('خطأ في إنشاء المدير الافتراضي:', error);\n    }\n  }\n}\nexport const authService = new AuthService();","size_bytes":3392},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { \n  users, userAddresses, categories, restaurants, menuItems, orders, drivers, specialOffers,\n  adminUsers, adminSessions, uiSettings,\n  type User, type InsertUser,\n  type UserAddress, type InsertUserAddress,\n  type Category, type InsertCategory,\n  type Restaurant, type InsertRestaurant,\n  type MenuItem, type InsertMenuItem,\n  type Order, type InsertOrder,\n  type Driver, type InsertDriver,\n  type SpecialOffer, type InsertSpecialOffer,\n  type AdminUser, type InsertAdminUser,\n  type AdminSession, type InsertAdminSession,\n  type UiSettings, type InsertUiSettings\n} from \"@shared/schema\";\nimport { IStorage } from \"./storage.ts\";\nimport { eq, and } from \"drizzle-orm\";\n\n// Database connection\nlet db: ReturnType<typeof drizzle> | null = null;\n\nfunction getDb() {\n  if (!db) {\n    if (!process.env.DATABASE_URL) {\n      throw new Error(\"DATABASE_URL must be defined in environment variables\");\n    }\n    const sql = neon(process.env.DATABASE_URL);\n    db = drizzle(sql);\n  }\n  return db;\n}\n\nexport class DatabaseStorage implements IStorage {\n  private get db() {\n    return getDb();\n  }\n\n  // Admin Authentication\n  async createAdminUser(adminUser: InsertAdminUser): Promise<AdminUser> {\n    const [newAdmin] = await this.db.insert(adminUsers).values(adminUser).returning();\n    return newAdmin;\n  }\n\n  async getAdminByEmail(email: string): Promise<AdminUser | undefined> {\n    const [admin] = await this.db.select().from(adminUsers).where(eq(adminUsers.email, email));\n    return admin;\n  }\n\n  async createAdminSession(session: InsertAdminSession): Promise<AdminSession> {\n    const [newSession] = await this.db.insert(adminSessions).values(session).returning();\n    return newSession;\n  }\n\n  async getAdminSession(token: string): Promise<AdminSession | undefined> {\n    const [session] = await this.db.select().from(adminSessions).where(eq(adminSessions.token, token));\n    return session;\n  }\n\n  async deleteAdminSession(token: string): Promise<boolean> {\n    const result = await this.db.delete(adminSessions).where(eq(adminSessions.token, token));\n    return result.rowCount > 0;\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await this.db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await this.db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await this.db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return await this.db.select().from(categories);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await this.db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined> {\n    const [updated] = await this.db.update(categories).set(category).where(eq(categories.id, id)).returning();\n    return updated;\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    const result = await this.db.delete(categories).where(eq(categories.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Restaurants\n  async getRestaurants(): Promise<Restaurant[]> {\n    return await this.db.select().from(restaurants);\n  }\n\n  async getRestaurant(id: string): Promise<Restaurant | undefined> {\n    const [restaurant] = await this.db.select().from(restaurants).where(eq(restaurants.id, id));\n    return restaurant;\n  }\n\n  async getRestaurantsByCategory(categoryId: string): Promise<Restaurant[]> {\n    return await this.db.select().from(restaurants).where(eq(restaurants.categoryId, categoryId));\n  }\n\n  async createRestaurant(restaurant: InsertRestaurant): Promise<Restaurant> {\n    const [newRestaurant] = await this.db.insert(restaurants).values(restaurant).returning();\n    return newRestaurant;\n  }\n\n  async updateRestaurant(id: string, restaurant: Partial<InsertRestaurant>): Promise<Restaurant | undefined> {\n    const [updated] = await this.db.update(restaurants).set(restaurant).where(eq(restaurants.id, id)).returning();\n    return updated;\n  }\n\n  async deleteRestaurant(id: string): Promise<boolean> {\n    const result = await this.db.delete(restaurants).where(eq(restaurants.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Menu Items\n  async getMenuItems(restaurantId: string): Promise<MenuItem[]> {\n    return await this.db.select().from(menuItems).where(eq(menuItems.restaurantId, restaurantId));\n  }\n\n  async getMenuItem(id: string): Promise<MenuItem | undefined> {\n    const [item] = await this.db.select().from(menuItems).where(eq(menuItems.id, id));\n    return item;\n  }\n\n  async createMenuItem(menuItem: InsertMenuItem): Promise<MenuItem> {\n    const [newItem] = await this.db.insert(menuItems).values(menuItem).returning();\n    return newItem;\n  }\n\n  async updateMenuItem(id: string, menuItem: Partial<InsertMenuItem>): Promise<MenuItem | undefined> {\n    const [updated] = await this.db.update(menuItems).set(menuItem).where(eq(menuItems.id, id)).returning();\n    return updated;\n  }\n\n  async deleteMenuItem(id: string): Promise<boolean> {\n    const result = await this.db.delete(menuItems).where(eq(menuItems.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Orders\n  async getOrders(): Promise<Order[]> {\n    return await this.db.select().from(orders);\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const [order] = await this.db.select().from(orders).where(eq(orders.id, id));\n    return order;\n  }\n\n  async getOrdersByRestaurant(restaurantId: string): Promise<Order[]> {\n    return await this.db.select().from(orders).where(eq(orders.restaurantId, restaurantId));\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await this.db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async updateOrder(id: string, order: Partial<InsertOrder>): Promise<Order | undefined> {\n    const [updated] = await this.db.update(orders).set(order).where(eq(orders.id, id)).returning();\n    return updated;\n  }\n\n  // Drivers\n  async getDrivers(): Promise<Driver[]> {\n    return await this.db.select().from(drivers);\n  }\n\n  async getDriver(id: string): Promise<Driver | undefined> {\n    const [driver] = await this.db.select().from(drivers).where(eq(drivers.id, id));\n    return driver;\n  }\n\n  async getAvailableDrivers(): Promise<Driver[]> {\n    return await this.db.select().from(drivers).where(and(eq(drivers.isAvailable, true), eq(drivers.isActive, true)));\n  }\n\n  async createDriver(driver: InsertDriver): Promise<Driver> {\n    const [newDriver] = await this.db.insert(drivers).values(driver).returning();\n    return newDriver;\n  }\n\n  async updateDriver(id: string, driver: Partial<InsertDriver>): Promise<Driver | undefined> {\n    const [updated] = await this.db.update(drivers).set(driver).where(eq(drivers.id, id)).returning();\n    return updated;\n  }\n\n  async deleteDriver(id: string): Promise<boolean> {\n    const result = await this.db.delete(drivers).where(eq(drivers.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Special Offers\n  async getSpecialOffers(): Promise<SpecialOffer[]> {\n    return await this.db.select().from(specialOffers);\n  }\n\n  async getActiveSpecialOffers(): Promise<SpecialOffer[]> {\n    return await this.db.select().from(specialOffers).where(eq(specialOffers.isActive, true));\n  }\n\n  async createSpecialOffer(offer: InsertSpecialOffer): Promise<SpecialOffer> {\n    const [newOffer] = await this.db.insert(specialOffers).values(offer).returning();\n    return newOffer;\n  }\n\n  async updateSpecialOffer(id: string, offer: Partial<InsertSpecialOffer>): Promise<SpecialOffer | undefined> {\n    const [updated] = await this.db.update(specialOffers).set(offer).where(eq(specialOffers.id, id)).returning();\n    return updated;\n  }\n\n  async deleteSpecialOffer(id: string): Promise<boolean> {\n    const result = await this.db.delete(specialOffers).where(eq(specialOffers.id, id));\n    return result.rowCount > 0;\n  }\n\n  // UI Settings\n  async getUiSettings(): Promise<UiSettings[]> {\n    return await this.db.select().from(uiSettings);\n  }\n\n  async getUiSetting(key: string): Promise<UiSettings | undefined> {\n    const [setting] = await this.db.select().from(uiSettings).where(eq(uiSettings.key, key));\n    return setting;\n  }\n\n  async updateUiSetting(key: string, value: string): Promise<UiSettings | undefined> {\n    const [updated] = await this.db.update(uiSettings)\n      .set({ value, updatedAt: new Date() })\n      .where(eq(uiSettings.key, key))\n      .returning();\n    return updated;\n  }\n\n  async createUiSetting(setting: InsertUiSettings): Promise<UiSettings> {\n    const [newSetting] = await this.db.insert(uiSettings).values(setting).returning();\n    return newSetting;\n  }\n\n  async deleteUiSetting(key: string): Promise<boolean> {\n    const result = await this.db.delete(uiSettings).where(eq(uiSettings.key, key));\n    return result.rowCount > 0;\n  }\n}\n\nexport const dbStorage = new DatabaseStorage();","size_bytes":9258},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      res.status(status).json({ message });\n      throw err;\n    });\n\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n    const port = parseInt(process.env.PORT || '5000', 10);\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, () => {\n      log(`serving on port ${port}`);\n    });\n  } catch (err) {\n    console.error(\"Failed to start server:\", err);\n    process.exit(1);\n  }\n})();","size_bytes":1797},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { dbStorage } from \"./db\";\nimport { authService } from \"./auth\";\nimport { \n  insertRestaurantSchema, \n  insertMenuItemSchema, \n  insertOrderSchema, \n  insertDriverSchema, \n  insertCategorySchema, \n  insertSpecialOfferSchema,\n  insertUiSettingsSchema\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Initialize default admin user on startup\n  await authService.createDefaultAdmin();\n  \n  // Admin Authentication Routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"البريد الإلكتروني وكلمة المرور مطلوبان\" });\n      }\n\n      // Use AuthService for login\n      const loginResult = await authService.loginAdmin(email, password);\n      \n      if (loginResult.success) {\n        res.json({\n          success: true,\n          token: loginResult.token,\n          userType: loginResult.userType,\n          message: \"تم تسجيل الدخول بنجاح\"\n        });\n      } else {\n        res.status(401).json({ message: loginResult.message });\n      }\n    } catch (error) {\n      console.error('خطأ في تسجيل الدخول:', error);\n      res.status(500).json({ message: \"خطأ في الخادم\" });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", async (req, res) => {\n    try {\n      const { token } = req.body;\n      if (token) {\n        await dbStorage.deleteAdminSession(token);\n      }\n      res.json({ message: \"تم تسجيل الخروج بنجاح\" });\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في الخادم\" });\n    }\n  });\n\n  app.get(\"/api/admin/verify\", async (req, res) => {\n    try {\n      const token = req.headers.authorization?.replace(\"Bearer \", \"\");\n      \n      if (!token) {\n        return res.status(401).json({ message: \"رمز التحقق مطلوب\" });\n      }\n\n      const validation = await authService.validateSession(token);\n      \n      if (validation.valid) {\n        res.json({\n          valid: true,\n          userType: validation.userType,\n          adminId: validation.adminId\n        });\n      } else {\n        res.status(401).json({ message: \"انتهت صلاحية الجلسة\" });\n      }\n    } catch (error) {\n      console.error('خطأ في التحقق:', error);\n      res.status(500).json({ message: \"خطأ في الخادم\" });\n    }\n  });\n\n  // Categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await dbStorage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await dbStorage.createCategory(validatedData);\n      res.status(201).json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid category data\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertCategorySchema.partial().parse(req.body);\n      const category = await dbStorage.updateCategory(id, validatedData);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid category data\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await dbStorage.deleteCategory(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Restaurants\n  app.get(\"/api/restaurants\", async (req, res) => {\n    try {\n      const { categoryId } = req.query;\n      let restaurants;\n      \n      if (categoryId) {\n        restaurants = await dbStorage.getRestaurantsByCategory(categoryId as string);\n      } else {\n        restaurants = await dbStorage.getRestaurants();\n      }\n      \n      res.json(restaurants);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch restaurants\" });\n    }\n  });\n\n  app.get(\"/api/restaurants/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const restaurant = await dbStorage.getRestaurant(id);\n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n      res.json(restaurant);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch restaurant\" });\n    }\n  });\n\n  app.post(\"/api/restaurants\", async (req, res) => {\n    try {\n      const validatedData = insertRestaurantSchema.parse(req.body);\n      const restaurant = await dbStorage.createRestaurant(validatedData);\n      res.status(201).json(restaurant);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid restaurant data\" });\n    }\n  });\n\n  app.put(\"/api/restaurants/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertRestaurantSchema.partial().parse(req.body);\n      const restaurant = await dbStorage.updateRestaurant(id, validatedData);\n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n      res.json(restaurant);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid restaurant data\" });\n    }\n  });\n\n  app.delete(\"/api/restaurants/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await dbStorage.deleteRestaurant(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete restaurant\" });\n    }\n  });\n\n  // Menu Items\n  app.get(\"/api/restaurants/:restaurantId/menu\", async (req, res) => {\n    try {\n      const { restaurantId } = req.params;\n      const menuItems = await dbStorage.getMenuItems(restaurantId);\n      res.json(menuItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch menu items\" });\n    }\n  });\n\n  app.post(\"/api/menu-items\", async (req, res) => {\n    try {\n      const validatedData = insertMenuItemSchema.parse(req.body);\n      const menuItem = await dbStorage.createMenuItem(validatedData);\n      res.status(201).json(menuItem);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid menu item data\" });\n    }\n  });\n\n  app.put(\"/api/menu-items/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertMenuItemSchema.partial().parse(req.body);\n      const menuItem = await dbStorage.updateMenuItem(id, validatedData);\n      if (!menuItem) {\n        return res.status(404).json({ message: \"Menu item not found\" });\n      }\n      res.json(menuItem);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid menu item data\" });\n    }\n  });\n\n  app.delete(\"/api/menu-items/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await dbStorage.deleteMenuItem(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Menu item not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete menu item\" });\n    }\n  });\n\n  // Orders\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const { restaurantId } = req.query;\n      let orders;\n      \n      if (restaurantId) {\n        orders = await dbStorage.getOrdersByRestaurant(restaurantId as string);\n      } else {\n        orders = await dbStorage.getOrders();\n      }\n      \n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const order = await dbStorage.getOrder(id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const validatedData = insertOrderSchema.parse(req.body);\n      const order = await dbStorage.createOrder(validatedData);\n      res.status(201).json(order);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid order data\" });\n    }\n  });\n\n  app.put(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertOrderSchema.partial().parse(req.body);\n      const order = await dbStorage.updateOrder(id, validatedData);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid order data\" });\n    }\n  });\n\n  // Drivers\n  app.get(\"/api/drivers\", async (req, res) => {\n    try {\n      const { available } = req.query;\n      let drivers;\n      \n      if (available === 'true') {\n        drivers = await dbStorage.getAvailableDrivers();\n      } else {\n        drivers = await dbStorage.getDrivers();\n      }\n      \n      res.json(drivers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch drivers\" });\n    }\n  });\n\n  app.get(\"/api/drivers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const driver = await dbStorage.getDriver(id);\n      if (!driver) {\n        return res.status(404).json({ message: \"Driver not found\" });\n      }\n      res.json(driver);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch driver\" });\n    }\n  });\n\n  app.post(\"/api/drivers\", async (req, res) => {\n    try {\n      const validatedData = insertDriverSchema.parse(req.body);\n      const driver = await dbStorage.createDriver(validatedData);\n      res.status(201).json(driver);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid driver data\" });\n    }\n  });\n\n  app.put(\"/api/drivers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertDriverSchema.partial().parse(req.body);\n      const driver = await dbStorage.updateDriver(id, validatedData);\n      if (!driver) {\n        return res.status(404).json({ message: \"Driver not found\" });\n      }\n      res.json(driver);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid driver data\" });\n    }\n  });\n\n  app.delete(\"/api/drivers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await dbStorage.deleteDriver(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Driver not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete driver\" });\n    }\n  });\n\n  // Special Offers\n  app.get(\"/api/special-offers\", async (req, res) => {\n    try {\n      const { active } = req.query;\n      let offers;\n      \n      if (active === 'true') {\n        offers = await dbStorage.getActiveSpecialOffers();\n      } else {\n        offers = await dbStorage.getSpecialOffers();\n      }\n      \n      res.json(offers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch special offers\" });\n    }\n  });\n\n  app.post(\"/api/special-offers\", async (req, res) => {\n    try {\n      const validatedData = insertSpecialOfferSchema.parse(req.body);\n      const offer = await dbStorage.createSpecialOffer(validatedData);\n      res.status(201).json(offer);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid special offer data\" });\n    }\n  });\n\n  app.put(\"/api/special-offers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertSpecialOfferSchema.partial().parse(req.body);\n      const offer = await dbStorage.updateSpecialOffer(id, validatedData);\n      if (!offer) {\n        return res.status(404).json({ message: \"Special offer not found\" });\n      }\n      res.json(offer);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid special offer data\" });\n    }\n  });\n\n  app.delete(\"/api/special-offers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await dbStorage.deleteSpecialOffer(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Special offer not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete special offer\" });\n    }\n  });\n\n  // UI Settings Routes\n  app.get(\"/api/ui-settings\", async (req, res) => {\n    try {\n      const settings = await dbStorage.getUiSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error('خطأ في جلب إعدادات الواجهة:', error);\n      res.status(500).json({ message: \"Failed to fetch UI settings\" });\n    }\n  });\n\n  app.get(\"/api/ui-settings/:key\", async (req, res) => {\n    try {\n      const { key } = req.params;\n      const setting = await dbStorage.getUiSetting(key);\n      if (!setting) {\n        return res.status(404).json({ message: \"الإعداد غير موجود\" });\n      }\n      res.json(setting);\n    } catch (error) {\n      console.error('خطأ في جلب إعداد الواجهة:', error);\n      res.status(500).json({ message: \"Failed to fetch UI setting\" });\n    }\n  });\n\n  app.put(\"/api/ui-settings/:key\", async (req, res) => {\n    try {\n      const { key } = req.params;\n      const { value } = req.body;\n      \n      if (!value) {\n        return res.status(400).json({ message: \"قيمة الإعداد مطلوبة\" });\n      }\n\n      const updated = await dbStorage.updateUiSetting(key, value);\n      if (!updated) {\n        return res.status(404).json({ message: \"الإعداد غير موجود\" });\n      }\n      \n      res.json(updated);\n    } catch (error) {\n      console.error('خطأ في تحديث إعداد الواجهة:', error);\n      res.status(500).json({ message: \"Failed to update UI setting\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14591},"server/storage.ts":{"content":"import { \n  type Category, type InsertCategory,\n  type Restaurant, type InsertRestaurant,\n  type MenuItem, type InsertMenuItem,\n  type Order, type InsertOrder,\n  type Driver, type InsertDriver,\n  type SpecialOffer, type InsertSpecialOffer,\n  type User, type InsertUser,\n  type UiSettings, type InsertUiSettings\n} from \"../shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Categories\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n\n  // Restaurants\n  getRestaurants(): Promise<Restaurant[]>;\n  getRestaurant(id: string): Promise<Restaurant | undefined>;\n  getRestaurantsByCategory(categoryId: string): Promise<Restaurant[]>;\n  createRestaurant(restaurant: InsertRestaurant): Promise<Restaurant>;\n  updateRestaurant(id: string, restaurant: Partial<InsertRestaurant>): Promise<Restaurant | undefined>;\n  deleteRestaurant(id: string): Promise<boolean>;\n\n  // Menu Items\n  getMenuItems(restaurantId: string): Promise<MenuItem[]>;\n  getMenuItem(id: string): Promise<MenuItem | undefined>;\n  createMenuItem(menuItem: InsertMenuItem): Promise<MenuItem>;\n  updateMenuItem(id: string, menuItem: Partial<InsertMenuItem>): Promise<MenuItem | undefined>;\n  deleteMenuItem(id: string): Promise<boolean>;\n\n  // Orders\n  getOrders(): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrdersByRestaurant(restaurantId: string): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, order: Partial<InsertOrder>): Promise<Order | undefined>;\n\n  // Drivers\n  getDrivers(): Promise<Driver[]>;\n  getDriver(id: string): Promise<Driver | undefined>;\n  getAvailableDrivers(): Promise<Driver[]>;\n  createDriver(driver: InsertDriver): Promise<Driver>;\n  updateDriver(id: string, driver: Partial<InsertDriver>): Promise<Driver | undefined>;\n  deleteDriver(id: string): Promise<boolean>;\n\n  // Special Offers\n  getSpecialOffers(): Promise<SpecialOffer[]>;\n  getActiveSpecialOffers(): Promise<SpecialOffer[]>;\n  createSpecialOffer(offer: InsertSpecialOffer): Promise<SpecialOffer>;\n  updateSpecialOffer(id: string, offer: Partial<InsertSpecialOffer>): Promise<SpecialOffer | undefined>;\n  deleteSpecialOffer(id: string): Promise<boolean>;\n\n  // UI Settings\n  getUiSettings?(): Promise<UiSettings[]>;\n  getUiSetting?(key: string): Promise<UiSettings | undefined>;\n  updateUiSetting?(key: string, value: string): Promise<UiSettings | undefined>;\n  createUiSetting?(setting: InsertUiSettings): Promise<UiSettings>;\n  deleteUiSetting?(key: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private categories: Map<string, Category>;\n  private restaurants: Map<string, Restaurant>;\n  private menuItems: Map<string, MenuItem>;\n  private orders: Map<string, Order>;\n  private drivers: Map<string, Driver>;\n  private specialOffers: Map<string, SpecialOffer>;\n\n  constructor() {\n    this.users = new Map();\n    this.categories = new Map();\n    this.restaurants = new Map();\n    this.menuItems = new Map();\n    this.orders = new Map();\n    this.drivers = new Map();\n    this.specialOffers = new Map();\n    \n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize categories\n    const categories = [\n      { id: \"1\", name: \"مطاعم\", icon: \"fas fa-utensils\", isActive: true },\n      { id: \"2\", name: \"مقاهي\", icon: \"fas fa-coffee\", isActive: true },\n      { id: \"3\", name: \"حلويات\", icon: \"fas fa-candy-cane\", isActive: true },\n      { id: \"4\", name: \"سوبرماركت\", icon: \"fas fa-shopping-cart\", isActive: true },\n      { id: \"5\", name: \"صيدليات\", icon: \"fas fa-pills\", isActive: true },\n    ];\n\n    categories.forEach(cat => this.categories.set(cat.id, cat));\n\n    // Initialize restaurants\n const restaurants = [\n      {\n        id: \"1\",\n        name: \"مطعم الوزيكو للعربكة\",\n        description: \"مطعم يمني تقليدي متخصص في الأطباق الشعبية\",\n        image: \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        rating: \"4.8\",\n        reviewCount: 4891,\n        deliveryTime: \"40-60 دقيقة\",\n        isOpen: true,\n        minimumOrder: \"25\", // تغيير إلى string\n        deliveryFee: \"5\", // تغيير إلى string\n        categoryId: \"1\",\n        openingTime: \"08:00\",\n        closingTime: \"23:00\",\n        workingDays: \"0,1,2,3,4,5,6\",\n        isTemporarilyClosed: false,\n        temporaryCloseReason: null,\n        createdAt: new Date(),\n      },\n      {\n        id: \"2\",\n        name: \"حلويات الشام\",\n        description: \"أفضل الحلويات الشامية والعربية\",\n        image: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        rating: \"4.6\",\n        reviewCount: 2341,\n        deliveryTime: \"30-45 دقيقة\",\n        isOpen: true,\n        minimumOrder: \"15\", // تغيير إلى string\n        deliveryFee: \"3\", // تغيير إلى string\n        categoryId: \"3\",\n        openingTime: \"08:00\",\n        closingTime: \"23:00\",\n        workingDays: \"0,1,2,3,4,5,6\",\n        isTemporarilyClosed: false,\n        temporaryCloseReason: null,\n        createdAt: new Date(),\n      },\n      {\n        id: \"3\",\n        name: \"مقهى العروبة\",\n        description: \"مقهى شعبي بالطابع العربي الأصيل\",\n        image: \"https://images.unsplash.com/photo-1442512595331-e89e73853f31?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        rating: \"4.5\",\n        reviewCount: 1876,\n        deliveryTime: \"يفتح في 8:00 ص\",\n        isOpen: false,\n        minimumOrder: \"20\", // تغيير إلى string\n        deliveryFee: \"4\", // تغيير إلى string\n        categoryId: \"2\",\n        openingTime: \"08:00\",\n        closingTime: \"23:00\",\n        workingDays: \"0,1,2,3,4,5,6\",\n        isTemporarilyClosed: false,\n        temporaryCloseReason: null,\n        createdAt: new Date(),\n      }\n    ];\n\n    restaurants.forEach(restaurant => this.restaurants.set(restaurant.id, restaurant));\n\n    // Initialize menu items\n   const menuItems = [\n      {\n        id: \"1\",\n        name: \"عربكة بالقشطة والعسل\",\n        description: \"حلوى يمنية تقليدية بالقشطة الطازجة والعسل الطبيعي\",\n        price: \"55\", // تغيير إلى string\n        image: \"https://images.unsplash.com/photo-1551024506-0bccd828d307?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\",\n        category: \"وجبات رمضان\",\n        isAvailable: true,\n        isSpecialOffer: false,\n        originalPrice: null,\n        restaurantId: \"1\",\n      },\n      {\n        id: \"2\",\n        name: \"معصوب بالقشطة والعسل\",\n        description: \"طبق يمني شعبي بالموز والقشطة والعسل\",\n        price: \"55\", // تغيير إلى string\n        image: \"https://images.unsplash.com/photo-1565299507177-b0ac66763828?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\",\n        category: \"وجبات رمضان\",\n        isAvailable: true,\n        isSpecialOffer: false,\n        originalPrice: null,\n        restaurantId: \"1\",\n      },\n      {\n        id: \"3\",\n        name: \"مياه معدنية 750 مل\",\n        description: \"مياه طبيعية معدنية عالية الجودة\",\n        price: \"3\", // تغيير إلى string\n        image: \"https://images.unsplash.com/photo-1559839734-2b71ea197ec2?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\",\n        category: \"المشروبات\",\n        isAvailable: true,\n        isSpecialOffer: false,\n        originalPrice: null,\n        restaurantId: \"1\",\n      },\n      {\n        id: \"4\",\n        name: \"كومبو عربكة خاص\",\n        description: \"عربكة + مطبق عادي + مشروب غازي\",\n        price: \"55\", // تغيير إلى string\n        originalPrice: \"60\", // تغيير إلى string\n        image: \"https://images.unsplash.com/photo-1565299507177-b0ac66763828?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\",\n        category: \"العروض\",\n        isAvailable: true,\n        isSpecialOffer: true,\n        restaurantId: \"1\",\n      }\n    ];\n\n    menuItems.forEach(item => this.menuItems.set(item.id, item));\n\n    // Initialize drivers\n    const drivers = [\n      {\n        id: \"1\",\n        name: \"أحمد محمد\",\n        phone: \"+967771234567\",\n        password: \"password123\",\n        isAvailable: true,\n        isActive: true,\n        currentLocation: \"صنعاء\",\n        earnings: \"2500\", // تغيير إلى string\n        createdAt: new Date(),\n      },\n      {\n        id: \"2\", \n        name: \"علي حسن\",\n        phone: \"+967779876543\",\n        password: \"password123\",\n        isAvailable: true,\n        isActive: true,\n        currentLocation: \"تعز\",\n        earnings: \"3200\", // تغيير إلى string\n        createdAt: new Date(),\n      }\n    ];\n    drivers.forEach(driver => this.drivers.set(driver.id, driver));\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      name: insertUser.username,\n      phone: null,\n      email: null,\n      address: null,\n      isActive: true,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const newCategory: Category = { \n      ...category, \n      id,\n      isActive: category.isActive ?? true \n    };\n    this.categories.set(id, newCategory);\n    return newCategory;\n  }\n\n  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined> {\n    const existing = this.categories.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...category };\n    this.categories.set(id, updated);\n    return updated;\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    return this.categories.delete(id);\n  }\n\n  // Restaurants\n  async getRestaurants(): Promise<Restaurant[]> {\n    return Array.from(this.restaurants.values());\n  }\n\n  async getRestaurant(id: string): Promise<Restaurant | undefined> {\n    return this.restaurants.get(id);\n  }\n\n  async getRestaurantsByCategory(categoryId: string): Promise<Restaurant[]> {\n    return Array.from(this.restaurants.values()).filter(r => r.categoryId === categoryId);\n  }\n\n  async createRestaurant(restaurant: InsertRestaurant): Promise<Restaurant> {\n  const id = randomUUID();\n  const newRestaurant: Restaurant = { \n    ...restaurant, \n    id, \n    createdAt: new Date(),\n    description: restaurant.description ?? null,\n    rating: restaurant.rating ?? \"0.0\",\n    reviewCount: restaurant.reviewCount ?? 0,\n    isOpen: restaurant.isOpen ?? true,\n    minimumOrder: restaurant.minimumOrder?.toString() ?? \"0\",\n    deliveryFee: restaurant.deliveryFee?.toString() ?? \"0\",\n    categoryId: restaurant.categoryId ?? null,\n    // معالجة الخصائص الجديدة لضمان عدم وجود undefined\n    openingTime: restaurant.openingTime ?? null,\n    closingTime: restaurant.closingTime ?? null,\n    workingDays: restaurant.workingDays ?? null,\n    isTemporarilyClosed: restaurant.isTemporarilyClosed ?? false,\n    temporaryCloseReason: restaurant.temporaryCloseReason ?? null\n  };\n  this.restaurants.set(id, newRestaurant);\n  return newRestaurant;\n}\nasync updateRestaurant(id: string, restaurant: Partial<InsertRestaurant>): Promise<Restaurant | undefined> {\n  const existing = this.restaurants.get(id);\n  if (!existing) return undefined;\n  \n  // معالجة الخصائص لتجنب undefined\n  const updates: Partial<Restaurant> = {};\n  \n  if (restaurant.openingTime !== undefined) updates.openingTime = restaurant.openingTime ?? null;\n  if (restaurant.closingTime !== undefined) updates.closingTime = restaurant.closingTime ?? null;\n  if (restaurant.workingDays !== undefined) updates.workingDays = restaurant.workingDays ?? null;\n  if (restaurant.isTemporarilyClosed !== undefined) updates.isTemporarilyClosed = restaurant.isTemporarilyClosed;\n  if (restaurant.temporaryCloseReason !== undefined) updates.temporaryCloseReason = restaurant.temporaryCloseReason ?? null;\n  \n  // الخصائص الأخرى\n  if (restaurant.name !== undefined) updates.name = restaurant.name;\n  if (restaurant.description !== undefined) updates.description = restaurant.description ?? null;\n  if (restaurant.image !== undefined) updates.image = restaurant.image;\n  if (restaurant.rating !== undefined) updates.rating = restaurant.rating ?? \"0.0\";\n  if (restaurant.reviewCount !== undefined) updates.reviewCount = restaurant.reviewCount ?? 0;\n  if (restaurant.deliveryTime !== undefined) updates.deliveryTime = restaurant.deliveryTime;\n  if (restaurant.isOpen !== undefined) updates.isOpen = restaurant.isOpen ?? true;\n  if (restaurant.minimumOrder !== undefined) updates.minimumOrder = restaurant.minimumOrder?.toString() ?? \"0\";\n  if (restaurant.deliveryFee !== undefined) updates.deliveryFee = restaurant.deliveryFee?.toString() ?? \"0\";\n  if (restaurant.categoryId !== undefined) updates.categoryId = restaurant.categoryId ?? null;\n  \n  const updated = { ...existing, ...updates };\n  this.restaurants.set(id, updated);\n  return updated;\n}\n\n  async deleteRestaurant(id: string): Promise<boolean> {\n    return this.restaurants.delete(id);\n  }\n\n  // Menu Items\n  async getMenuItems(restaurantId: string): Promise<MenuItem[]> {\n    return Array.from(this.menuItems.values()).filter(item => item.restaurantId === restaurantId);\n  }\n\n  async getMenuItem(id: string): Promise<MenuItem | undefined> {\n    return this.menuItems.get(id);\n  }\n\n  async createMenuItem(menuItem: InsertMenuItem): Promise<MenuItem> {\n    const id = randomUUID();\n    const newMenuItem: MenuItem = { \n      ...menuItem, \n      id,\n      description: menuItem.description ?? null,\n      isAvailable: menuItem.isAvailable ?? true,\n      isSpecialOffer: menuItem.isSpecialOffer ?? false,\n      originalPrice: menuItem.originalPrice ?? null,\n      restaurantId: menuItem.restaurantId ?? null\n    };\n    this.menuItems.set(id, newMenuItem);\n    return newMenuItem;\n  }\n\n  async updateMenuItem(id: string, menuItem: Partial<InsertMenuItem>): Promise<MenuItem | undefined> {\n    const existing = this.menuItems.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...menuItem };\n    this.menuItems.set(id, updated);\n    return updated;\n  }\n\n  async deleteMenuItem(id: string): Promise<boolean> {\n    return this.menuItems.delete(id);\n  }\n\n  // Orders\n  async getOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values());\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getOrdersByRestaurant(restaurantId: string): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(order => order.restaurantId === restaurantId);\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const newOrder: Order = { \n      ...order, \n      id, \n      createdAt: new Date(),\n      customerEmail: order.customerEmail ?? null,\n      notes: order.notes ?? null,\n      status: order.status ?? \"pending\",\n      estimatedTime: order.estimatedTime ?? \"30-45 دقيقة\",\n      restaurantId: order.restaurantId ?? null,\n      driverId: order.driverId ?? null,\n      updatedAt: new Date()\n    };\n    this.orders.set(id, newOrder);\n    return newOrder;\n  }\n\n  async updateOrder(id: string, order: Partial<InsertOrder>): Promise<Order | undefined> {\n    const existing = this.orders.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...order };\n    this.orders.set(id, updated);\n    return updated;\n  }\n\n  // Drivers\n  async getDrivers(): Promise<Driver[]> {\n    return Array.from(this.drivers.values());\n  }\n\n  async getDriver(id: string): Promise<Driver | undefined> {\n    return this.drivers.get(id);\n  }\n\n  async getAvailableDrivers(): Promise<Driver[]> {\n    return Array.from(this.drivers.values()).filter(driver => driver.isAvailable && driver.isActive);\n  }\n\n async createDriver(driver: InsertDriver): Promise<Driver> {\n    const id = randomUUID();\n    const newDriver: Driver = { \n      ...driver, \n      id, \n      createdAt: new Date(),\n      isActive: driver.isActive ?? true,\n      isAvailable: driver.isAvailable ?? true,\n      currentLocation: driver.currentLocation ?? null,\n      earnings: driver.earnings?.toString() ?? \"0\" // تحويل إلى string\n    };\n    this.drivers.set(id, newDriver);\n    return newDriver;\n  }\n\n  async updateDriver(id: string, driver: Partial<InsertDriver>): Promise<Driver | undefined> {\n    const existing = this.drivers.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...driver };\n    this.drivers.set(id, updated);\n    return updated;\n  }\n\n  async deleteDriver(id: string): Promise<boolean> {\n    return this.drivers.delete(id);\n  }\n\n  // Special Offers\n  async getSpecialOffers(): Promise<SpecialOffer[]> {\n    return Array.from(this.specialOffers.values());\n  }\n\n  async getActiveSpecialOffers(): Promise<SpecialOffer[]> {\n    return Array.from(this.specialOffers.values()).filter(offer => offer.isActive);\n  }\n\n\n  async createSpecialOffer(offer: InsertSpecialOffer): Promise<SpecialOffer> {\n    const id = randomUUID();\n    const newOffer: SpecialOffer = { \n      ...offer, \n      id, \n      createdAt: new Date(),\n      isActive: offer.isActive ?? true,\n      minimumOrder: offer.minimumOrder?.toString() ?? \"0\", // تحويل إلى string\n      discountPercent: offer.discountPercent ?? null,\n      discountAmount: offer.discountAmount?.toString() ?? null, // تحويل إلى string\n      validUntil: offer.validUntil ?? null\n    };\n    this.specialOffers.set(id, newOffer);\n    return newOffer;\n  }\n\n  async updateSpecialOffer(id: string, offer: Partial<InsertSpecialOffer>): Promise<SpecialOffer | undefined> {\n    const existing = this.specialOffers.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...offer };\n    this.specialOffers.set(id, updated);\n    return updated;\n  }\n\n  async deleteSpecialOffer(id: string): Promise<boolean> {\n    return this.specialOffers.delete(id);\n  }\n}\n\nimport { dbStorage } from './db';\nexport const storage = dbStorage;","size_bytes":19161},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from \"url\";\n\nconst viteLogger = createLogger();\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n  app.use(express.static(distPath));\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2209},"shared/schema.ts":{"content":"import { pgTable, text, uuid, timestamp, boolean, integer, decimal, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  password: text(\"password\").notNull(), // تمت الإضافة\n  name: text(\"name\").notNull(),\n  phone: varchar(\"phone\", { length: 20 }),\n  email: varchar(\"email\", { length: 100 }),\n  address: text(\"address\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// User addresses table\nexport const userAddresses = pgTable(\"user_addresses\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // تمت الإضافة: home, work, other\n  title: varchar(\"title\", { length: 100 }).notNull(),\n  address: text(\"address\").notNull(),\n  details: text(\"details\"), // تمت الإضافة\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  isDefault: boolean(\"is_default\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  icon: varchar(\"icon\", { length: 100 }).notNull(), // تم تغيير إلى notNull\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\n// Restaurants table\nexport const restaurants = pgTable(\"restaurants\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  image: text(\"image\").notNull(), // تم تغيير إلى notNull\n  rating: varchar(\"rating\", { length: 10 }).default(\"0.0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  deliveryTime: varchar(\"delivery_time\", { length: 50 }).notNull(), // تم تغيير إلى notNull\n  isOpen: boolean(\"is_open\").default(true).notNull(),\n  minimumOrder: decimal(\"minimum_order\", { precision: 10, scale: 2 }).default(\"0\"),\n  deliveryFee: decimal(\"delivery_fee\", { precision: 10, scale: 2 }).default(\"0\"),\n  categoryId: uuid(\"category_id\").references(() => categories.id),\n  openingTime: varchar(\"opening_time\", { length: 50 }).default(\"08:00\"), // تمت الإضافة\n  closingTime: varchar(\"closing_time\", { length: 50 }).default(\"23:00\"), // تمت الإضافة\n  workingDays: varchar(\"working_days\", { length: 50 }).default(\"0,1,2,3,4,5,6\"), // تمت الإضافة\n  isTemporarilyClosed: boolean(\"is_temporarily_closed\").default(false), // تمت الإضافة\n  temporaryCloseReason: text(\"temporary_close_reason\"), // تمت الإضافة\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Menu items table\nexport const menuItems = pgTable(\"menu_items\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  image: text(\"image\").notNull(), // تم تغيير إلى notNull\n  category: varchar(\"category\", { length: 100 }).notNull(), // تم تغيير إلى notNull\n  isAvailable: boolean(\"is_available\").default(true).notNull(),\n  isSpecialOffer: boolean(\"is_special_offer\").default(false).notNull(),\n  restaurantId: uuid(\"restaurant_id\").references(() => restaurants.id),\n});\n\n// Drivers table\nexport const drivers = pgTable(\"drivers\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  phone: varchar(\"phone\", { length: 20 }).notNull().unique(),\n  password: text(\"password\").notNull(),\n  isAvailable: boolean(\"is_available\").default(true).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  currentLocation: varchar(\"current_location\", { length: 200 }),\n  earnings: decimal(\"earnings\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  customerName: varchar(\"customer_name\", { length: 100 }).notNull(),\n  customerPhone: varchar(\"customer_phone\", { length: 20 }).notNull(),\n  customerEmail: varchar(\"customer_email\", { length: 100 }),\n  deliveryAddress: text(\"delivery_address\").notNull(),\n  notes: text(\"notes\"),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(), // تمت الإضافة\n  status: varchar(\"status\", { length: 50 }).default(\"pending\").notNull(),\n  items: text(\"items\").notNull(), // JSON string\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(), // تمت الإضافة\n  deliveryFee: decimal(\"delivery_fee\", { precision: 10, scale: 2 }).notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  estimatedTime: varchar(\"estimated_time\", { length: 50 }).default(\"30-45 دقيقة\"),\n  restaurantId: uuid(\"restaurant_id\").references(() => restaurants.id),\n  driverId: uuid(\"driver_id\").references(() => drivers.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Special offers table\nexport const specialOffers = pgTable(\"special_offers\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\").notNull(), // تم تغيير إلى notNull\n  image: text(\"image\").notNull(), // تمت الإضافة\n  discountPercent: integer(\"discount_percent\"),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }),\n  minimumOrder: decimal(\"minimum_order\", { precision: 10, scale: 2 }).default(\"0\"),\n  validUntil: timestamp(\"valid_until\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Admin users table\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  email: varchar(\"email\", { length: 100 }).notNull().unique(),\n  password: text(\"password\").notNull(),\n  userType: varchar(\"user_type\", { length: 50 }).default(\"admin\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Admin sessions table\nexport const adminSessions = pgTable(\"admin_sessions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  adminId: uuid(\"admin_id\").references(() => adminUsers.id).notNull(),\n  token: text(\"token\").notNull().unique(),\n  userType: varchar(\"user_type\", { length: 50 }).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// UI settings table\nexport const uiSettings = pgTable(\"ui_settings\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(), // تمت الإضافة\n  key: varchar(\"key\", { length: 100 }).notNull().unique(),\n  value: text(\"value\").notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true), // تمت الإضافة\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(), // تمت الإضافة\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users);\nexport const selectUserSchema = createSelectSchema(users);\nexport type User = z.infer<typeof selectUserSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport const insertUserAddressSchema = createInsertSchema(userAddresses);\nexport const selectUserAddressSchema = createSelectSchema(userAddresses);\nexport type UserAddress = z.infer<typeof selectUserAddressSchema>;\nexport type InsertUserAddress = z.infer<typeof insertUserAddressSchema>;\n\nexport const insertCategorySchema = createInsertSchema(categories);\nexport const selectCategorySchema = createSelectSchema(categories);\nexport type Category = z.infer<typeof selectCategorySchema>;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport const insertRestaurantSchema = createInsertSchema(restaurants);\nexport const selectRestaurantSchema = createSelectSchema(restaurants);\nexport type Restaurant = z.infer<typeof selectRestaurantSchema>;\nexport type InsertRestaurant = z.infer<typeof insertRestaurantSchema>;\n\nexport const insertMenuItemSchema = createInsertSchema(menuItems);\nexport const selectMenuItemSchema = createSelectSchema(menuItems);\nexport type MenuItem = z.infer<typeof selectMenuItemSchema>;\nexport type InsertMenuItem = z.infer<typeof insertMenuItemSchema>;\n\nexport const insertOrderSchema = createInsertSchema(orders);\nexport const selectOrderSchema = createSelectSchema(orders);\nexport type Order = z.infer<typeof selectOrderSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport const insertDriverSchema = createInsertSchema(drivers);\nexport const selectDriverSchema = createSelectSchema(drivers);\nexport type Driver = z.infer<typeof selectDriverSchema>;\nexport type InsertDriver = z.infer<typeof insertDriverSchema>;\n\nexport const insertSpecialOfferSchema = createInsertSchema(specialOffers);\nexport const selectSpecialOfferSchema = createSelectSchema(specialOffers);\nexport type SpecialOffer = z.infer<typeof selectSpecialOfferSchema>;\nexport type InsertSpecialOffer = z.infer<typeof insertSpecialOfferSchema>;\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers);\nexport const selectAdminUserSchema = createSelectSchema(adminUsers);\nexport type AdminUser = z.infer<typeof selectAdminUserSchema>;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\n\nexport const insertAdminSessionSchema = createInsertSchema(adminSessions);\nexport const selectAdminSessionSchema = createSelectSchema(adminSessions);\nexport type AdminSession = z.infer<typeof selectAdminSessionSchema>;\nexport type InsertAdminSession = z.infer<typeof insertAdminSessionSchema>;\n\nexport const insertUiSettingsSchema = createInsertSchema(uiSettings);\nexport const selectUiSettingsSchema = createSelectSchema(uiSettings);\nexport type UiSettings = z.infer<typeof selectUiSettingsSchema>;\nexport type InsertUiSettings = z.infer<typeof insertUiSettingsSchema>;","size_bytes":10605},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { CartProvider } from \"./context/CartContext\";\nimport { ThemeProvider } from \"./context/ThemeContext\";\nimport { AuthProvider, useAuth } from \"./context/AuthContext\";\nimport { LocationProvider, useLocation } from \"./context/LocationContext\";\nimport { UiSettingsProvider } from \"./context/UiSettingsContext\";\nimport { LocationPermissionModal } from \"./components/LocationPermissionModal\";\nimport Layout from \"./components/Layout\";\nimport { LoginPage } from \"./pages/LoginPage\";\nimport { AdminDashboard } from \"./pages/AdminDashboard\";\nimport { DriverDashboard } from \"./pages/DriverDashboard\";\nimport { useState } from \"react\";\nimport Home from \"./pages/Home\";\nimport Restaurant from \"./pages/Restaurant\";\nimport Cart from \"./pages/Cart\";\nimport Profile from \"./pages/Profile\";\nimport Location from \"./pages/Location\";\nimport OrderTracking from \"./pages/OrderTracking\";\nimport Settings from \"./pages/Settings\";\nimport Privacy from \"./pages/Privacy\";\n// Admin pages removed - now handled separately\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthenticatedApp() {\n  const { isAuthenticated, userType, loading } = useAuth();\n  const { location } = useLocation();\n  const [showLogin, setShowLogin] = useState(false);\n  const [showLocationModal, setShowLocationModal] = useState(true);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">جاري التحميل...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle admin login route\n  if (window.location.pathname === '/admin-login') {\n    return (\n      <LoginPage \n        onSuccess={() => {\n          if (userType === 'admin') {\n            window.location.href = '/admin/dashboard';\n          } else if (userType === 'driver') {\n            window.location.href = '/driver/dashboard';\n          } else {\n            window.location.href = '/';\n          }\n        }} \n      />\n    );\n  }\n\n  // Handle admin routes (completely separate from customer app)\n  if (window.location.pathname.startsWith('/admin/')) {\n    if (!isAuthenticated || userType !== 'admin') {\n      window.location.href = '/admin-login';\n      return null;\n    }\n    return (\n      <AdminDashboard \n        onLogout={() => {\n          window.location.href = '/admin-login';\n        }} \n      />\n    );\n  }\n\n  // Handle driver routes (completely separate from customer app)\n  if (window.location.pathname.startsWith('/driver/')) {\n    if (!isAuthenticated || userType !== 'driver') {\n      window.location.href = '/admin-login';\n      return null;\n    }\n    return (\n      <DriverDashboard \n        onLogout={() => {\n          window.location.href = '/admin-login';\n        }} \n      />\n    );\n  }\n\n  // Remove admin/driver routes from customer app routing\n\n  // Default customer app\n  return (\n    <>\n      <Layout>\n        <Router />\n      </Layout>\n      \n      {showLocationModal && !location.hasPermission && (\n        <LocationPermissionModal\n          onPermissionGranted={(position) => {\n            console.log('تم منح الإذن للموقع:', position);\n            setShowLocationModal(false);\n          }}\n          onPermissionDenied={() => {\n            console.log('تم رفض الإذن للموقع');\n            setShowLocationModal(false);\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/restaurant/:id\" component={Restaurant} />\n      <Route path=\"/cart\" component={Cart} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/addresses\" component={Location} />\n      <Route path=\"/orders/:orderId\" component={OrderTracking} />\n      <Route path=\"/orders\" component={() => <OrderTracking />} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/privacy\" component={Privacy} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider>\n          <UiSettingsProvider>\n            <LocationProvider>\n              <AuthProvider>\n                <CartProvider>\n                  <Toaster />\n                  <AuthenticatedApp />\n                </CartProvider>\n              </AuthProvider>\n            </LocationProvider>\n          </UiSettingsProvider>\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4893},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Arabic:wght@100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(15 98% 56%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(15 98% 56%);\n  --chart-1: hsl(15 98% 56%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(15 98% 56%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(15 98% 56%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(15 98% 56%);\n  --font-sans: 'Inter', 'Noto Sans Arabic', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(15 98% 56% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(15 98% 56% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(15 98% 56% / 0.00), 0px 1px 2px -1px hsl(15 98% 56% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(15 98% 56% / 0.00), 0px 1px 2px -1px hsl(15 98% 56% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(15 98% 56% / 0.00), 0px 2px 4px -1px hsl(15 98% 56% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(15 98% 56% / 0.00), 0px 4px 6px -1px hsl(15 98% 56% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(15 98% 56% / 0.00), 0px 8px 10px -1px hsl(15 98% 56% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(15 98% 56% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(15 98% 56%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(15 98% 56%);\n  --chart-1: hsl(15 98% 56%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(222.2 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(15 98% 56%);\n  --sidebar-primary-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-accent: hsl(217.2 32.6% 17.5%);\n  --sidebar-accent-foreground: hsl(15 98% 56%);\n  --sidebar-border: hsl(217.2 32.6% 17.5%);\n  --sidebar-ring: hsl(15 98% 56%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    direction: rtl;\n  }\n\n  html {\n    direction: rtl;\n  }\n}\n\n@layer components {\n  .hero-banner {\n    background: linear-gradient(135deg, var(--primary) 0%, hsl(15 98% 46%) 100%);\n  }\n\n  .fade-in {\n    animation: fadeIn 0.3s ease-in;\n  }\n\n  .floating-cart {\n    position: fixed;\n    bottom: 20px;\n    left: 20px;\n    z-index: 50;\n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(10px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n/* RTL specific styles */\n[dir=\"rtl\"] .rtl\\:space-x-reverse > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 1;\n}\n\n/* Custom scrollbar for horizontal scrolling */\n.no-scrollbar {\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n}\n\n.no-scrollbar::-webkit-scrollbar {\n  display: none;\n}\n","size_bytes":4536},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"migrations/scripts/migrate.js":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { migrate } from \"drizzle-orm/neon-http/migrator\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nif (!process.env.DATABASE_URL) {\n  console.error(\"❌ DATABASE_URL is not defined\");\n  process.exit(1);\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nconst db = drizzle(sql);\n\nasync function runMigrations() {\n  try {\n    console.log(\"🔄 Running database migrations...\");\n    await migrate(db, { migrationsFolder: \"./drizzle\" });\n    console.log(\"✅ Migrations completed successfully!\");\n  } catch (error) {\n    console.error(\"❌ Migration failed:\", error);\n    process.exit(1);\n  }\n}\n\nrunMigrations();","size_bytes":715},"client/src/components/CartButton.tsx":{"content":"import { ShoppingCart } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useCart } from '../context/CartContext';\nimport { useLocation } from 'wouter';\n\nexport default function CartButton() {\n  const { getItemCount } = useCart();\n  const [, setLocation] = useLocation();\n  const itemCount = getItemCount();\n\n  return (\n    <div className=\"floating-cart\">\n      <Button\n        className=\"relative bg-primary text-primary-foreground p-4 rounded-full shadow-lg hover:bg-primary/90\"\n        onClick={() => setLocation('/cart')}\n        data-testid=\"button-floating-cart\"\n      >\n        <ShoppingCart className=\"h-6 w-6\" />\n        <span\n          className=\"absolute -top-2 -right-2 bg-destructive text-destructive-foreground text-xs rounded-full h-6 w-6 flex items-center justify-center\"\n          data-testid=\"text-cart-count\"\n        >\n          {itemCount}\n        </span>\n      </Button>\n    </div>\n  );\n}\n","size_bytes":939},"client/src/components/CategoryTabs.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Category } from '@shared/schema';\nimport { useUiSettings } from '@/context/UiSettingsContext';\n\ninterface CategoryTabsProps {\n  selectedCategory: string | null;\n  onCategoryChange: (categoryId: string | null) => void;\n}\n\nexport default function CategoryTabs({ selectedCategory, onCategoryChange }: CategoryTabsProps) {\n  const { data: categories, isLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n  const { isFeatureEnabled } = useUiSettings();\n\n  // لا تعرض المكون إذا كان معطل\n  if (!isFeatureEnabled('show_categories')) {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex gap-3 overflow-x-auto pb-2 no-scrollbar px-4\">\n        {[...Array(5)].map((_, i) => (\n          <div key={i} className=\"bg-muted rounded-full h-10 w-24 animate-pulse\" />\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <section className=\"px-4 mb-6\">\n      <div className=\"flex gap-3 overflow-x-auto pb-2 no-scrollbar\">\n        <Button\n          variant={selectedCategory === null ? \"default\" : \"secondary\"}\n          className=\"whitespace-nowrap font-medium\"\n          onClick={() => onCategoryChange(null)}\n          data-testid=\"category-tab-all\"\n        >\n          <i className=\"fas fa-th-large ml-2\"></i>\n          الكل\n        </Button>\n        {categories?.map((category) => (\n          <Button\n            key={category.id}\n            variant={selectedCategory === category.id ? \"default\" : \"secondary\"}\n            className=\"whitespace-nowrap font-medium\"\n            onClick={() => onCategoryChange(category.id)}\n            data-testid={`category-tab-${category.id}`}\n          >\n            <i className={`${category.icon} ml-2`}></i>\n            {category.name}\n          </Button>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":1921},"client/src/components/Layout.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Home, Search, Receipt, User, ShoppingCart, Moon, Sun, Menu, X, Settings, Shield, MapPin, Clock, Truck } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';\nimport { useTheme } from '../context/ThemeContext';\nimport { useCart } from '../context/CartContext';\nimport CartButton from './CartButton';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [location, setLocation] = useLocation();\n  const { theme, toggleTheme } = useTheme();\n  const { getItemCount } = useCart();\n  const { toast } = useToast();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [logoClickCount, setLogoClickCount] = useState(0);\n  const [showAdminButtons, setShowAdminButtons] = useState(false);\n  \n  // States for profile click counter\n  const [profileClickCount, setProfileClickCount] = useState(0);\n  const [lastProfileClickTime, setLastProfileClickTime] = useState(0);\n\n  const isHomePage = location === '/';\n  const isAdminPage = location.startsWith('/admin');\n  const isDeliveryPage = location.startsWith('/delivery');\n\n  const navigationItems = [\n    { icon: Home, label: 'الرئيسية', path: '/', testId: 'nav-home' },\n    { icon: Search, label: 'البحث', path: '/search', testId: 'nav-search' },\n    { icon: Receipt, label: 'طلباتي', path: '/orders', testId: 'nav-orders' },\n    { icon: User, label: 'الملف الشخصي', path: '/profile', testId: 'nav-profile' },\n  ];\n\n  const sidebarMenuItems = [\n    { icon: User, label: 'الملف الشخصي', path: '/profile', testId: 'sidebar-profile' },\n    { icon: Receipt, label: 'طلباتي', path: '/orders', testId: 'sidebar-orders' },\n    { icon: MapPin, label: 'العناوين المحفوظة', path: '/addresses', testId: 'sidebar-addresses' },\n    { icon: Clock, label: 'تتبع الطلبات', path: '/orders', testId: 'sidebar-tracking' },\n    { icon: Settings, label: 'الإعدادات', path: '/settings', testId: 'sidebar-settings' },\n    { icon: Shield, label: 'سياسة الخصوصية', path: '/privacy', testId: 'sidebar-privacy' },\n  ];\n\n  // وظيفة التعامل مع النقر على أيقونة الملف الشخصي\n  const handleProfileIconClick = () => {\n    const currentTime = Date.now();\n    \n    // إذا مر أكثر من ثانيتين منذ آخر نقرة، نعيد العداد\n    if (currentTime - lastProfileClickTime > 2000) {\n      setProfileClickCount(1);\n    } else {\n      setProfileClickCount(prev => prev + 1);\n    }\n    \n    setLastProfileClickTime(currentTime);\n\n    // إذا وصل إلى 5 نقرات\n    if (profileClickCount + 1 === 5) {\n      toast({\n        title: \"الوصول إلى صفحة تسجيل الدخول\",\n        description: \"سيتم الانتقال إلى صفحة تسجيل الدخول للإدارة\",\n      });\n      \n      // الانتقال إلى صفحة تسجيل الدخول\n      window.location.href = '/admin-login';\n      setProfileClickCount(0);\n    } else if (profileClickCount + 1 > 2) {\n      // إشعار بعد النقرات الأولى\n      toast({\n        title: `نقرة ${profileClickCount + 1} من 5`,\n        description: \"استمر للنقل للوصول إلى صفحة تسجيل الدخول\",\n      });\n    }\n  };\n\n  // إعادة تعيين عداد النقرات بعد 2 ثانية\n  useEffect(() => {\n    if (profileClickCount > 0) {\n      const timer = setTimeout(() => {\n        setProfileClickCount(0);\n      }, 2000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [profileClickCount, lastProfileClickTime]);\n\n  return (\n    <div className=\"max-w-md mx-auto bg-background min-h-screen shadow-xl relative\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4 sticky top-0 z-40\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <Sheet open={sidebarOpen} onOpenChange={setSidebarOpen}>\n              <SheetTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  data-testid=\"button-menu\"\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80\">\n                <SheetHeader>\n                  <SheetTitle className=\"text-right\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                        <User className=\"h-6 w-6 text-primary-foreground\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-bold text-foreground\">مرحباً بك</h3>\n                        <p className=\"text-sm text-muted-foreground\">في تطبيق السريع ون</p>\n                      </div>\n                    </div>\n                  </SheetTitle>\n                </SheetHeader>\n                \n                <div className=\"mt-8 space-y-2\">\n                  {sidebarMenuItems.map((item) => {\n                    const Icon = item.icon;\n                    return (\n                      <Button\n                        key={item.path}\n                        variant=\"ghost\"\n                        className=\"w-full justify-start gap-3 h-12\"\n                        onClick={() => {\n                          setLocation(item.path);\n                          setSidebarOpen(false);\n                        }}\n                        data-testid={item.testId}\n                      >\n                        <Icon className=\"h-5 w-5 text-primary\" />\n                        <span className=\"text-foreground\">{item.label}</span>\n                      </Button>\n                    );\n                  })}\n                  \n                  {/* أزرار المدير والسائقين - تظهر دائمًا */}\n                  <div className=\"border-t border-border pt-4 mt-4\">\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start gap-3 h-12\"\n                      onClick={() => {\n                        window.location.href = '/admin-login';\n                        setSidebarOpen(false);\n                      }}\n                      data-testid=\"sidebar-admin\"\n                    >\n                      <Settings className=\"h-5 w-5 text-blue-500\" />\n                      <span className=\"text-foreground\">لوحة التحكم</span>\n                    </Button>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start gap-3 h-12\"\n                      onClick={() => {\n                        window.location.href = '/admin-login?type=driver';\n                        setSidebarOpen(false);\n                      }}\n                      data-testid=\"sidebar-delivery\"\n                    >\n                      <Truck className=\"h-5 w-5 text-green-500\" />\n                      <span className=\"text-foreground\">تطبيق السائقين</span>\n                    </Button>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n            <div \n              className=\"text-center cursor-pointer\"\n              onClick={() => {\n                const newCount = logoClickCount + 1;\n                setLogoClickCount(newCount);\n                \n                if (newCount === 4) {\n                  setShowAdminButtons(true);\n                  setLogoClickCount(0);\n                  // الانتقال إلى صفحة تسجيل الدخول\n                  window.location.href = '/admin-login';\n                } else if (newCount > 4) {\n                  setLogoClickCount(0);\n                }\n                \n                // Reset counter after 3 seconds if not completed\n                setTimeout(() => {\n                  setLogoClickCount(0);\n                }, 3000);\n              }}\n            >\n              <h1 className=\"text-lg font-bold text-primary\">السريع ون</h1>\n              <p className=\"text-xs text-muted-foreground\">توصيل سريع</p>\n              {logoClickCount > 0 && logoClickCount < 4 && (\n                <div className=\"flex justify-center mt-1\">\n                  {Array.from({ length: 4 }, (_, i) => (\n                    <div\n                      key={i}\n                      className={`w-2 h-2 rounded-full mx-1 ${\n                        i < logoClickCount ? 'bg-primary' : 'bg-gray-300'\n                      }`}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === 'dark' ? (\n                <Sun className=\"h-5 w-5\" />\n              ) : (\n                <Moon className=\"h-5 w-5\" />\n              )}\n            </Button>\n            \n            {/* أيقونة الملف الشخصي مع خاصية النقر المتعدد */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleProfileIconClick}\n              className=\"relative\"\n              title=\"النقر 5 مرات للوصول إلى صفحة تسجيل الدخول\"\n              data-testid=\"button-profile\"\n            >\n              <User className=\"h-5 w-5\" />\n              \n              {/* مؤشر بصري للنقرات */}\n              {profileClickCount > 0 && (\n                <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-primary rounded-full text-xs text-white flex items-center justify-center\">\n                  {profileClickCount}\n                </div>\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Search Bar - only show on home page */}\n        {isHomePage && (\n          <div className=\"relative\">\n            <input\n              type=\"text\"\n              placeholder=\"ابحث عن المطاعم والوجبات...\"\n              className=\"w-full bg-muted text-foreground placeholder-muted-foreground rounded-lg pr-12 pl-4 py-3 focus:outline-none focus:ring-2 focus:ring-primary\"\n              data-testid=\"input-search\"\n            />\n            <Search className=\"absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n          </div>\n        )}\n      </header>\n\n      {/* Main Content */}\n      <main className=\"pb-20\">\n        {children}\n      </main>\n\n      {/* Bottom Navigation - hide on admin and delivery pages */}\n      {!isAdminPage && !isDeliveryPage && (\n        <nav className=\"fixed bottom-0 left-0 right-0 max-w-md mx-auto bg-card border-t border-border px-4 py-2\">\n          <div className=\"flex justify-around items-center\">\n            {navigationItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.path;\n              \n              return (\n                <Button\n                  key={item.path}\n                  variant=\"ghost\"\n                  className={`flex flex-col items-center gap-1 py-2 px-3 ${\n                    isActive\n                      ? 'text-primary'\n                      : 'text-muted-foreground hover:text-foreground'\n                  }`}\n                  onClick={() => setLocation(item.path)}\n                  data-testid={item.testId}\n                >\n                  <Icon className=\"h-5 w-5\" />\n                  <span className=\"text-xs\">{item.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </nav>\n      )}\n\n      {/* Floating Cart Button - hide on admin and delivery pages */}\n      {getItemCount() > 0 && !isAdminPage && !isDeliveryPage && <CartButton />}\n    </div>\n  );\n}","size_bytes":12315},"client/src/components/LocationPermissionModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { MapPin, Navigation, Shield } from 'lucide-react';\n\ninterface LocationPermissionModalProps {\n  onPermissionGranted: (position: GeolocationPosition) => void;\n  onPermissionDenied: () => void;\n}\n\nexport function LocationPermissionModal({ onPermissionGranted, onPermissionDenied }: LocationPermissionModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [permissionStatus, setPermissionStatus] = useState<'unknown' | 'granted' | 'denied'>('unknown');\n\n  useEffect(() => {\n    checkPermissionStatus();\n  }, []);\n\n  const checkPermissionStatus = async () => {\n    if ('permissions' in navigator) {\n      try {\n        const permission = await navigator.permissions.query({ name: 'geolocation' as PermissionName });\n        if (permission.state === 'granted') {\n          setPermissionStatus('granted');\n          getCurrentLocation();\n        } else if (permission.state === 'denied') {\n          setPermissionStatus('denied');\n          setIsOpen(true);\n        } else {\n          setPermissionStatus('unknown');\n          setIsOpen(true);\n        }\n      } catch (error) {\n        console.error('Error checking permission:', error);\n        setIsOpen(true);\n      }\n    } else {\n      setIsOpen(true);\n    }\n  };\n\n  const getCurrentLocation = () => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setPermissionStatus('granted');\n          onPermissionGranted(position);\n          setIsOpen(false);\n        },\n        (error) => {\n          console.error('Error getting location:', error);\n          setPermissionStatus('denied');\n          onPermissionDenied();\n          setIsOpen(false);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 60000\n        }\n      );\n    }\n  };\n\n  const requestLocationPermission = () => {\n    getCurrentLocation();\n  };\n\n  const handleDenyPermission = () => {\n    setPermissionStatus('denied');\n    onPermissionDenied();\n    setIsOpen(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogContent className=\"sm:max-w-md\" dir=\"rtl\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-primary/10\">\n            <MapPin className=\"h-6 w-6 text-primary\" />\n          </div>\n          <DialogTitle className=\"text-xl font-bold\">\n            السماح بالوصول للموقع\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-muted-foreground\">\n            نحتاج إلى معرفة موقعك لتوصيل طلباتك بدقة وعرض المطاعم القريبة منك\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-3 p-3 rounded-lg bg-primary/5\">\n              <Navigation className=\"h-5 w-5 text-primary flex-shrink-0\" />\n              <div className=\"text-sm\">\n                <div className=\"font-medium\">تحديد موقعك بدقة</div>\n                <div className=\"text-muted-foreground\">لضمان وصول الطلبات في الوقت المحدد</div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3 p-3 rounded-lg bg-primary/5\">\n              <MapPin className=\"h-5 w-5 text-primary flex-shrink-0\" />\n              <div className=\"text-sm\">\n                <div className=\"font-medium\">عرض المطاعم القريبة</div>\n                <div className=\"text-muted-foreground\">اكتشف أفضل المطاعم في منطقتك</div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3 p-3 rounded-lg bg-primary/5\">\n              <Shield className=\"h-5 w-5 text-primary flex-shrink-0\" />\n              <div className=\"text-sm\">\n                <div className=\"font-medium\">حماية خصوصيتك</div>\n                <div className=\"text-muted-foreground\">لن نشارك موقعك مع أطراف خارجية</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button \n              variant=\"outline\" \n              onClick={handleDenyPermission}\n              className=\"flex-1\"\n            >\n              تخطي\n            </Button>\n            <Button \n              onClick={requestLocationPermission}\n              className=\"flex-1\"\n            >\n              السماح بالوصول\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4882},"client/src/components/MenuItemCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport type { MenuItem } from '@shared/schema';\nimport { useCart } from '../context/CartContext';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface MenuItemCardProps {\n  item: MenuItem;\n  disabled?: boolean;\n  disabledMessage?: string;\n}\n\nexport default function MenuItemCard({ item, disabled = false, disabledMessage }: MenuItemCardProps) {\n  const { addItem } = useCart();\n  const { toast } = useToast();\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    \n    if (disabled && disabledMessage) {\n      toast({\n        title: \"لا يمكن الطلب\",\n        description: disabledMessage,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    addItem(item);\n    toast({\n      title: \"تمت الإضافة للسلة\",\n      description: `تم إضافة ${item.name} للسلة`,\n    });\n  };\n\n  const isSpecialOffer = item.isSpecialOffer && item.originalPrice;\n  const savings = isSpecialOffer ? item.originalPrice! - item.price : 0;\n\n  return (\n    <Card \n      className={`p-4 flex gap-4 hover:shadow-md transition-shadow ${\n        isSpecialOffer ? 'bg-gradient-to-r from-green-50 to-emerald-50 border-2 border-green-200' : ''\n      }`}\n      data-testid={`menu-item-${item.id}`}\n    >\n      {isSpecialOffer && (\n        <Badge className=\"absolute top-2 left-2 bg-green-500 text-white\">\n          عرض خاص\n        </Badge>\n      )}\n      \n      <img\n        src={item.image}\n        alt={item.name}\n        className=\"w-20 h-20 object-cover rounded-lg flex-shrink-0\"\n      />\n      \n      <div className=\"flex-1\">\n        <h4 className=\"font-bold text-foreground mb-1\" data-testid={`menu-item-name-${item.id}`}>\n          {item.name}\n        </h4>\n        <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`menu-item-description-${item.id}`}>\n          {item.description}\n        </p>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <span className={`text-lg font-bold ${isSpecialOffer ? 'text-green-600' : 'text-primary'}`}>\n              {item.price} ريال\n            </span>\n            {isSpecialOffer && (\n              <>\n                <span className=\"text-sm text-muted-foreground line-through\">\n                  {item.originalPrice} ريال\n                </span>\n                <Badge variant=\"secondary\" className=\"text-xs bg-green-100 text-green-700\">\n                  توفير {savings} ريال\n                </Badge>\n              </>\n            )}\n          </div>\n          \n          <Button\n            onClick={handleAddToCart}\n            className={isSpecialOffer ? 'bg-green-500 hover:bg-green-600 text-white' : ''}\n            disabled={!item.isAvailable || disabled}\n            data-testid={`button-add-to-cart-${item.id}`}\n          >\n            {item.isAvailable ? 'إضافة' : 'غير متوفر'}\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3135},"client/src/components/RestaurantCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Star, Clock } from 'lucide-react';\nimport type { Restaurant } from '@shared/schema';\nimport { getRestaurantStatus } from '../utils/restaurantHours';\nimport { useUiSettings } from '@/context/UiSettingsContext';\n\ninterface RestaurantCardProps {\n  restaurant: Restaurant;\n  onClick: () => void;\n}\n\nexport default function RestaurantCard({ restaurant, onClick }: RestaurantCardProps) {\n  const status = getRestaurantStatus(restaurant);\n  const { isFeatureEnabled } = useUiSettings();\n  \n  return (\n    <Card \n      className={`overflow-hidden shadow-sm hover:shadow-md transition-shadow cursor-pointer ${!status.isOpen ? 'opacity-75' : ''}`}\n      onClick={onClick}\n      data-testid={`restaurant-card-${restaurant.id}`}\n    >\n      <img\n        src={restaurant.image}\n        alt={restaurant.name}\n        className=\"w-full h-48 object-cover\"\n      />\n      <CardContent className=\"p-4\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <h4 className=\"font-bold text-foreground\" data-testid={`restaurant-name-${restaurant.id}`}>\n            {restaurant.name}\n          </h4>\n          <Badge \n            variant={status.isOpen ? \"default\" : \"destructive\"}\n            className={status.statusColor === 'green' ? \"bg-green-100 text-green-800 hover:bg-green-100\" : \n                      status.statusColor === 'yellow' ? \"bg-yellow-100 text-yellow-800 hover:bg-yellow-100\" : \"\"}\n            data-testid={`restaurant-status-${restaurant.id}`}\n          >\n            {status.isOpen ? 'مفتوح' : 'مغلق'}\n          </Badge>\n        </div>\n        \n        {/* Restaurant description */}\n        {isFeatureEnabled('show_restaurant_description') && restaurant.description && (\n          <div className=\"mb-2\">\n            <p className=\"text-xs text-muted-foreground\">{restaurant.description}</p>\n          </div>\n        )}\n        \n        {/* Restaurant status message */}\n        <div className=\"mb-2\">\n          <p className={`text-xs ${status.statusColor === 'green' ? 'text-green-600' : \n                                    status.statusColor === 'yellow' ? 'text-yellow-600' : 'text-red-600'}`}>\n            {status.message}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-4 text-sm text-muted-foreground mb-3\">\n          {isFeatureEnabled('show_ratings') && (\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"h-4 w-4 text-yellow-500\" />\n              <span data-testid={`restaurant-rating-${restaurant.id}`}>{restaurant.rating}</span>\n              <span>({restaurant.reviewCount} تقييم)</span>\n            </div>\n          )}\n          {isFeatureEnabled('show_delivery_time') && (\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-4 w-4\" />\n              <span data-testid={`restaurant-delivery-time-${restaurant.id}`}>{restaurant.deliveryTime}</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex justify-between items-center\">\n          {isFeatureEnabled('show_minimum_order') && (\n            <span className=\"text-sm text-muted-foreground\">\n              الحد الأدنى: {restaurant.minimumOrder} ريال\n            </span>\n          )}\n          <span className=\"text-sm text-primary font-medium\">\n            رسوم التوصيل: {restaurant.deliveryFee} ريال\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3559},"client/src/context/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\ninterface AuthState {\n  isAuthenticated: boolean;\n  userType: 'admin' | 'driver' | null;\n  token: string | null;\n  adminId: string | null;\n}\n\ninterface AuthContextType extends AuthState {\n  login: (email: string, password: string) => Promise<{ success: boolean; message: string }>;\n  logout: () => void;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>({\n    isAuthenticated: false,\n    userType: null,\n    token: null,\n    adminId: null,\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const token = localStorage.getItem('admin_token');\n    if (token) {\n      verifyToken(token);\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const verifyToken = async (token: string) => {\n    try {\n      const response = await fetch('/api/admin/verify', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setAuthState({\n          isAuthenticated: true,\n          userType: data.userType,\n          token,\n          adminId: data.adminId,\n        });\n      } else {\n        localStorage.removeItem('admin_token');\n        setAuthState({\n          isAuthenticated: false,\n          userType: null,\n          token: null,\n          adminId: null,\n        });\n      }\n    } catch (error) {\n      console.error('Token verification failed:', error);\n      localStorage.removeItem('admin_token');\n      setAuthState({\n        isAuthenticated: false,\n        userType: null,\n        token: null,\n        adminId: null,\n      });\n    }\n    setLoading(false);\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await fetch('/api/admin/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        localStorage.setItem('admin_token', data.token);\n        setAuthState({\n          isAuthenticated: true,\n          userType: data.userType,\n          token: data.token,\n          adminId: data.driverId || 'admin-main',\n        });\n        return { success: true, message: data.message };\n      } else {\n        return { success: false, message: data.message || 'خطأ في تسجيل الدخول' };\n      }\n    } catch (error) {\n      return { success: false, message: 'خطأ في الاتصال بالخادم' };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      if (authState.token) {\n        await fetch('/api/admin/logout', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ token: authState.token }),\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n\n    localStorage.removeItem('admin_token');\n    setAuthState({\n      isAuthenticated: false,\n      userType: null,\n      token: null,\n      adminId: null,\n    });\n  };\n\n  return (\n    <AuthContext.Provider value={{ ...authState, login, logout, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":3653},"client/src/context/CartContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport type { MenuItem } from '@shared/schema';\n\nexport interface CartItem extends MenuItem {\n  quantity: number;\n}\n\ninterface CartContextType {\n  items: CartItem[];\n  addItem: (item: MenuItem) => void;\n  removeItem: (itemId: string) => void;\n  updateQuantity: (itemId: string, quantity: number) => void;\n  clearCart: () => void;\n  getItemCount: () => number;\n  getSubtotal: () => number;\n  getTotal: () => number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [items, setItems] = useState<CartItem[]>(() => {\n    const saved = localStorage.getItem('cart');\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(items));\n  }, [items]);\n\n  const addItem = (item: MenuItem) => {\n    setItems(prev => {\n      const existingItem = prev.find(cartItem => cartItem.id === item.id);\n      if (existingItem) {\n        return prev.map(cartItem =>\n          cartItem.id === item.id\n            ? { ...cartItem, quantity: cartItem.quantity + 1 }\n            : cartItem\n        );\n      } else {\n        return [...prev, { ...item, quantity: 1 }];\n      }\n    });\n  };\n\n  const removeItem = (itemId: string) => {\n    setItems(prev => prev.filter(item => item.id !== itemId));\n  };\n\n  const updateQuantity = (itemId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeItem(itemId);\n      return;\n    }\n    setItems(prev =>\n      prev.map(item =>\n        item.id === itemId ? { ...item, quantity } : item\n      )\n    );\n  };\n\n  const clearCart = () => {\n    setItems([]);\n  };\n\n  const getItemCount = () => {\n    return items.reduce((sum, item) => sum + item.quantity, 0);\n  };\n\n  const getSubtotal = () => {\n    return items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  };\n\n  const getTotal = () => {\n    const subtotal = getSubtotal();\n    const deliveryFee = subtotal > 0 ? 5 : 0; // 5 YER delivery fee\n    return subtotal + deliveryFee;\n  };\n\n  return (\n    <CartContext.Provider value={{\n      items,\n      addItem,\n      removeItem,\n      updateQuantity,\n      clearCart,\n      getItemCount,\n      getSubtotal,\n      getTotal,\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n","size_bytes":2568},"client/src/context/LocationContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface LocationState {\n  position: GeolocationPosition | null;\n  hasPermission: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface LocationContextType {\n  location: LocationState;\n  requestPermission: () => void;\n  getCurrentLocation: () => void;\n}\n\nconst LocationContext = createContext<LocationContextType | undefined>(undefined);\n\nexport function LocationProvider({ children }: { children: ReactNode }) {\n  const [location, setLocation] = useState<LocationState>({\n    position: null,\n    hasPermission: false,\n    isLoading: false,\n    error: null,\n  });\n\n  useEffect(() => {\n    checkPermissionStatus();\n  }, []);\n\n  const checkPermissionStatus = async () => {\n    if ('permissions' in navigator) {\n      try {\n        const permission = await navigator.permissions.query({ name: 'geolocation' as PermissionName });\n        if (permission.state === 'granted') {\n          setLocation(prev => ({ ...prev, hasPermission: true }));\n          getCurrentLocation();\n        }\n      } catch (error) {\n        console.error('Error checking permission:', error);\n      }\n    }\n  };\n\n  const requestPermission = () => {\n    getCurrentLocation();\n  };\n\n  const getCurrentLocation = () => {\n    if (!('geolocation' in navigator)) {\n      setLocation(prev => ({ \n        ...prev, \n        error: 'الموقع الجغرافي غير مدعوم في هذا المتصفح' \n      }));\n      return;\n    }\n\n    setLocation(prev => ({ ...prev, isLoading: true, error: null }));\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setLocation({\n          position,\n          hasPermission: true,\n          isLoading: false,\n          error: null,\n        });\n      },\n      (error) => {\n        let errorMessage = 'حدث خطأ في الحصول على الموقع';\n        \n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = 'تم رفض الإذن للوصول للموقع';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = 'الموقع غير متاح';\n            break;\n          case error.TIMEOUT:\n            errorMessage = 'انتهت مهلة الحصول على الموقع';\n            break;\n        }\n\n        setLocation(prev => ({\n          ...prev,\n          isLoading: false,\n          error: errorMessage,\n          hasPermission: false,\n        }));\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      }\n    );\n  };\n\n  return (\n    <LocationContext.Provider value={{ location, requestPermission, getCurrentLocation }}>\n      {children}\n    </LocationContext.Provider>\n  );\n}\n\nexport function useLocation() {\n  const context = useContext(LocationContext);\n  if (context === undefined) {\n    throw new Error('useLocation must be used within a LocationProvider');\n  }\n  return context;\n}","size_bytes":2972},"client/src/context/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const saved = localStorage.getItem('theme');\n    return (saved as Theme) || 'light';\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1145},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Admin.tsx":{"content":"import { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { ArrowRight, Store, ShoppingBag, Truck, ChartLine, Tags, Percent, BarChart } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport type { Restaurant, Order, Driver } from '@shared/schema';\n\nexport default function Admin() {\n  const [, setLocation] = useLocation();\n\n  const { data: restaurants } = useQuery<Restaurant[]>({\n    queryKey: ['/api/restaurants'],\n  });\n\n  const { data: orders } = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n  });\n\n  const { data: drivers } = useQuery<Driver[]>({\n    queryKey: ['/api/drivers'],\n  });\n\n  // Calculate stats\n  const todayOrders = orders?.filter(order => {\n    const today = new Date().toDateString();\n    const orderDate = new Date(order.createdAt || '').toDateString();\n    return today === orderDate;\n  }).length || 0;\n\n  const activeRestaurants = restaurants?.filter(r => r.isOpen).length || 0;\n  const availableDrivers = drivers?.filter(d => d.isAvailable && d.isActive).length || 0;\n  \n  const todayRevenue = orders?.filter(order => {\n    const today = new Date().toDateString();\n    const orderDate = new Date(order.createdAt || '').toDateString();\n    return today === orderDate;\n  }).reduce((sum, order) => sum + parseFloat(order.totalAmount || '0'), 0) || 0;\n\n  const adminMenuItems = [\n    {\n      icon: Store,\n      title: 'إدارة المتاجر',\n      description: 'إضافة، تعديل وحذف المطاعم',\n      color: 'text-primary',\n      testId: 'admin-restaurants',\n      path: '/admin/restaurants',\n    },\n    {\n      icon: Tags,\n      title: 'إدارة التصنيفات',\n      description: 'إدارة تصنيفات المطاعم',\n      color: 'text-green-500',\n      testId: 'admin-categories',\n      path: '/admin/categories',\n    },\n    {\n      icon: ShoppingBag,\n      title: 'إدارة الطلبات',\n      description: 'متابعة وإدارة الطلبات',\n      color: 'text-blue-500',\n      testId: 'admin-orders',\n      path: '/admin/orders',\n    },\n    {\n      icon: Truck,\n      title: 'إدارة السائقين',\n      description: 'إضافة وإدارة السائقين',\n      color: 'text-orange-500',\n      testId: 'admin-drivers',\n      path: '/admin/drivers',\n    },\n    {\n      icon: Percent,\n      title: 'إدارة العروض',\n      description: 'إنشاء وإدارة العروض الخاصة',\n      color: 'text-purple-500',\n      testId: 'admin-offers',\n      path: '/admin/offers',\n    },\n    {\n      icon: BarChart,\n      title: 'التقارير والإحصائيات',\n      description: 'عرض التقارير المالية والإحصائيات',\n      color: 'text-red-500',\n      testId: 'admin-reports',\n      path: '/admin/reports',\n    },\n  ];\n\n  return (\n    <div>\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/')}\n            data-testid=\"button-admin-back\"\n          >\n            <ArrowRight className=\"h-5 w-5\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-foreground\">لوحة التحكم</h2>\n        </div>\n      </header>\n\n      <section className=\"p-4 space-y-6\">\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card className=\"text-center\">\n            <CardContent className=\"p-4\">\n              <ShoppingBag className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <h3 className=\"text-lg font-bold text-foreground\" data-testid=\"stat-orders-today\">\n                {todayOrders}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">طلبات اليوم</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"p-4\">\n              <Store className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n              <h3 className=\"text-lg font-bold text-foreground\" data-testid=\"stat-active-restaurants\">\n                {activeRestaurants}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">متجر نشط</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"p-4\">\n              <Truck className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\n              <h3 className=\"text-lg font-bold text-foreground\" data-testid=\"stat-available-drivers\">\n                {availableDrivers}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">سائق متاح</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"p-4\">\n              <ChartLine className=\"h-8 w-8 text-purple-500 mx-auto mb-2\" />\n              <h3 className=\"text-lg font-bold text-foreground\" data-testid=\"stat-today-revenue\">\n                {todayRevenue.toFixed(2)}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">ريال الإيرادات</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Admin Menu */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-lg font-bold text-foreground\">الإدارة</h3>\n          \n          {adminMenuItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <Button\n                key={item.testId}\n                variant=\"ghost\"\n                className=\"w-full h-auto p-4 justify-between hover:bg-accent\"\n                onClick={() => setLocation(item.path)}\n                data-testid={item.testId}\n              >\n                <div className=\"flex items-center gap-3\">\n                  <Icon className={`h-6 w-6 ${item.color}`} />\n                  <div className=\"text-right\">\n                    <div className=\"font-medium text-foreground\">{item.title}</div>\n                    <div className=\"text-sm text-muted-foreground\">{item.description}</div>\n                  </div>\n                </div>\n                <ArrowRight className=\"h-5 w-5 text-muted-foreground rotate-180\" />\n              </Button>\n            );\n          })}\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":6403},"client/src/pages/AdminCategories.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Plus, Edit, Trash2, Tag, Save, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Category } from '@shared/schema';\n\nexport default function AdminCategories() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    icon: '',\n  });\n\n  const { data: categories, isLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await apiRequest('POST', '/api/categories', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      toast({\n        title: \"تم إنشاء القسم\",\n        description: \"تم إضافة القسم الجديد بنجاح\",\n      });\n      resetForm();\n      setIsDialogOpen(false);\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: typeof formData }) => {\n      const response = await apiRequest('PUT', `/api/categories/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      toast({\n        title: \"تم تحديث القسم\",\n        description: \"تم تحديث القسم بنجاح\",\n      });\n      resetForm();\n      setEditingCategory(null);\n      setIsDialogOpen(false);\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/categories/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      toast({\n        title: \"تم حذف القسم\",\n        description: \"تم حذف القسم بنجاح\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      icon: '',\n    });\n    setEditingCategory(null);\n  };\n\n  const handleEdit = (category: Category) => {\n    setEditingCategory(category);\n    setFormData({\n      name: category.name,\n      icon: category.icon || '',\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: \"خطأ\",\n        description: \"يرجى إدخال اسم القسم\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, data: formData });\n    } else {\n      createCategoryMutation.mutate(formData);\n    }\n  };\n\n  const iconOptions = [\n    { value: 'fas fa-utensils', label: '🍽️ مطاعم' },\n    { value: 'fas fa-pizza-slice', label: '🍕 بيتزا' },\n    { value: 'fas fa-hamburger', label: '🍔 برجر' },\n    { value: 'fas fa-ice-cream', label: '🍦 حلويات' },\n    { value: 'fas fa-coffee', label: '☕ مقاهي' },\n    { value: 'fas fa-fish', label: '🐟 مأكولات بحرية' },\n    { value: 'fas fa-drumstick-bite', label: '🍗 دجاج' },\n    { value: 'fas fa-bread-slice', label: '🍞 مخبوزات' },\n    { value: 'fas fa-cheese', label: '🧀 ألبان' },\n    { value: 'fas fa-apple-alt', label: '🍎 صحي' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <Tag className=\"h-8 w-8 text-primary\" />\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">إدارة الأقسام</h1>\n            <p className=\"text-muted-foreground\">إدارة أقسام المطاعم والمتاجر</p>\n          </div>\n        </div>\n        \n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"gap-2\"\n              onClick={() => {\n                resetForm();\n                setIsDialogOpen(true);\n              }}\n              data-testid=\"button-add-category\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              إضافة قسم جديد\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingCategory ? 'تعديل القسم' : 'إضافة قسم جديد'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">اسم القسم</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"أدخل اسم القسم\"\n                  required\n                  data-testid=\"input-category-name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"icon\">الأيقونة</Label>\n                <select\n                  id=\"icon\"\n                  className=\"w-full p-2 border border-border rounded-md bg-background\"\n                  value={formData.icon}\n                  onChange={(e) => setFormData(prev => ({ ...prev, icon: e.target.value }))}\n                  data-testid=\"select-category-icon\"\n                >\n                  <option value=\"\">اختر أيقونة</option>\n                  {iconOptions.map((option) => (\n                    <option key={option.value} value={option.value}>\n                      {option.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1 gap-2\"\n                  disabled={createCategoryMutation.isPending || updateCategoryMutation.isPending}\n                  data-testid=\"button-save-category\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  {editingCategory ? 'تحديث' : 'إضافة'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    resetForm();\n                    setIsDialogOpen(false);\n                  }}\n                  data-testid=\"button-cancel-category\"\n                >\n                  <X className=\"h-4 w-4\" />\n                  إلغاء\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Categories Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {isLoading ? (\n          [...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-muted rounded-lg mb-4\" />\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\" />\n                <div className=\"h-3 bg-muted rounded w-1/2\" />\n              </CardContent>\n            </Card>\n          ))\n        ) : categories?.length ? (\n          categories.map((category) => (\n            <Card key={category.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    {category.icon ? (\n                      <i className={`${category.icon} text-primary text-xl`} />\n                    ) : (\n                      <Tag className=\"h-6 w-6 text-primary\" />\n                    )}\n                  </div>\n                  <CardTitle className=\"text-lg\">{category.name}</CardTitle>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"pt-0\">\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1 gap-2\"\n                    onClick={() => handleEdit(category)}\n                    data-testid={`button-edit-category-${category.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                    تعديل\n                  </Button>\n                  \n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-destructive hover:text-destructive\"\n                        data-testid={`button-delete-category-${category.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          هل أنت متأكد من حذف قسم \"{category.name}\"؟ \n                          سيتم حذف جميع المطاعم المرتبطة بهذا القسم أيضاً.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>إلغاء</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteCategoryMutation.mutate(category.id)}\n                          className=\"bg-destructive hover:bg-destructive/90\"\n                        >\n                          حذف\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Tag className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">لا توجد أقسام</h3>\n            <p className=\"text-muted-foreground mb-4\">ابدأ بإضافة أقسام المطاعم والمتاجر</p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-first-category\">\n              إضافة القسم الأول\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11714},"client/src/pages/AdminDashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Badge } from '../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { \n  BarChart3, \n  Users, \n  ShoppingBag, \n  DollarSign, \n  Settings, \n  LogOut,\n  Package,\n  Truck,\n  Store,\n  Eye,\n  Edit,\n  Trash2\n} from 'lucide-react';\n\ninterface AdminDashboardProps {\n  onLogout: () => void;\n}\n\nexport const AdminDashboard: React.FC<AdminDashboardProps> = ({ onLogout }) => {\n  const { logout } = useAuth();\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const handleLogout = () => {\n    logout();\n    onLogout();\n  };\n\n  const stats = [\n    { title: 'إجمالي الطلبات', value: '2,345', icon: ShoppingBag, color: 'text-blue-600' },\n    { title: 'العملاء النشطين', value: '1,234', icon: Users, color: 'text-green-600' },\n    { title: 'إجمالي المبيعات', value: '₪45,678', icon: DollarSign, color: 'text-orange-600' },\n    { title: 'السائقين المتاحين', value: '23', icon: Truck, color: 'text-purple-600' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\" dir=\"rtl\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center gap-3\">\n              <Settings className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">لوحة التحكم</h1>\n                <p className=\"text-sm text-gray-500\">إدارة نظام التوصيل</p>\n              </div>\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={handleLogout}\n              className=\"flex items-center gap-2\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n              تسجيل الخروج\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {stats.map((stat, index) => {\n            const Icon = stat.icon;\n            return (\n              <Card key={index}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">{stat.title}</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">{stat.value}</p>\n                    </div>\n                    <Icon className={`h-8 w-8 ${stat.color}`} />\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Tabs Navigation */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">نظرة عامة</TabsTrigger>\n            <TabsTrigger value=\"orders\">الطلبات</TabsTrigger>\n            <TabsTrigger value=\"restaurants\">المطاعم</TabsTrigger>\n            <TabsTrigger value=\"drivers\">السائقين</TabsTrigger>\n            <TabsTrigger value=\"categories\">الفئات</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    الطلبات الحديثة\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((order) => (\n                      <div key={order} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">طلب #{1000 + order}</p>\n                          <p className=\"text-sm text-gray-600\">مطعم الوزيكو للعربكة</p>\n                        </div>\n                        <Badge variant=\"secondary\">قيد التحضير</Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    السائقين النشطين\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {['أحمد محمد', 'علي حسن', 'سارة أحمد'].map((driver, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">{driver}</p>\n                          <p className=\"text-sm text-gray-600\">متاح للتوصيل</p>\n                        </div>\n                        <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                          نشط\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>إدارة الطلبات</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[1, 2, 3, 4, 5].map((order) => (\n                    <div key={order} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-4\">\n                          <div>\n                            <p className=\"font-medium\">طلب #{1000 + order}</p>\n                            <p className=\"text-sm text-gray-600\">محمد أحمد - 05{order}1234567</p>\n                          </div>\n                          <Badge variant={order % 2 === 0 ? \"default\" : \"secondary\"}>\n                            {order % 2 === 0 ? \"مؤكد\" : \"قيد المراجعة\"}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-500 mt-2\">₪{50 + order * 10} - منذ {order} ساعات</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"restaurants\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>إدارة المطاعم</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {['مطعم الوزيكو للعربكة', 'حلويات الشام', 'مقهى العروبة'].map((restaurant, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <Store className=\"h-8 w-8 text-gray-400\" />\n                        <div>\n                          <p className=\"font-medium\">{restaurant}</p>\n                          <p className=\"text-sm text-gray-600\">{15 + index} عنصر في القائمة</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                          مفتوح\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"drivers\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>إدارة السائقين</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {['أحمد محمد', 'علي حسن', 'سارة أحمد', 'محمد علي'].map((driver, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <Truck className=\"h-8 w-8 text-gray-400\" />\n                        <div>\n                          <p className=\"font-medium\">{driver}</p>\n                          <p className=\"text-sm text-gray-600\">05{index + 1}1234567</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={index % 2 === 0 ? \"default\" : \"secondary\"} \n                               className={index % 2 === 0 ? \"bg-green-100 text-green-800\" : \"\"}>\n                          {index % 2 === 0 ? \"متاح\" : \"مشغول\"}\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"categories\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>إدارة الفئات</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {['مطاعم', 'مقاهي', 'حلويات', 'سوبرماركت', 'صيدليات'].map((category, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <Package className=\"h-8 w-8 text-gray-400\" />\n                        <div>\n                          <p className=\"font-medium\">{category}</p>\n                          <p className=\"text-sm text-gray-600\">{5 + index * 2} مطعم</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"default\" className=\"bg-blue-100 text-blue-800\">\n                          نشط\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n};","size_bytes":12249},"client/src/pages/AdminDrivers.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Plus, Edit, Trash2, Truck, Save, X, Phone, MapPin, DollarSign, User } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Driver } from '@shared/schema';\n\nexport default function AdminDrivers() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingDriver, setEditingDriver] = useState<Driver | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    phone: '',\n    password: '',\n    currentLocation: '',\n    isAvailable: true,\n    isActive: true,\n  });\n\n  const { data: drivers, isLoading } = useQuery<Driver[]>({\n    queryKey: ['/api/drivers'],\n  });\n\n  const createDriverMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await apiRequest('POST', '/api/drivers', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/drivers'] });\n      toast({\n        title: \"تم إضافة السائق\",\n        description: \"تم إضافة السائق الجديد بنجاح\",\n      });\n      resetForm();\n      setIsDialogOpen(false);\n    },\n  });\n\n  const updateDriverMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<typeof formData> }) => {\n      const response = await apiRequest('PUT', `/api/drivers/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/drivers'] });\n      toast({\n        title: \"تم تحديث السائق\",\n        description: \"تم تحديث بيانات السائق بنجاح\",\n      });\n      resetForm();\n      setEditingDriver(null);\n      setIsDialogOpen(false);\n    },\n  });\n\n  const deleteDriverMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/drivers/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/drivers'] });\n      toast({\n        title: \"تم حذف السائق\",\n        description: \"تم حذف السائق بنجاح\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      phone: '',\n      password: '',\n      currentLocation: '',\n      isAvailable: true,\n      isActive: true,\n    });\n    setEditingDriver(null);\n  };\n\n  const handleEdit = (driver: Driver) => {\n    setEditingDriver(driver);\n    setFormData({\n      name: driver.name,\n      phone: driver.phone,\n      password: '', // Don't show password\n      currentLocation: driver.currentLocation || '',\n      isAvailable: driver.isAvailable,\n      isActive: driver.isActive,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim() || !formData.phone.trim()) {\n      toast({\n        title: \"خطأ\",\n        description: \"يرجى إدخال الاسم ورقم الهاتف\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!editingDriver && !formData.password.trim()) {\n      toast({\n        title: \"خطأ\",\n        description: \"يرجى إدخال كلمة المرور للسائق الجديد\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submitData = editingDriver && !formData.password.trim() \n      ? { ...formData, password: undefined } \n      : formData;\n\n    if (editingDriver) {\n      updateDriverMutation.mutate({ id: editingDriver.id, data: submitData });\n    } else {\n      createDriverMutation.mutate(formData);\n    }\n  };\n\n  const toggleDriverStatus = (driver: Driver, field: 'isAvailable' | 'isActive') => {\n    updateDriverMutation.mutate({\n      id: driver.id,\n      data: { [field]: !driver[field] }\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <Truck className=\"h-8 w-8 text-primary\" />\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">إدارة السائقين</h1>\n            <p className=\"text-muted-foreground\">إدارة سائقي التوصيل</p>\n          </div>\n        </div>\n        \n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"gap-2\"\n              onClick={() => {\n                resetForm();\n                setIsDialogOpen(true);\n              }}\n              data-testid=\"button-add-driver\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              إضافة سائق جديد\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingDriver ? 'تعديل بيانات السائق' : 'إضافة سائق جديد'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">الاسم الكامل</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"أدخل اسم السائق\"\n                  required\n                  data-testid=\"input-driver-name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"phone\">رقم الهاتف</Label>\n                <Input\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                  placeholder=\"+967-771234567\"\n                  required\n                  data-testid=\"input-driver-phone\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">\n                  كلمة المرور {editingDriver && \"(اتركها فارغة للاحتفاظ بالحالية)\"}\n                </Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                  placeholder=\"كلمة المرور\"\n                  required={!editingDriver}\n                  data-testid=\"input-driver-password\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"location\">الموقع الحالي</Label>\n                <Input\n                  id=\"location\"\n                  value={formData.currentLocation}\n                  onChange={(e) => setFormData(prev => ({ ...prev, currentLocation: e.target.value }))}\n                  placeholder=\"الموقع الحالي للسائق\"\n                  data-testid=\"input-driver-location\"\n                />\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"available\">متاح للعمل</Label>\n                  <Switch\n                    id=\"available\"\n                    checked={formData.isAvailable}\n                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isAvailable: checked }))}\n                    data-testid=\"switch-driver-available\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"active\">نشط</Label>\n                  <Switch\n                    id=\"active\"\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n                    data-testid=\"switch-driver-active\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1 gap-2\"\n                  disabled={createDriverMutation.isPending || updateDriverMutation.isPending}\n                  data-testid=\"button-save-driver\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  {editingDriver ? 'تحديث' : 'إضافة'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    resetForm();\n                    setIsDialogOpen(false);\n                  }}\n                  data-testid=\"button-cancel-driver\"\n                >\n                  <X className=\"h-4 w-4\" />\n                  إلغاء\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Drivers Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {isLoading ? (\n          [...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-16 h-16 bg-muted rounded-full mb-4 mx-auto\" />\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2 mx-auto\" />\n                <div className=\"h-3 bg-muted rounded w-1/2 mx-auto\" />\n              </CardContent>\n            </Card>\n          ))\n        ) : drivers?.length ? (\n          drivers.map((driver) => (\n            <Card key={driver.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"text-center pb-3\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <User className=\"h-8 w-8 text-primary\" />\n                </div>\n                <CardTitle className=\"text-lg\">{driver.name}</CardTitle>\n                <div className=\"flex items-center justify-center gap-2 mt-2\">\n                  <Badge variant={driver.isActive ? \"default\" : \"secondary\"}>\n                    {driver.isActive ? 'نشط' : 'غير نشط'}\n                  </Badge>\n                  <Badge variant={driver.isAvailable ? \"default\" : \"outline\"}>\n                    {driver.isAvailable ? 'متاح' : 'غير متاح'}\n                  </Badge>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-foreground\">{driver.phone}</span>\n                  </div>\n                  \n                  {driver.currentLocation && (\n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-sm text-foreground\">{driver.currentLocation}</span>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-foreground\">الأرباح: {driver.earnings || 0} ريال</span>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div className=\"text-center\">\n                    <p className=\"text-xs text-muted-foreground\">متاح للعمل</p>\n                    <Switch\n                      checked={driver.isAvailable}\n                      onCheckedChange={() => toggleDriverStatus(driver, 'isAvailable')}\n                      data-testid={`switch-driver-available-${driver.id}`}\n                    />\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-xs text-muted-foreground\">نشط</p>\n                    <Switch\n                      checked={driver.isActive}\n                      onCheckedChange={() => toggleDriverStatus(driver, 'isActive')}\n                      data-testid={`switch-driver-active-${driver.id}`}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2 pt-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1 gap-2\"\n                    onClick={() => handleEdit(driver)}\n                    data-testid={`button-edit-driver-${driver.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                    تعديل\n                  </Button>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.open(`tel:${driver.phone}`)}\n                    data-testid={`button-call-driver-${driver.id}`}\n                  >\n                    <Phone className=\"h-4 w-4\" />\n                  </Button>\n                  \n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-destructive hover:text-destructive\"\n                        data-testid={`button-delete-driver-${driver.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          هل أنت متأكد من حذف السائق \"{driver.name}\"؟ \n                          لن يتمكن من الوصول للتطبيق بعد الحذف.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>إلغاء</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteDriverMutation.mutate(driver.id)}\n                          className=\"bg-destructive hover:bg-destructive/90\"\n                        >\n                          حذف\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Truck className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">لا توجد سائقين</h3>\n            <p className=\"text-muted-foreground mb-4\">ابدأ بإضافة سائقين لخدمة التوصيل</p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-first-driver\">\n              إضافة السائق الأول\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":16327},"client/src/pages/AdminOrders.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Package, Clock, CheckCircle, XCircle, Truck, Phone, MapPin, Filter } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Order } from '@shared/schema';\n\nexport default function AdminOrders() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: ['/api/orders', statusFilter !== 'all' ? { status: statusFilter } : {}],\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest('PUT', `/api/orders/${id}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      toast({\n        title: \"تم تحديث حالة الطلب\",\n        description: \"تم تحديث حالة الطلب بنجاح\",\n      });\n    },\n  });\n\n  const getOrderItems = (itemsString: string) => {\n    try {\n      return JSON.parse(itemsString);\n    } catch {\n      return [];\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { label: 'في الانتظار', color: 'bg-yellow-500' },\n      confirmed: { label: 'مؤكد', color: 'bg-blue-500' },\n      preparing: { label: 'قيد التحضير', color: 'bg-orange-500' },\n      on_way: { label: 'في الطريق', color: 'bg-purple-500' },\n      delivered: { label: 'تم التوصيل', color: 'bg-green-500' },\n      cancelled: { label: 'ملغي', color: 'bg-red-500' },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    return <Badge className={`${config.color} hover:${config.color}`}>{config.label}</Badge>;\n  };\n\n  const getNextStatus = (currentStatus: string) => {\n    const statusFlow = {\n      pending: 'confirmed',\n      confirmed: 'preparing',\n      preparing: 'on_way',\n      on_way: 'delivered',\n    };\n    return statusFlow[currentStatus as keyof typeof statusFlow];\n  };\n\n  const getNextStatusLabel = (currentStatus: string) => {\n    const labels = {\n      pending: 'تأكيد الطلب',\n      confirmed: 'بدء التحضير',\n      preparing: 'تجهيز للتوصيل',\n      on_way: 'تم التوصيل',\n    };\n    return labels[currentStatus as keyof typeof labels];\n  };\n\n  const filteredOrders = orders?.filter(order => {\n    if (statusFilter === 'all') return true;\n    return order.status === statusFilter;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <Package className=\"h-8 w-8 text-primary\" />\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">إدارة الطلبات</h1>\n            <p className=\"text-muted-foreground\">متابعة وإدارة جميع الطلبات</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Filter className=\"h-4 w-4 text-muted-foreground\" />\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-order-status-filter\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">جميع الطلبات</SelectItem>\n              <SelectItem value=\"pending\">في الانتظار</SelectItem>\n              <SelectItem value=\"confirmed\">مؤكدة</SelectItem>\n              <SelectItem value=\"preparing\">قيد التحضير</SelectItem>\n              <SelectItem value=\"on_way\">في الطريق</SelectItem>\n              <SelectItem value=\"delivered\">تم التوصيل</SelectItem>\n              <SelectItem value=\"cancelled\">ملغية</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Orders Grid */}\n      <div className=\"space-y-4\">\n        {isLoading ? (\n          [...Array(5)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"h-6 bg-muted rounded w-32\" />\n                  <div className=\"h-6 bg-muted rounded w-20\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-muted rounded w-3/4\" />\n                  <div className=\"h-4 bg-muted rounded w-1/2\" />\n                  <div className=\"h-4 bg-muted rounded w-2/3\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredOrders?.length ? (\n          filteredOrders.map((order) => {\n            const items = getOrderItems(order.items);\n            const nextStatus = getNextStatus(order.status || 'pending');\n            const nextStatusLabel = getNextStatusLabel(order.status || 'pending');\n            \n            return (\n              <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <Package className=\"h-6 w-6 text-primary\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">طلب #{order.id}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(order.createdAt).toLocaleDateString('ar-YE', {\n                            year: 'numeric',\n                            month: 'long',\n                            day: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </p>\n                      </div>\n                    </div>\n                    {getStatusBadge(order.status || 'pending')}\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\">\n                  {/* Customer Info */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-muted/50 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-2\">معلومات العميل</h4>\n                      <p className=\"text-sm text-foreground\">{order.customerName}</p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground\">{order.customerPhone}</span>\n                      </div>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-2\">عنوان التوصيل</h4>\n                      <div className=\"flex items-start gap-2\">\n                        <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                        <span className=\"text-sm text-muted-foreground\">{order.deliveryAddress}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Order Items */}\n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-2\">تفاصيل الطلب</h4>\n                    <div className=\"space-y-2\">\n                      {items.map((item: any, index: number) => (\n                        <div key={index} className=\"flex justify-between items-center text-sm\">\n                          <span className=\"text-foreground\">{item.name} × {item.quantity}</span>\n                          <span className=\"text-muted-foreground\">{item.price * item.quantity} ريال</span>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <div className=\"border-t border-border mt-2 pt-2\">\n                      <div className=\"flex justify-between items-center text-sm\">\n                        <span className=\"text-muted-foreground\">المجموع الفرعي:</span>\n                        <span className=\"text-foreground\">{order.subtotal} ريال</span>\n                      </div>\n                      <div className=\"flex justify-between items-center text-sm\">\n                        <span className=\"text-muted-foreground\">رسوم التوصيل:</span>\n                        <span className=\"text-foreground\">{order.deliveryFee} ريال</span>\n                      </div>\n                      <div className=\"flex justify-between items-center font-semibold\">\n                        <span className=\"text-foreground\">المجموع:</span>\n                        <span className=\"text-primary\">{order.totalAmount} ريال</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Payment & Notes */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-1\">طريقة الدفع</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {order.paymentMethod === 'cash' ? 'دفع نقدي' : 'مدفوع مسبقاً'}\n                      </p>\n                    </div>\n                    {order.notes && (\n                      <div>\n                        <h4 className=\"font-semibold text-foreground mb-1\">ملاحظات</h4>\n                        <p className=\"text-sm text-muted-foreground\">{order.notes}</p>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex gap-2 pt-4 border-t border-border\">\n                    {nextStatus && order.status !== 'delivered' && order.status !== 'cancelled' && (\n                      <Button\n                        onClick={() => updateOrderStatusMutation.mutate({ \n                          id: order.id, \n                          status: nextStatus \n                        })}\n                        disabled={updateOrderStatusMutation.isPending}\n                        className=\"gap-2\"\n                        data-testid={`button-update-order-${order.id}`}\n                      >\n                        <CheckCircle className=\"h-4 w-4\" />\n                        {nextStatusLabel}\n                      </Button>\n                    )}\n                    \n                    {order.status === 'pending' && (\n                      <Button\n                        variant=\"destructive\"\n                        onClick={() => updateOrderStatusMutation.mutate({ \n                          id: order.id, \n                          status: 'cancelled' \n                        })}\n                        disabled={updateOrderStatusMutation.isPending}\n                        className=\"gap-2\"\n                        data-testid={`button-cancel-order-${order.id}`}\n                      >\n                        <XCircle className=\"h-4 w-4\" />\n                        إلغاء الطلب\n                      </Button>\n                    )}\n                    \n                    <Button\n                      variant=\"outline\"\n                      onClick={() => window.open(`tel:${order.customerPhone}`)}\n                      className=\"gap-2\"\n                      data-testid={`button-call-customer-${order.id}`}\n                    >\n                      <Phone className=\"h-4 w-4\" />\n                      اتصال بالعميل\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })\n        ) : (\n          <div className=\"text-center py-12\">\n            <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n              {statusFilter === 'all' ? 'لا توجد طلبات' : `لا توجد طلبات ${statusFilter === 'pending' ? 'في الانتظار' : statusFilter === 'confirmed' ? 'مؤكدة' : statusFilter === 'preparing' ? 'قيد التحضير' : statusFilter === 'on_way' ? 'في الطريق' : statusFilter === 'delivered' ? 'مكتملة' : 'ملغية'}`}\n            </h3>\n            <p className=\"text-muted-foreground\">\n              {statusFilter === 'all' \n                ? 'ستظهر الطلبات هنا عند ورودها من العملاء'\n                : 'لا توجد طلبات بهذه الحالة حالياً'\n              }\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13429},"client/src/pages/AdminRestaurants.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Plus, Edit, Trash2, Store, Save, X, Clock, Star, MapPin } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Restaurant, Category } from '@shared/schema';\n\nexport default function AdminRestaurants() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingRestaurant, setEditingRestaurant] = useState<Restaurant | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    image: '',\n    deliveryTime: '',\n    deliveryFee: '0',\n    minimumOrder: '0',\n    isOpen: true,\n    categoryId: '',\n  });\n\n  const { data: restaurants, isLoading: restaurantsLoading } = useQuery<Restaurant[]>({\n    queryKey: ['/api/restaurants'],\n  });\n\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const createRestaurantMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await apiRequest('POST', '/api/restaurants', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/restaurants'] });\n      toast({\n        title: \"تم إضافة المطعم\",\n        description: \"تم إضافة المطعم الجديد بنجاح\",\n      });\n      resetForm();\n      setIsDialogOpen(false);\n    },\n  });\n\n  const updateRestaurantMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<typeof formData> }) => {\n      const response = await apiRequest('PUT', `/api/restaurants/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/restaurants'] });\n      toast({\n        title: \"تم تحديث المطعم\",\n        description: \"تم تحديث بيانات المطعم بنجاح\",\n      });\n      resetForm();\n      setEditingRestaurant(null);\n      setIsDialogOpen(false);\n    },\n  });\n\n  const deleteRestaurantMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/restaurants/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/restaurants'] });\n      toast({\n        title: \"تم حذف المطعم\",\n        description: \"تم حذف المطعم بنجاح\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      image: '',\n      deliveryTime: '',\n      deliveryFee: '0',\n      minimumOrder: '0',\n      isOpen: true,\n      categoryId: '',\n    });\n    setEditingRestaurant(null);\n  };\n\n  const handleEdit = (restaurant: Restaurant) => {\n    setEditingRestaurant(restaurant);\n    setFormData({\n      name: restaurant.name,\n      description: restaurant.description || '',\n      image: restaurant.image,\n      deliveryTime: restaurant.deliveryTime,\n      deliveryFee: restaurant.deliveryFee || '0',\n      minimumOrder: restaurant.minimumOrder || '0',\n      isOpen: restaurant.isOpen,\n      categoryId: restaurant.categoryId || '',\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: \"خطأ\",\n        description: \"يرجى إدخال اسم المطعم\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingRestaurant) {\n      updateRestaurantMutation.mutate({ id: editingRestaurant.id, data: formData });\n    } else {\n      createRestaurantMutation.mutate(formData);\n    }\n  };\n\n  const toggleRestaurantStatus = (restaurant: Restaurant, field: 'isOpen') => {\n    updateRestaurantMutation.mutate({\n      id: restaurant.id,\n      data: { [field]: !restaurant[field] }\n    });\n  };\n\n  const getCategoryName = (categoryId: string) => {\n    const category = categories?.find(c => c.id === categoryId);\n    return category?.name || 'غير محدد';\n  };\n\n  // دالة لتحويل القيم الرقمية من string إلى number للعرض\n  const parseDecimal = (value: string | null): number => {\n    if (!value) return 0;\n    const num = parseFloat(value);\n    return isNaN(num) ? 0 : num;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <Store className=\"h-8 w-8 text-primary\" />\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">إدارة المطاعم</h1>\n            <p className=\"text-muted-foreground\">إدارة المطاعم والمتاجر</p>\n          </div>\n        </div>\n        \n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"gap-2\"\n              onClick={() => {\n                resetForm();\n                setIsDialogOpen(true);\n              }}\n              data-testid=\"button-add-restaurant\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              إضافة مطعم جديد\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingRestaurant ? 'تعديل بيانات المطعم' : 'إضافة مطعم جديد'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">اسم المطعم</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"أدخل اسم المطعم\"\n                    required\n                    data-testid=\"input-restaurant-name\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"category\">القسم</Label>\n                  <Select value={formData.categoryId} onValueChange={(value) => setFormData(prev => ({ ...prev, categoryId: value }))}>\n                    <SelectTrigger data-testid=\"select-restaurant-category\">\n                      <SelectValue placeholder=\"اختر قسم المطعم\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories?.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">الوصف</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"وصف المطعم\"\n                  rows={3}\n                  data-testid=\"input-restaurant-description\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"image\">رابط الصورة</Label>\n                <Input\n                  id=\"image\"\n                  value={formData.image}\n                  onChange={(e) => setFormData(prev => ({ ...prev, image: e.target.value }))}\n                  placeholder=\"https://example.com/image.jpg\"\n                  required\n                  data-testid=\"input-restaurant-image\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"deliveryTime\">وقت التوصيل</Label>\n                  <Input\n                    id=\"deliveryTime\"\n                    value={formData.deliveryTime}\n                    onChange={(e) => setFormData(prev => ({ ...prev, deliveryTime: e.target.value }))}\n                    placeholder=\"30-45 دقيقة\"\n                    required\n                    data-testid=\"input-restaurant-delivery-time\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"deliveryFee\">رسوم التوصيل (ريال)</Label>\n                  <Input\n                    id=\"deliveryFee\"\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    value={formData.deliveryFee}\n                    onChange={(e) => setFormData(prev => ({ ...prev, deliveryFee: e.target.value }))}\n                    data-testid=\"input-restaurant-delivery-fee\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"minimumOrder\">الحد الأدنى للطلب (ريال)</Label>\n                  <Input\n                    id=\"minimumOrder\"\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    value={formData.minimumOrder}\n                    onChange={(e) => setFormData(prev => ({ ...prev, minimumOrder: e.target.value }))}\n                    data-testid=\"input-restaurant-minimum-order\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"isOpen\">مفتوح للطلبات</Label>\n                <Switch\n                  id=\"isOpen\"\n                  checked={formData.isOpen}\n                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isOpen: checked }))}\n                  data-testid=\"switch-restaurant-open\"\n                />\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1 gap-2\"\n                  disabled={createRestaurantMutation.isPending || updateRestaurantMutation.isPending}\n                  data-testid=\"button-save-restaurant\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  {editingRestaurant ? 'تحديث' : 'إضافة'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    resetForm();\n                    setIsDialogOpen(false);\n                  }}\n                  data-testid=\"button-cancel-restaurant\"\n                >\n                  <X className=\"h-4 w-4\" />\n                  إلغاء\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Restaurants Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {restaurantsLoading ? (\n          [...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"w-full h-48 bg-muted\" />\n              <CardContent className=\"p-4\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\" />\n                <div className=\"h-3 bg-muted rounded w-1/2\" />\n              </CardContent>\n            </Card>\n          ))\n        ) : restaurants?.length ? (\n          restaurants.map((restaurant) => (\n            <Card key={restaurant.id} className=\"hover:shadow-md transition-shadow overflow-hidden\">\n              <div className=\"w-full h-48 bg-gradient-to-br from-primary/20 to-primary/5 flex items-center justify-center\">\n                {restaurant.image ? (\n                  <img \n                    src={restaurant.image} \n                    alt={restaurant.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <Store className=\"h-16 w-16 text-primary/50\" />\n                )}\n              </div>\n              \n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg mb-2\">{restaurant.name}</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {getCategoryName(restaurant.categoryId || '')}\n                    </p>\n                    {restaurant.description && (\n                      <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                        {restaurant.description}\n                      </p>\n                    )}\n                  </div>\n                  <Badge variant={restaurant.isOpen ? \"default\" : \"outline\"}>\n                    {restaurant.isOpen ? 'مفتوح' : 'مغلق'}\n                  </Badge>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{restaurant.deliveryTime}</span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    توصيل: {parseDecimal(restaurant.deliveryFee)} ريال\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    أقل طلب: {parseDecimal(restaurant.minimumOrder)} ريال\n                  </div>\n                  {restaurant.rating && (\n                    <div className=\"flex items-center gap-1\">\n                      <Star className=\"h-4 w-4 text-yellow-500\" />\n                      <span>{restaurant.rating}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"text-center\">\n                  <p className=\"text-xs text-muted-foreground\">مفتوح</p>\n                  <Switch\n                    checked={restaurant.isOpen}\n                    onCheckedChange={() => toggleRestaurantStatus(restaurant, 'isOpen')}\n                    data-testid={`switch-restaurant-open-${restaurant.id}`}\n                  />\n                </div>\n\n                <div className=\"flex gap-2 pt-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1 gap-2\"\n                    onClick={() => handleEdit(restaurant)}\n                    data-testid={`button-edit-restaurant-${restaurant.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                    تعديل\n                  </Button>\n                  \n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-destructive hover:text-destructive\"\n                        data-testid={`button-delete-restaurant-${restaurant.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          هل أنت متأكد من حذف مطعم \"{restaurant.name}\"؟ \n                          سيتم حذف جميع منتجات المطعم أيضاً.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>إلغاء</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteRestaurantMutation.mutate(restaurant.id)}\n                          className=\"bg-destructive hover:bg-destructive/90\"\n                        >\n                          حذف\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Store className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">لا توجد مطاعم</h3>\n            <p className=\"text-muted-foreground mb-4\">ابدأ بإضافة المطاعم والمتاجر</p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-first-restaurant\">\n              إضافة المطعم الأول\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":18080},"client/src/pages/Cart.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { ArrowRight, Trash2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { useCart } from '../context/CartContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { InsertOrder } from '@shared/schema';\n\nexport default function Cart() {\n  const [, setLocation] = useLocation();\n  const { items, removeItem, updateQuantity, clearCart, getSubtotal, getTotal } = useCart();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [orderForm, setOrderForm] = useState({\n    customerName: '',\n    customerPhone: '',\n    customerEmail: '',\n    deliveryAddress: '',\n    notes: '',\n    paymentMethod: 'cash',\n  });\n\n  const placeOrderMutation = useMutation({\n    mutationFn: async (orderData: InsertOrder) => {\n      const response = await apiRequest('POST', '/api/orders', orderData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"تم تأكيد طلبك بنجاح!\",\n        description: \"سيتم التواصل معك قريباً\",\n      });\n      clearCart();\n      setLocation('/');\n    },\n    onError: () => {\n      toast({\n        title: \"خطأ في تأكيد الطلب\",\n        description: \"يرجى المحاولة مرة أخرى\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePlaceOrder = () => {\n    if (!orderForm.customerName || !orderForm.customerPhone || !orderForm.deliveryAddress) {\n      toast({\n        title: \"معلومات ناقصة\",\n        description: \"يرجى ملء جميع الحقول المطلوبة\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (items.length === 0) {\n      toast({\n        title: \"السلة فارغة\",\n        description: \"أضف بعض العناصر قبل تأكيد الطلب\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const orderData: InsertOrder = {\n      ...orderForm,\n      items: JSON.stringify(items),\n      subtotal: getSubtotal().toString(),\n      deliveryFee: '5',\n      totalAmount: getTotal().toString(),\n      restaurantId: items[0]?.restaurantId || '',\n      status: 'pending',\n    };\n\n    placeOrderMutation.mutate(orderData);\n  };\n\n  // دالة لتحويل السعر من string إلى number للحسابات\n  const parsePrice = (price: string | number): number => {\n    if (typeof price === 'number') return price;\n    const num = parseFloat(price);\n    return isNaN(num) ? 0 : num;\n  };\n\n  return (\n    <div>\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/')}\n            data-testid=\"button-cart-back\"\n          >\n            <ArrowRight className=\"h-5 w-5\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-foreground\">السلة</h2>\n        </div>\n      </header>\n\n      <section className=\"p-4\">\n        {/* Cart Items */}\n        <div className=\"space-y-4 mb-6\">\n          {items.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              <i className=\"fas fa-shopping-cart text-4xl mb-4\"></i>\n              <p>السلة فارغة</p>\n              <p className=\"text-sm\">أضف بعض العناصر لتبدأ طلبك</p>\n            </div>\n          ) : (\n            items.map((item) => (\n              <Card key={item.id} className=\"p-4 flex justify-between items-center\">\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium text-foreground\" data-testid={`cart-item-name-${item.id}`}>\n                    {item.name}\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {item.price} ريال × {item.quantity}\n                  </p>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                      data-testid={`button-decrease-${item.id}`}\n                    >\n                      -\n                    </Button>\n                    <span className=\"px-3 py-1 bg-muted rounded\" data-testid={`quantity-${item.id}`}>\n                      {item.quantity}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                      data-testid={`button-increase-${item.id}`}\n                    >\n                      +\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"font-bold text-primary\" data-testid={`item-total-${item.id}`}>\n                    {parsePrice(item.price) * item.quantity} ريال\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => removeItem(item.id)}\n                    className=\"text-destructive hover:bg-destructive/10\"\n                    data-testid={`button-remove-${item.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Order Summary and Form */}\n        {items.length > 0 && (\n          <Card className=\"p-4\">\n            <h3 className=\"font-bold text-foreground mb-4\">ملخص الطلب</h3>\n            \n            {/* Order Summary */}\n            <div className=\"space-y-2 text-sm mb-6\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">المجموع الفرعي</span>\n                <span className=\"text-foreground\" data-testid=\"order-subtotal\">\n                  {getSubtotal()} ريال\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">رسوم التوصيل</span>\n                <span className=\"text-foreground\">5 ريال</span>\n              </div>\n              <div className=\"border-t border-border pt-2 mt-2\">\n                <div className=\"flex justify-between font-bold\">\n                  <span className=\"text-foreground\">الإجمالي</span>\n                  <span className=\"text-primary\" data-testid=\"order-total\">\n                    {getTotal()} ريال\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Order Form */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"customerName\" className=\"text-foreground\">الاسم *</Label>\n                <Input\n                  id=\"customerName\"\n                  value={orderForm.customerName}\n                  onChange={(e) => setOrderForm(prev => ({ ...prev, customerName: e.target.value }))}\n                  placeholder=\"أدخل اسمك\"\n                  data-testid=\"input-customer-name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"customerPhone\" className=\"text-foreground\">رقم الهاتف *</Label>\n                <Input\n                  id=\"customerPhone\"\n                  value={orderForm.customerPhone}\n                  onChange={(e) => setOrderForm(prev => ({ ...prev, customerPhone: e.target.value }))}\n                  placeholder=\"أدخل رقم هاتفك\"\n                  data-testid=\"input-customer-phone\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"customerEmail\" className=\"text-foreground\">البريد الإلكتروني</Label>\n                <Input\n                  id=\"customerEmail\"\n                  type=\"email\"\n                  value={orderForm.customerEmail}\n                  onChange={(e) => setOrderForm(prev => ({ ...prev, customerEmail: e.target.value }))}\n                  placeholder=\"أدخل بريدك الإلكتروني (اختياري)\"\n                  data-testid=\"input-customer-email\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"deliveryAddress\" className=\"text-foreground\">عنوان التوصيل *</Label>\n                <Input\n                  id=\"deliveryAddress\"\n                  value={orderForm.deliveryAddress}\n                  onChange={(e) => setOrderForm(prev => ({ ...prev, deliveryAddress: e.target.value }))}\n                  placeholder=\"أدخل عنوانك بالتفصيل\"\n                  data-testid=\"input-delivery-address\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\" className=\"text-foreground\">ملاحظات الطلب</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={orderForm.notes}\n                  onChange={(e) => setOrderForm(prev => ({ ...prev, notes: e.target.value }))}\n                  placeholder=\"ملاحظات إضافية (اختياري)\"\n                  className=\"h-20 resize-none\"\n                  data-testid=\"input-notes\"\n                />\n              </div>\n\n              <div>\n                <Label className=\"text-foreground\">طريقة الدفع</Label>\n                <RadioGroup\n                  value={orderForm.paymentMethod}\n                  onValueChange={(value) => setOrderForm(prev => ({ ...prev, paymentMethod: value }))}\n                  className=\"space-y-2 mt-2\"\n                >\n                  <div className=\"flex items-center space-x-2 space-x-reverse p-3 bg-muted rounded-lg\">\n                    <RadioGroupItem value=\"cash\" id=\"cash\" data-testid=\"payment-cash\" />\n                    <Label htmlFor=\"cash\" className=\"flex items-center gap-3 cursor-pointer\">\n                      <i className=\"fas fa-money-bill-wave text-muted-foreground\"></i>\n                      <span className=\"text-foreground\">الدفع عند الاستلام</span>\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2 space-x-reverse p-3 bg-muted rounded-lg\">\n                    <RadioGroupItem value=\"card\" id=\"card\" data-testid=\"payment-card\" />\n                    <Label htmlFor=\"card\" className=\"flex items-center gap-3 cursor-pointer\">\n                      <i className=\"fas fa-credit-card text-muted-foreground\"></i>\n                      <span className=\"text-foreground\">الدفع الإلكتروني</span>\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2 space-x-reverse p-3 bg-muted rounded-lg\">\n                    <RadioGroupItem value=\"wallet\" id=\"wallet\" data-testid=\"payment-wallet\" />\n                    <Label htmlFor=\"wallet\" className=\"flex items-center gap-3 cursor-pointer\">\n                      <i className=\"fas fa-wallet text-muted-foreground\"></i>\n                      <span className=\"text-foreground\">الدفع من الرصيد</span>\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n            </div>\n\n            <Button\n              onClick={handlePlaceOrder}\n              disabled={placeOrderMutation.isPending}\n              className=\"w-full mt-6 py-4 text-lg font-bold\"\n              data-testid=\"button-place-order\"\n            >\n              {placeOrderMutation.isPending ? 'جاري تأكيد الطلب...' : 'تأكيد الطلب'}\n            </Button>\n          </Card>\n        )}\n      </section>\n    </div>\n  );\n}","size_bytes":12279},"client/src/pages/Delivery.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { MapPin, Package, Phone, Check, X, Navigation, DollarSign, Clock, User, Star } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Order, Driver } from '@shared/schema';\n\nexport default function Delivery() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Mock driver data - in real app this would come from authentication\n  const [currentDriver] = useState<Driver>({\n    id: '1',\n    name: 'أحمد محمد',\n    phone: '+967771234567',\n    password: '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi',\n    isAvailable: true,\n    isActive: true,\n    currentLocation: 'صنعاء، شارع الزبيري',\n    earnings: '2500',\n    createdAt: new Date(),\n  });\n\n  const [driverStatus, setDriverStatus] = useState(currentDriver.isAvailable);\n\n  const { data: availableOrders, isLoading } = useQuery<Order[]>({\n    queryKey: ['/api/orders', { status: 'confirmed' }],\n  });\n\n  const { data: activeOrders } = useQuery<Order[]>({\n    queryKey: ['/api/orders', { driverId: currentDriver.id, status: 'on_way' }],\n  });\n\n  const acceptOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      const response = await apiRequest('PUT', `/api/orders/${orderId}`, {\n        status: 'on_way',\n        driverId: currentDriver.id,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      toast({\n        title: \"تم قبول الطلب\",\n        description: \"يمكنك الآن بدء رحلة التوصيل\",\n      });\n    },\n  });\n\n  const completeOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      const response = await apiRequest('PUT', `/api/orders/${orderId}`, {\n        status: 'delivered',\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      toast({\n        title: \"تم تسليم الطلب\",\n        description: \"تم تحديث حالة الطلب بنجاح\",\n      });\n    },\n  });\n\n  const updateDriverStatus = useMutation({\n    mutationFn: async (isAvailable: boolean) => {\n      const response = await apiRequest('PUT', `/api/drivers/${currentDriver.id}`, {\n        isAvailable,\n      });\n      return response.json();\n    },\n    onSuccess: (_, isAvailable: boolean) => {\n      setDriverStatus(isAvailable);\n      toast({\n        title: isAvailable ? \"أنت متاح الآن\" : \"أنت غير متاح\",\n        description: isAvailable ? \"ستتلقى طلبات جديدة\" : \"لن تتلقى طلبات جديدة\",\n      });\n    },\n  });\n\n  const getOrderItems = (itemsString: string) => {\n    try {\n      return JSON.parse(itemsString);\n    } catch {\n      return [];\n    }\n  };\n\n  // دالة لتحويل القيم الرقمية من string إلى number\n  const parseDecimal = (value: string | null): number => {\n    if (!value) return 0;\n    const num = parseFloat(value);\n    return isNaN(num) ? 0 : num;\n  };\n\n  const todayEarnings = 450; // Mock data\n  const todayOrders = 8; // Mock data\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4 sticky top-0 z-40\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n              <User className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-foreground\">{currentDriver.name}</h1>\n              <p className=\"text-sm text-muted-foreground\">سائق توصيل</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Label htmlFor=\"driver-status\" className=\"text-sm text-foreground\">متاح</Label>\n            <Switch\n              id=\"driver-status\"\n              checked={driverStatus}\n              onCheckedChange={(checked) => updateDriverStatus.mutate(checked)}\n              data-testid=\"switch-driver-status\"\n            />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Today's Stats */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <DollarSign className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n              <h3 className=\"text-lg font-bold text-foreground\" data-testid=\"today-earnings\">\n                {todayEarnings} ريال\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">أرباح اليوم</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Package className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <h3 className=\"text-lg font-bold text-foreground\" data-testid=\"today-orders\">\n                {todayOrders}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">طلبات اليوم</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Active Orders */}\n        {activeOrders && activeOrders.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5 text-primary\" />\n                الطلبات الحالية\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {activeOrders.map((order) => (\n                <div key={order.id} className=\"border border-border rounded-lg p-4\">\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div>\n                      <h4 className=\"font-bold text-foreground\">طلب #{order.id}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{order.customerName}</p>\n                    </div>\n                    <Badge className=\"bg-orange-500 hover:bg-orange-500\">جاري التوصيل</Badge>\n                  </div>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-sm text-foreground\">{order.deliveryAddress}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-sm text-foreground\">{order.customerPhone}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <Button \n                      className=\"flex-1 gap-2\"\n                      onClick={() => window.open(`tel:${order.customerPhone}`)}\n                      data-testid={`button-call-${order.id}`}\n                    >\n                      <Phone className=\"h-4 w-4\" />\n                      اتصال\n                    </Button>\n                    <Button \n                      className=\"flex-1 gap-2\"\n                      onClick={() => window.open(`https://maps.google.com/?q=${encodeURIComponent(order.deliveryAddress)}`)}\n                      data-testid={`button-navigate-${order.id}`}\n                    >\n                      <Navigation className=\"h-4 w-4\" />\n                      التنقل\n                    </Button>\n                    <Button \n                      variant=\"outline\"\n                      className=\"flex-1 gap-2\"\n                      onClick={() => completeOrderMutation.mutate(order.id)}\n                      disabled={completeOrderMutation.isPending}\n                      data-testid={`button-complete-${order.id}`}\n                    >\n                      <Check className=\"h-4 w-4\" />\n                      تم التسليم\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Available Orders */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5 text-primary\" />\n              الطلبات المتاحة\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!driverStatus ? (\n              <div className=\"text-center py-8\">\n                <Clock className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">قم بتفعيل حالة التوفر لاستقبال الطلبات</p>\n              </div>\n            ) : isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"border border-border rounded-lg p-4 animate-pulse\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\" />\n                    <div className=\"h-3 bg-muted rounded w-1/2 mb-3\" />\n                    <div className=\"h-3 bg-muted rounded w-2/3\" />\n                  </div>\n                ))}\n              </div>\n            ) : availableOrders && availableOrders.length > 0 ? (\n              <div className=\"space-y-4\">\n                {availableOrders.map((order) => {\n                  const items = getOrderItems(order.items);\n                  const totalAmount = parseDecimal(order.totalAmount);\n                  const commission = Math.round(totalAmount * 0.1);\n                  \n                  return (\n                    <div key={order.id} className=\"border border-border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div>\n                          <h4 className=\"font-bold text-foreground\">طلب #{order.id}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{order.customerName}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-primary\">{totalAmount} ريال</p>\n                          <p className=\"text-sm text-muted-foreground\">العمولة: {commission} ريال</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center gap-2\">\n                          <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm text-foreground\">{order.deliveryAddress}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Package className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm text-foreground\">\n                            {items.length} عنصر - {order.paymentMethod === 'cash' ? 'دفع نقدي' : 'مدفوع مسبقاً'}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        <Button \n                          className=\"flex-1\"\n                          onClick={() => acceptOrderMutation.mutate(order.id)}\n                          disabled={acceptOrderMutation.isPending}\n                          data-testid={`button-accept-${order.id}`}\n                        >\n                          قبول الطلب\n                        </Button>\n                        <Button \n                          variant=\"outline\"\n                          onClick={() => window.open(`https://maps.google.com/?q=${encodeURIComponent(order.deliveryAddress)}`)}\n                          data-testid={`button-view-location-${order.id}`}\n                        >\n                          عرض الموقع\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">لا توجد طلبات متاحة في الوقت الحالي</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">سيتم إشعارك عند توفر طلبات جديدة</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Earnings Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Star className=\"h-5 w-5 text-primary\" />\n              ملخص الأرباح\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4 text-center\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">هذا الأسبوع</p>\n                <p className=\"text-lg font-bold text-foreground\">1,250 ريال</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">هذا الشهر</p>\n                <p className=\"text-lg font-bold text-foreground\">4,800 ريال</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">متوسط الطلب</p>\n                <p className=\"text-lg font-bold text-foreground\">85 ريال</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">التقييم</p>\n                <p className=\"text-lg font-bold text-foreground\">4.9 ⭐</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14449},"client/src/pages/DriverDashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Badge } from '../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { DriverControlPanel } from '../components/DriverControlPanel';\nimport { useUiSettings } from '../context/UiSettingsContext';\nimport { \n  Truck, \n  MapPin, \n  Clock, \n  DollarSign, \n  LogOut,\n  Navigation,\n  Phone,\n  CheckCircle,\n  XCircle,\n  Package,\n  Settings\n} from 'lucide-react';\n\ninterface DriverDashboardProps {\n  onLogout: () => void;\n}\n\nexport const DriverDashboard: React.FC<DriverDashboardProps> = ({ onLogout }) => {\n  const { logout } = useAuth();\n  const [isAvailable, setIsAvailable] = useState(true);\n  const [currentOrder, setCurrentOrder] = useState<any>(null);\n\n  const handleLogout = () => {\n    logout();\n    onLogout();\n  };\n\n  const toggleAvailability = () => {\n    setIsAvailable(!isAvailable);\n  };\n\n  const acceptOrder = (orderId: string) => {\n    setCurrentOrder({\n      id: orderId,\n      customer: 'محمد أحمد',\n      phone: '0591234567',\n      address: 'شارع الزبيري، صنعاء',\n      restaurant: 'مطعم الوزيكو للعربكة',\n      items: 'عربكة بالقشطة والعسل × 2',\n      total: '₪110',\n      status: 'accepted'\n    });\n  };\n\n  const completeOrder = () => {\n    setCurrentOrder(null);\n  };\n\n  const pendingOrders = [\n    {\n      id: '1001',\n      customer: 'محمد أحمد',\n      restaurant: 'مطعم الوزيكو للعربكة',\n      address: 'شارع الزبيري، صنعاء',\n      distance: '2.5 كم',\n      fee: '₪15',\n      time: 'منذ 5 دقائق'\n    },\n    {\n      id: '1002',\n      customer: 'سارة علي',\n      restaurant: 'حلويات الشام',\n      address: 'شارع الستين، صنعاء',\n      distance: '1.8 كم',\n      fee: '₪12',\n      time: 'منذ 8 دقائق'\n    }\n  ];\n\n  const todayStats = {\n    deliveries: 12,\n    earnings: '₪180',\n    hours: '8.5',\n    distance: '45 كم'\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\" dir=\"rtl\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center gap-3\">\n              <Truck className=\"h-8 w-8 text-green-600\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">تطبيق السائق</h1>\n                <p className=\"text-sm text-gray-500\">أحمد محمد</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button \n                variant={isAvailable ? \"default\" : \"outline\"}\n                onClick={toggleAvailability}\n                className={isAvailable ? \"bg-green-600 hover:bg-green-700\" : \"\"}\n              >\n                {isAvailable ? 'متاح' : 'غير متاح'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={handleLogout}\n                className=\"flex items-center gap-2\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n                خروج\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Current Order */}\n        {currentOrder && (\n          <Card className=\"mb-6 border-green-200 bg-green-50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-green-800\">\n                <Package className=\"h-5 w-5\" />\n                الطلب الحالي - #{currentOrder.id}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"font-medium\">{currentOrder.customer}</p>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600 mt-1\">\n                      <Phone className=\"h-4 w-4\" />\n                      {currentOrder.phone}\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600 mt-1\">\n                      <MapPin className=\"h-4 w-4\" />\n                      {currentOrder.address}\n                    </div>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">{currentOrder.restaurant}</p>\n                    <p className=\"text-sm text-gray-600 mt-1\">{currentOrder.items}</p>\n                    <p className=\"text-lg font-bold text-green-600 mt-2\">{currentOrder.total}</p>\n                  </div>\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button className=\"flex-1 bg-blue-600 hover:bg-blue-700\">\n                    <Navigation className=\"h-4 w-4 mr-2\" />\n                    فتح الخريطة\n                  </Button>\n                  <Button className=\"flex-1\" onClick={completeOrder}>\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    تم التسليم\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <Package className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-gray-900\">{todayStats.deliveries}</p>\n                <p className=\"text-sm text-gray-600\">توصيلات اليوم</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <DollarSign className=\"h-6 w-6 text-green-600 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-gray-900\">{todayStats.earnings}</p>\n                <p className=\"text-sm text-gray-600\">أرباح اليوم</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <Clock className=\"h-6 w-6 text-orange-600 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-gray-900\">{todayStats.hours}</p>\n                <p className=\"text-sm text-gray-600\">ساعات العمل</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <MapPin className=\"h-6 w-6 text-purple-600 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-gray-900\">{todayStats.distance}</p>\n                <p className=\"text-sm text-gray-600\">المسافة المقطوعة</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Available Orders */}\n        {isAvailable && !currentOrder && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                الطلبات المتاحة\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {pendingOrders.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {pendingOrders.map((order) => (\n                    <div key={order.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div>\n                          <p className=\"font-medium\">طلب #{order.id}</p>\n                          <p className=\"text-sm text-gray-600\">{order.customer}</p>\n                        </div>\n                        <Badge variant=\"secondary\">{order.time}</Badge>\n                      </div>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Package className=\"h-4 w-4 text-gray-400\" />\n                          {order.restaurant}\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <MapPin className=\"h-4 w-4 text-gray-400\" />\n                          {order.address}\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>المسافة: {order.distance}</span>\n                          <span className=\"font-medium text-green-600\">{order.fee}</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button \n                          className=\"flex-1\"\n                          onClick={() => acceptOrder(order.id)}\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          قبول الطلب\n                        </Button>\n                        <Button variant=\"outline\" className=\"flex-1\">\n                          <XCircle className=\"h-4 w-4 mr-2\" />\n                          رفض\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Clock className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">لا توجد طلبات متاحة حالياً</p>\n                  <p className=\"text-sm text-gray-400 mt-2\">سيتم إشعارك عند توفر طلبات جديدة</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Offline Status */}\n        {!isAvailable && (\n          <Card>\n            <CardContent className=\"py-8\">\n              <div className=\"text-center\">\n                <Truck className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-lg font-medium text-gray-600 mb-2\">أنت غير متاح حالياً</p>\n                <p className=\"text-sm text-gray-400 mb-4\">قم بتفعيل حالة المتاح لاستلام الطلبات</p>\n                <Button onClick={toggleAvailability} className=\"bg-green-600 hover:bg-green-700\">\n                  تفعيل حالة المتاح\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n};","size_bytes":11053},"client/src/pages/Home.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Gift, Truck, Clock, Star, Zap, Percent } from 'lucide-react';\nimport CategoryTabs from '../components/CategoryTabs';\nimport RestaurantCard from '../components/RestaurantCard';\nimport type { Restaurant } from '@shared/schema';\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\n  const { data: restaurants, isLoading } = useQuery<Restaurant[]>({\n    queryKey: ['/api/restaurants', ...(selectedCategory ? [`?categoryId=${selectedCategory}`] : [])],\n  });\n\n  const handleRestaurantClick = (restaurantId: string) => {\n    setLocation(`/restaurant/${restaurantId}`);\n  };\n\n  return (\n    <div>\n      {/* Special Offers */}\n      <section className=\"mb-6\">\n        <h3 className=\"text-lg font-bold text-foreground mb-4 px-4 flex items-center gap-2\">\n          <Zap className=\"h-5 w-5 text-primary\" />\n          العروض الخاصة\n        </h3>\n        <div className=\"px-4 space-y-3\">\n          <Card className=\"bg-gradient-to-r from-primary/20 to-primary/10 border-primary/30 overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <div className=\"flex items-center\">\n                <div className=\"w-20 h-20 bg-primary/20 flex items-center justify-center\">\n                  <Gift className=\"h-10 w-10 text-primary\" />\n                </div>\n                <div className=\"flex-1 p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-bold text-foreground\">خصم 30% على الطلب الأول</h4>\n                      <p className=\"text-sm text-muted-foreground\">استخدم كود: WELCOME30</p>\n                    </div>\n                    <Badge className=\"bg-primary\">جديد</Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-r from-green-500/20 to-green-500/10 border-green-500/30 overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <div className=\"flex items-center\">\n                <div className=\"w-20 h-20 bg-green-500/20 flex items-center justify-center\">\n                  <Truck className=\"h-10 w-10 text-green-500\" />\n                </div>\n                <div className=\"flex-1 p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-bold text-foreground\">توصيل مجاني للطلبات فوق 50 ريال</h4>\n                      <p className=\"text-sm text-muted-foreground\">لفترة محدودة</p>\n                    </div>\n                    <Badge className=\"bg-green-500\">مميز</Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-yellow-500/20 to-yellow-500/10 border-yellow-500/30 overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <div className=\"flex items-center\">\n                <div className=\"w-20 h-20 bg-yellow-500/20 flex items-center justify-center\">\n                  <Clock className=\"h-10 w-10 text-yellow-500\" />\n                </div>\n                <div className=\"flex-1 p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-bold text-foreground\">طلب سريع في 15 دقيقة</h4>\n                      <p className=\"text-sm text-muted-foreground\">للطلبات داخل المدينة</p>\n                    </div>\n                    <Badge className=\"bg-yellow-500\">سريع</Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-r from-purple-500/20 to-purple-500/10 border-purple-500/30 overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <div className=\"flex items-center\">\n                <div className=\"w-20 h-20 bg-purple-500/20 flex items-center justify-center\">\n                  <Star className=\"h-10 w-10 text-purple-500\" />\n                </div>\n                <div className=\"flex-1 p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-bold text-foreground\">نقاط مكافآت مضاعفة</h4>\n                      <p className=\"text-sm text-muted-foreground\">اجمع نقاط واحصل على خصومات</p>\n                    </div>\n                    <Badge className=\"bg-purple-500\">VIP</Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Category Tabs */}\n      <CategoryTabs \n        selectedCategory={selectedCategory}\n        onCategoryChange={setSelectedCategory}\n      />\n\n      {/* Restaurant List */}\n      <section className=\"px-4 space-y-4\">\n        <h3 className=\"text-lg font-bold text-foreground mb-4\">المطاعم القريبة منك</h3>\n        \n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-card rounded-xl border border-border overflow-hidden\">\n                <div className=\"w-full h-48 bg-muted animate-pulse\" />\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"h-4 bg-muted rounded animate-pulse\" />\n                  <div className=\"h-3 bg-muted rounded w-3/4 animate-pulse\" />\n                  <div className=\"h-3 bg-muted rounded w-1/2 animate-pulse\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : restaurants?.length ? (\n          restaurants.map((restaurant) => (\n            <RestaurantCard\n              key={restaurant.id}\n              restaurant={restaurant}\n              onClick={() => handleRestaurantClick(restaurant.id)}\n            />\n          ))\n        ) : (\n          <div className=\"text-center text-muted-foreground py-8\">\n            <p>لا توجد مطاعم متاحة في هذا التصنيف</p>\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n","size_bytes":6620},"client/src/pages/Location.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { ArrowRight, MapPin, Plus, Target, Home, Building } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SavedAddress {\n  id: string;\n  type: 'home' | 'work' | 'other';\n  label: string;\n  address: string;\n  details: string;\n  isDefault: boolean;\n}\n\nexport default function Location() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [showAddForm, setShowAddForm] = useState(false);\n  const [newAddress, setNewAddress] = useState({\n    type: 'home' as 'home' | 'work' | 'other',\n    label: '',\n    address: '',\n    details: '',\n  });\n\n  const [savedAddresses, setSavedAddresses] = useState<SavedAddress[]>([\n    {\n      id: '1',\n      type: 'home',\n      label: 'المنزل',\n      address: 'صنعاء، شارع الزبيري',\n      details: 'بجانب مسجد النور، الطابق الثاني',\n      isDefault: true,\n    },\n    {\n      id: '2',\n      type: 'work',\n      label: 'العمل',\n      address: 'صنعاء، شارع السبعين',\n      details: 'مجمع الأعمال، مكتب رقم 205',\n      isDefault: false,\n    },\n  ]);\n\n  const handleAddAddress = () => {\n    if (!newAddress.label || !newAddress.address) {\n      toast({\n        title: \"معلومات ناقصة\",\n        description: \"يرجى ملء جميع الحقول المطلوبة\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const address: SavedAddress = {\n      id: Date.now().toString(),\n      ...newAddress,\n      isDefault: savedAddresses.length === 0,\n    };\n\n    setSavedAddresses(prev => [...prev, address]);\n    setNewAddress({ type: 'home', label: '', address: '', details: '' });\n    setShowAddForm(false);\n    \n    toast({\n      title: \"تم إضافة العنوان\",\n      description: \"تم حفظ العنوان الجديد بنجاح\",\n    });\n  };\n\n  const handleSetDefault = (id: string) => {\n    setSavedAddresses(prev =>\n      prev.map(addr => ({ ...addr, isDefault: addr.id === id }))\n    );\n    toast({\n      title: \"تم تحديث العنوان الافتراضي\",\n      description: \"تم تعيين العنوان كافتراضي للتوصيل\",\n    });\n  };\n\n  const handleDeleteAddress = (id: string) => {\n    setSavedAddresses(prev => prev.filter(addr => addr.id !== id));\n    toast({\n      title: \"تم حذف العنوان\",\n      description: \"تم حذف العنوان من القائمة المحفوظة\",\n    });\n  };\n\n  const getAddressIcon = (type: string) => {\n    switch (type) {\n      case 'home': return Home;\n      case 'work': return Building;\n      default: return MapPin;\n    }\n  };\n\n  const getAddressColor = (type: string) => {\n    switch (type) {\n      case 'home': return 'text-green-500';\n      case 'work': return 'text-blue-500';\n      default: return 'text-purple-500';\n    }\n  };\n\n  return (\n    <div>\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/profile')}\n            data-testid=\"button-location-back\"\n          >\n            <ArrowRight className=\"h-5 w-5\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-foreground\">العناوين المحفوظة</h2>\n        </div>\n      </header>\n\n      <section className=\"p-4 space-y-6\">\n        {/* Current Location */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <Target className=\"h-6 w-6 text-primary\" />\n              <div>\n                <h3 className=\"font-medium text-foreground\">موقعك الحالي</h3>\n                <p className=\"text-sm text-muted-foreground\">تم تحديده تلقائياً</p>\n              </div>\n            </div>\n            <div className=\"bg-muted p-3 rounded-lg\">\n              <p className=\"text-foreground\" data-testid=\"current-location\">\n                صنعاء، شارع الستين، قرب دوار الأمم المتحدة\n              </p>\n            </div>\n            <Button \n              variant=\"outline\" \n              className=\"w-full mt-3\"\n              data-testid=\"button-use-current-location\"\n            >\n              استخدام الموقع الحالي\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Add New Address */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">إضافة عنوان جديد</CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowAddForm(!showAddForm)}\n                data-testid=\"button-toggle-add-form\"\n              >\n                <Plus className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </CardHeader>\n          {showAddForm && (\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label className=\"text-foreground\">نوع العنوان</Label>\n                <div className=\"flex gap-2 mt-2\">\n                  {[\n                    { value: 'home', label: 'المنزل', icon: Home },\n                    { value: 'work', label: 'العمل', icon: Building },\n                    { value: 'other', label: 'أخرى', icon: MapPin },\n                  ].map((type) => {\n                    const Icon = type.icon;\n                    return (\n                      <Button\n                        key={type.value}\n                        variant={newAddress.type === type.value ? 'default' : 'outline'}\n                        className=\"flex-1 gap-2\"\n                        onClick={() => setNewAddress(prev => ({ ...prev, type: type.value as any }))}\n                        data-testid={`address-type-${type.value}`}\n                      >\n                        <Icon className=\"h-4 w-4\" />\n                        {type.label}\n                      </Button>\n                    );\n                  })}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"address-label\" className=\"text-foreground\">تسمية العنوان</Label>\n                <Input\n                  id=\"address-label\"\n                  value={newAddress.label}\n                  onChange={(e) => setNewAddress(prev => ({ ...prev, label: e.target.value }))}\n                  placeholder=\"مثال: المنزل، العمل، بيت الأهل\"\n                  data-testid=\"input-address-label\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"address-street\" className=\"text-foreground\">العنوان الرئيسي *</Label>\n                <Input\n                  id=\"address-street\"\n                  value={newAddress.address}\n                  onChange={(e) => setNewAddress(prev => ({ ...prev, address: e.target.value }))}\n                  placeholder=\"الشارع والحي\"\n                  data-testid=\"input-address-street\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"address-details\" className=\"text-foreground\">تفاصيل إضافية</Label>\n                <Input\n                  id=\"address-details\"\n                  value={newAddress.details}\n                  onChange={(e) => setNewAddress(prev => ({ ...prev, details: e.target.value }))}\n                  placeholder=\"رقم الطابق، معالم قريبة، ملاحظات للسائق\"\n                  data-testid=\"input-address-details\"\n                />\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button onClick={handleAddAddress} className=\"flex-1\" data-testid=\"button-save-address\">\n                  حفظ العنوان\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowAddForm(false)}\n                  data-testid=\"button-cancel-add\"\n                >\n                  إلغاء\n                </Button>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n\n        {/* Saved Addresses */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-lg font-bold text-foreground\">العناوين المحفوظة</h3>\n          \n          {savedAddresses.map((address) => {\n            const Icon = getAddressIcon(address.type);\n            const iconColor = getAddressColor(address.type);\n            \n            return (\n              <Card key={address.id} className={`${address.isDefault ? 'border-primary' : ''}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start gap-3 flex-1\">\n                      <Icon className={`h-6 w-6 ${iconColor} mt-1`} />\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h4 className=\"font-medium text-foreground\" data-testid={`address-label-${address.id}`}>\n                            {address.label}\n                          </h4>\n                          {address.isDefault && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">افتراضي</Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-foreground mb-1\" data-testid={`address-street-${address.id}`}>\n                          {address.address}\n                        </p>\n                        {address.details && (\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`address-details-${address.id}`}>\n                            {address.details}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-2 mt-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"flex-1\"\n                      onClick={() => setLocation('/cart')}\n                      data-testid={`button-deliver-here-${address.id}`}\n                    >\n                      التوصيل هنا\n                    </Button>\n                    {!address.isDefault && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleSetDefault(address.id)}\n                        data-testid={`button-set-default-${address.id}`}\n                      >\n                        تعيين كافتراضي\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDeleteAddress(address.id)}\n                      className=\"text-destructive hover:bg-destructive/10\"\n                      data-testid={`button-delete-address-${address.id}`}\n                    >\n                      حذف\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":11766},"client/src/pages/LoginPage.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Alert, AlertDescription } from '../components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { useAuth } from '../context/AuthContext';\nimport { Loader2, Shield, Truck } from 'lucide-react';\n\ninterface LoginPageProps {\n  onSuccess: () => void;\n}\n\nexport const LoginPage: React.FC<LoginPageProps> = ({ onSuccess }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [activeTab, setActiveTab] = useState('admin');\n  const { login } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await login(email, password);\n      if (result.success) {\n        onSuccess();\n      } else {\n        setError(result.message);\n      }\n    } catch (error) {\n      setError('خطأ في تسجيل الدخول');\n    }\n\n    setLoading(false);\n  };\n\n  const fillAdminCredentials = () => {\n    setEmail('admin@alsarie-one.com');\n    setPassword('admin123456');\n  };\n\n  const fillDriverCredentials = () => {\n    setEmail('+967771234567');\n    setPassword('$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\" dir=\"rtl\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            تسجيل الدخول للنظام\n          </CardTitle>\n          <CardDescription>\n            اختر نوع المستخدم وأدخل بيانات الدخول\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"admin\" className=\"flex items-center gap-2\">\n                <Shield className=\"w-4 h-4\" />\n                مدير النظام\n              </TabsTrigger>\n              <TabsTrigger value=\"driver\" className=\"flex items-center gap-2\">\n                <Truck className=\"w-4 h-4\" />\n                سائق\n              </TabsTrigger>\n            </TabsList>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4 mt-6\">\n              <TabsContent value=\"admin\" className=\"space-y-4 mt-0\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">البريد الإلكتروني</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    placeholder=\"أدخل البريد الإلكتروني\"\n                    required\n                    className=\"text-right\"\n                    dir=\"ltr\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">كلمة المرور</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"أدخل كلمة المرور\"\n                    required\n                    className=\"text-right\"\n                    dir=\"ltr\"\n                  />\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={fillAdminCredentials}\n                  className=\"w-full\"\n                >\n                  استخدام بيانات المدير الافتراضية\n                </Button>\n              </TabsContent>\n\n              <TabsContent value=\"driver\" className=\"space-y-4 mt-0\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">رقم الهاتف</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    placeholder=\"أدخل رقم الهاتف\"\n                    required\n                    className=\"text-right\"\n                    dir=\"ltr\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">كلمة المرور</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"أدخل كلمة المرور\"\n                    required\n                    className=\"text-right\"\n                    dir=\"ltr\"\n                  />\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={fillDriverCredentials}\n                  className=\"w-full\"\n                >\n                  استخدام بيانات السائق التجريبية\n                </Button>\n              </TabsContent>\n\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    جاري تسجيل الدخول...\n                  </>\n                ) : (\n                  'تسجيل الدخول'\n                )}\n              </Button>\n            </form>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":6314},"client/src/pages/OrderTracking.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { ArrowRight, MapPin, Clock, Phone, CheckCircle, Truck, Package, User } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\n\ninterface OrderStatus {\n  id: string;\n  status: 'pending' | 'confirmed' | 'preparing' | 'on_way' | 'delivered' | 'cancelled';\n  timestamp: Date;\n  description: string;\n}\n\ninterface OrderDetails {\n  id: string;\n  customerName: string;\n  customerPhone: string;\n  deliveryAddress: string;\n  items: any[];\n  total: number;\n  status: string;\n  estimatedTime: string;\n  driverName?: string;\n  driverPhone?: string;\n  createdAt: Date;\n}\n\nexport default function OrderTracking() {\n  const { orderId } = useParams<{ orderId: string }>();\n  const [, setLocation] = useLocation();\n  \n  // Mock order data - in real app this would come from API\n  const [order] = useState<OrderDetails>({\n    id: orderId || '12345',\n    customerName: 'محمد أحمد',\n    customerPhone: '+967771234567',\n    deliveryAddress: 'صنعاء، شارع الزبيري، بجانب مسجد النور',\n    items: [\n      { name: 'عربكة بالقشطة والعسل', quantity: 2, price: 55 },\n      { name: 'مياه معدنية', quantity: 1, price: 3 },\n    ],\n    total: 113,\n    status: 'on_way',\n    estimatedTime: '25 دقيقة',\n    driverName: 'أحمد محمد',\n    driverPhone: '+967771234567',\n    createdAt: new Date(),\n  });\n\n  const [orderHistory] = useState<OrderStatus[]>([\n    { id: '1', status: 'pending', timestamp: new Date(Date.now() - 30 * 60000), description: 'تم استلام الطلب' },\n    { id: '2', status: 'confirmed', timestamp: new Date(Date.now() - 25 * 60000), description: 'تم تأكيد الطلب من المطعم' },\n    { id: '3', status: 'preparing', timestamp: new Date(Date.now() - 15 * 60000), description: 'جاري تحضير الطلب' },\n    { id: '4', status: 'on_way', timestamp: new Date(Date.now() - 5 * 60000), description: 'الطلب في الطريق إليك' },\n  ]);\n\n  const getStatusProgress = (status: string) => {\n    const statusMap = {\n      pending: 25,\n      confirmed: 40,\n      preparing: 60,\n      on_way: 80,\n      delivered: 100,\n      cancelled: 0,\n    };\n    return statusMap[status as keyof typeof statusMap] || 0;\n  };\n\n  const getStatusColor = (status: string) => {\n    const colorMap = {\n      pending: 'bg-yellow-500',\n      confirmed: 'bg-blue-500',\n      preparing: 'bg-orange-500',\n      on_way: 'bg-purple-500',\n      delivered: 'bg-green-500',\n      cancelled: 'bg-red-500',\n    };\n    return colorMap[status as keyof typeof colorMap] || 'bg-gray-500';\n  };\n\n  const getStatusText = (status: string) => {\n    const textMap = {\n      pending: 'في الانتظار',\n      confirmed: 'مؤكد',\n      preparing: 'قيد التحضير',\n      on_way: 'في الطريق',\n      delivered: 'تم التوصيل',\n      cancelled: 'ملغي',\n    };\n    return textMap[status as keyof typeof textMap] || status;\n  };\n\n  return (\n    <div>\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/profile')}\n            data-testid=\"button-tracking-back\"\n          >\n            <ArrowRight className=\"h-5 w-5\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-foreground\">تتبع الطلب</h2>\n        </div>\n      </header>\n\n      <section className=\"p-4 space-y-6\">\n        {/* Order Status Card */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">طلب رقم #{order.id}</CardTitle>\n              <Badge \n                className={`${getStatusColor(order.status)} text-white`}\n                data-testid=\"order-status-badge\"\n              >\n                {getStatusText(order.status)}\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center gap-3\">\n              <Clock className=\"h-5 w-5 text-muted-foreground\" />\n              <span className=\"text-foreground\">الوقت المتوقع للوصول: </span>\n              <span className=\"font-bold text-primary\" data-testid=\"estimated-time\">\n                {order.estimatedTime}\n              </span>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">حالة الطلب</span>\n                <span className=\"text-foreground\">{getStatusProgress(order.status)}%</span>\n              </div>\n              <Progress \n                value={getStatusProgress(order.status)} \n                className=\"h-2\"\n                data-testid=\"order-progress\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Driver Info */}\n        {order.status === 'on_way' && order.driverName && (\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                  <User className=\"h-6 w-6 text-primary-foreground\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium text-foreground\" data-testid=\"driver-name\">\n                    {order.driverName}\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">سائق التوصيل</p>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  data-testid=\"button-call-driver\"\n                >\n                  <Phone className=\"h-4 w-4 ml-2\" />\n                  اتصال\n                </Button>\n              </div>\n              <div className=\"bg-muted p-3 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <Truck className=\"h-4 w-4 text-primary\" />\n                  <span className=\"text-sm text-foreground\">السائق في الطريق إليك</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Delivery Address */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start gap-3\">\n              <MapPin className=\"h-5 w-5 text-primary mt-1\" />\n              <div>\n                <h4 className=\"font-medium text-foreground mb-1\">عنوان التوصيل</h4>\n                <p className=\"text-sm text-foreground\" data-testid=\"delivery-address\">\n                  {order.deliveryAddress}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Items */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">تفاصيل الطلب</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {order.items.map((item, index) => (\n              <div key={index} className=\"flex justify-between items-center py-2 border-b border-border last:border-0\">\n                <div className=\"flex-1\">\n                  <span className=\"text-foreground font-medium\" data-testid={`item-name-${index}`}>\n                    {item.name}\n                  </span>\n                  <span className=\"text-muted-foreground text-sm mr-2\">\n                    × {item.quantity}\n                  </span>\n                </div>\n                <span className=\"font-bold text-primary\" data-testid={`item-price-${index}`}>\n                  {item.price * item.quantity} ريال\n                </span>\n              </div>\n            ))}\n            <div className=\"border-t border-border pt-3 mt-3\">\n              <div className=\"flex justify-between items-center font-bold\">\n                <span className=\"text-foreground\">الإجمالي</span>\n                <span className=\"text-primary\" data-testid=\"order-total\">\n                  {order.total} ريال\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Timeline */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">تاريخ الطلب</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {orderHistory.map((status, index) => (\n                <div key={status.id} className=\"flex items-start gap-3\">\n                  <div className={`w-4 h-4 rounded-full ${getStatusColor(status.status)} mt-1 flex-shrink-0`} />\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-foreground font-medium\" data-testid={`timeline-description-${index}`}>\n                      {status.description}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`timeline-time-${index}`}>\n                      {status.timestamp.toLocaleTimeString('ar-YE', { \n                        hour: '2-digit', \n                        minute: '2-digit' \n                      })}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3\">\n          <Button \n            variant=\"outline\" \n            className=\"w-full\"\n            data-testid=\"button-contact-support\"\n          >\n            تواصل مع الدعم\n          </Button>\n          \n          {order.status !== 'delivered' && order.status !== 'cancelled' && (\n            <Button \n              variant=\"destructive\" \n              className=\"w-full\"\n              data-testid=\"button-cancel-order\"\n            >\n              إلغاء الطلب\n            </Button>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":10327},"client/src/pages/Privacy.tsx":{"content":"import { useLocation } from 'wouter';\nimport { ArrowRight, Shield, Eye, Lock, Phone, Mail } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function Privacy() {\n  const [, setLocation] = useLocation();\n\n  const privacySections = [\n    {\n      icon: Shield,\n      title: 'جمع المعلومات',\n      content: [\n        'نقوم بجمع المعلومات التي تقدمها لنا عند التسجيل في التطبيق',\n        'معلومات الطلبات والمدفوعات لتحسين خدماتنا',\n        'معلومات الموقع لتحديد المطاعم القريبة منك',\n        'معلومات الاستخدام لتطوير التطبيق وتحسين الأداء',\n      ],\n    },\n    {\n      icon: Eye,\n      title: 'استخدام المعلومات',\n      content: [\n        'معالجة وتنفيذ طلباتك بطريقة صحيحة وسريعة',\n        'التواصل معك بخصوص حالة الطلبات والتحديثات',\n        'تحسين خدماتنا وتطوير مميزات جديدة',\n        'إرسال العروض والتحديثات التسويقية (يمكن إلغاء الاشتراك)',\n      ],\n    },\n    {\n      icon: Lock,\n      title: 'حماية المعلومات',\n      content: [\n        'نستخدم تقنيات التشفير المتقدمة لحماية بياناتك',\n        'جميع المدفوعات تتم عبر منصات آمنة ومعتمدة',\n        'الوصول للمعلومات محدود للموظفين المخولين فقط',\n        'نقوم بمراجعة أنظمة الأمان بانتظام لضمان الحماية',\n      ],\n    },\n    {\n      icon: Phone,\n      title: 'مشاركة المعلومات',\n      content: [\n        'لا نبيع أو نؤجر معلوماتك الشخصية لأطراف ثالثة',\n        'نشارك المعلومات مع المطاعم فقط لتنفيذ الطلبات',\n        'قد نشارك معلومات محدودة مع السائقين للتوصيل',\n        'نلتزم بالقوانين المحلية في حالة طلب السلطات المختصة',\n      ],\n    },\n  ];\n\n  const contactInfo = [\n    { icon: Mail, label: 'البريد الإلكتروني', value: 'privacy@alsarie-one.com' },\n    { icon: Phone, label: 'رقم الهاتف', value: '+967-1-234567' },\n  ];\n\n  return (\n    <div>\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/profile')}\n            data-testid=\"button-privacy-back\"\n          >\n            <ArrowRight className=\"h-5 w-5\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-foreground\">سياسة الخصوصية</h2>\n        </div>\n      </header>\n\n      <section className=\"p-4 space-y-6\">\n        {/* Introduction */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center mb-6\">\n              <Shield className=\"h-16 w-16 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-foreground mb-2\">\n                نحن نحترم خصوصيتك\n              </h3>\n              <p className=\"text-muted-foreground\">\n                تطبيق السريع ون ملتزم بحماية خصوصيتك وأمان معلوماتك الشخصية. \n                هذه السياسة توضح كيفية جمع واستخدام وحماية بياناتك.\n              </p>\n            </div>\n            \n            <div className=\"bg-muted p-4 rounded-lg\">\n              <p className=\"text-sm text-foreground\">\n                <strong>آخر تحديث:</strong> 1 سبتمبر 2025\n              </p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                قد تتغير هذه السياسة من وقت لآخر، وسنقوم بإشعارك بأي تغييرات مهمة.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Privacy Sections */}\n        {privacySections.map((section, index) => {\n          const Icon = section.icon;\n          return (\n            <Card key={index}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3 text-lg\">\n                  <Icon className=\"h-6 w-6 text-primary\" />\n                  {section.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {section.content.map((item, itemIndex) => (\n                    <li \n                      key={itemIndex} \n                      className=\"flex items-start gap-3 text-foreground\"\n                      data-testid={`privacy-item-${index}-${itemIndex}`}\n                    >\n                      <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                      <span className=\"text-sm leading-relaxed\">{item}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          );\n        })}\n\n        {/* User Rights */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">حقوقك</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg border border-green-200 dark:border-green-800\">\n                <h4 className=\"font-medium text-green-800 dark:text-green-200 mb-2\">\n                  يحق لك:\n                </h4>\n                <ul className=\"space-y-2 text-sm text-green-700 dark:text-green-300\">\n                  <li>• الوصول إلى معلوماتك الشخصية وتحديثها</li>\n                  <li>• طلب حذف حسابك ومعلوماتك</li>\n                  <li>• إلغاء الاشتراك في الإشعارات التسويقية</li>\n                  <li>• تقديم شكوى حول استخدام معلوماتك</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">تواصل معنا</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              إذا كان لديك أي أسئلة حول سياسة الخصوصية أو كيفية معالجة بياناتك، \n              يمكنك التواصل معنا عبر:\n            </p>\n            \n            <div className=\"space-y-3\">\n              {contactInfo.map((contact, index) => {\n                const Icon = contact.icon;\n                return (\n                  <div \n                    key={index}\n                    className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\"\n                  >\n                    <Icon className=\"h-5 w-5 text-primary\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">{contact.label}</p>\n                      <p className=\"text-foreground font-medium\" data-testid={`contact-${index}`}>\n                        {contact.value}\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Acceptance */}\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              باستخدام تطبيق السريع ون، فإنك توافق على سياسة الخصوصية هذه \n              وعلى جمع واستخدام معلوماتك وفقاً للممارسات الموضحة أعلاه.\n            </p>\n            <Button \n              onClick={() => setLocation('/profile')}\n              data-testid=\"button-accept-privacy\"\n            >\n              فهمت وأوافق\n            </Button>\n          </CardContent>\n        </Card>\n      </section>\n    </div>\n  );\n}","size_bytes":8358},"client/src/pages/Profile.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { ArrowRight, User, Phone, Mail, MapPin, Settings, Shield, Star, Clock, Receipt } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Profile() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [profile, setProfile] = useState({\n    name: 'محمد أحمد',\n    phone: '+967771234567',\n    email: 'mohammed@example.com',\n    address: 'صنعاء، شارع الزبيري، بجانب مسجد النور',\n  });\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  const handleSave = () => {\n    setIsEditing(false);\n    toast({\n      title: \"تم حفظ البيانات\",\n      description: \"تم تحديث معلومات الملف الشخصي بنجاح\",\n    });\n  };\n\n  const profileStats = [\n    { icon: Receipt, label: 'إجمالي الطلبات', value: '42', color: 'text-primary' },\n    { icon: Star, label: 'التقييم', value: '4.8', color: 'text-yellow-500' },\n    { icon: Clock, label: 'عضو منذ', value: '6 أشهر', color: 'text-green-500' },\n  ];\n\n  const menuItems = [\n    { icon: Receipt, label: 'طلباتي', path: '/orders', description: 'عرض تاريخ الطلبات', testId: 'profile-orders' },\n    { icon: MapPin, label: 'العناوين المحفوظة', path: '/addresses', description: 'إدارة عناوين التوصيل', testId: 'profile-addresses' },\n    { icon: Settings, label: 'الإعدادات', path: '/settings', description: 'إعدادات التطبيق والحساب', testId: 'profile-settings' },\n    { icon: Shield, label: 'سياسة الخصوصية', path: '/privacy', description: 'سياسة الخصوصية وشروط الاستخدام', testId: 'profile-privacy' },\n  ];\n\n  return (\n    <div>\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/')}\n            data-testid=\"button-profile-back\"\n          >\n            <ArrowRight className=\"h-5 w-5\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-foreground\">الملف الشخصي</h2>\n        </div>\n      </header>\n\n      <section className=\"p-4 space-y-6\">\n        {/* Profile Info Card */}\n        <Card>\n          <CardHeader className=\"text-center\">\n            <div className=\"w-20 h-20 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <User className=\"h-10 w-10 text-primary-foreground\" />\n            </div>\n            <CardTitle className=\"text-xl text-foreground\">{profile.name}</CardTitle>\n            <Badge variant=\"secondary\" className=\"mx-auto\">عضو مميز</Badge>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {isEditing ? (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\" className=\"text-foreground\">الاسم</Label>\n                  <Input\n                    id=\"name\"\n                    value={profile.name}\n                    onChange={(e) => setProfile(prev => ({ ...prev, name: e.target.value }))}\n                    data-testid=\"input-profile-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\" className=\"text-foreground\">رقم الهاتف</Label>\n                  <Input\n                    id=\"phone\"\n                    value={profile.phone}\n                    onChange={(e) => setProfile(prev => ({ ...prev, phone: e.target.value }))}\n                    data-testid=\"input-profile-phone\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\" className=\"text-foreground\">البريد الإلكتروني</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profile.email}\n                    onChange={(e) => setProfile(prev => ({ ...prev, email: e.target.value }))}\n                    data-testid=\"input-profile-email\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"address\" className=\"text-foreground\">العنوان</Label>\n                  <Input\n                    id=\"address\"\n                    value={profile.address}\n                    onChange={(e) => setProfile(prev => ({ ...prev, address: e.target.value }))}\n                    data-testid=\"input-profile-address\"\n                  />\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button onClick={handleSave} className=\"flex-1\" data-testid=\"button-save-profile\">\n                    حفظ التغييرات\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsEditing(false)}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    إلغاء\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <Phone className=\"h-5 w-5 text-muted-foreground\" />\n                  <span className=\"text-foreground\" data-testid=\"profile-phone\">{profile.phone}</span>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <Mail className=\"h-5 w-5 text-muted-foreground\" />\n                  <span className=\"text-foreground\" data-testid=\"profile-email\">{profile.email}</span>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n                  <span className=\"text-foreground\" data-testid=\"profile-address\">{profile.address}</span>\n                </div>\n                <Button \n                  onClick={() => setIsEditing(true)} \n                  className=\"w-full\"\n                  data-testid=\"button-edit-profile\"\n                >\n                  تعديل المعلومات\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-3 gap-3\">\n          {profileStats.map((stat, index) => {\n            const Icon = stat.icon;\n            return (\n              <Card key={index} className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Icon className={`h-6 w-6 ${stat.color} mx-auto mb-2`} />\n                  <div className=\"text-lg font-bold text-foreground\" data-testid={`stat-${index}`}>\n                    {stat.value}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">{stat.label}</div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Menu Items */}\n        <div className=\"space-y-3\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <Button\n                key={item.path}\n                variant=\"ghost\"\n                className=\"w-full h-auto p-4 justify-between hover:bg-accent\"\n                onClick={() => setLocation(item.path)}\n                data-testid={item.testId}\n              >\n                <div className=\"flex items-center gap-3\">\n                  <Icon className=\"h-6 w-6 text-primary\" />\n                  <div className=\"text-right\">\n                    <div className=\"font-medium text-foreground\">{item.label}</div>\n                    <div className=\"text-sm text-muted-foreground\">{item.description}</div>\n                  </div>\n                </div>\n                <ArrowRight className=\"h-5 w-5 text-muted-foreground rotate-180\" />\n              </Button>\n            );\n          })}\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":8383},"client/src/pages/Restaurant.tsx":{"content":"import { useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { ArrowRight, Star, Clock, AlertTriangle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport MenuItemCard from '../components/MenuItemCard';\nimport type { Restaurant, MenuItem } from '@shared/schema';\nimport { getRestaurantStatus, canOrderFromRestaurant } from '../utils/restaurantHours';\n\nexport default function Restaurant() {\n  const { id } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const [selectedMenuCategory, setSelectedMenuCategory] = useState('وجبات رمضان');\n\n  const { data: restaurant, isLoading: restaurantLoading } = useQuery<Restaurant>({\n    queryKey: ['/api/restaurants', id],\n  });\n\n  const { data: menuItems, isLoading: menuLoading } = useQuery<MenuItem[]>({\n    queryKey: ['/api/restaurants', id, 'menu'],\n  });\n\nconst menuCategories = menuItems \n  ? Array.from(new Set(menuItems.map(item => item.category))) \n  : [];\n  const filteredMenuItems = menuItems?.filter(item => item.category === selectedMenuCategory) || [];\n\n  if (restaurantLoading) {\n    return (\n      <div className=\"animate-pulse\">\n        <div className=\"w-full h-64 bg-muted\" />\n        <div className=\"p-4 space-y-4\">\n          <div className=\"h-6 bg-muted rounded w-3/4\" />\n          <div className=\"h-4 bg-muted rounded w-1/2\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!restaurant) {\n    return (\n      <div className=\"p-4 text-center\">\n        <p className=\"text-muted-foreground\">المطعم غير موجود</p>\n      </div>\n    );\n  }\n\n  const restaurantStatus = getRestaurantStatus(restaurant);\n  const orderStatus = canOrderFromRestaurant(restaurant);\n\n  return (\n    <div>\n      {/* Restaurant Header */}\n      <div className=\"relative\">\n        <img\n          src={restaurant.image}\n          alt={restaurant.name}\n          className=\"w-full h-64 object-cover\"\n        />\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute top-4 right-4 bg-black/50 text-white hover:bg-black/70\"\n          onClick={() => setLocation('/')}\n          data-testid=\"button-back\"\n        >\n          <ArrowRight className=\"h-5 w-5\" />\n        </Button>\n        <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-6\">\n          <h2 className=\"text-2xl font-bold text-white mb-2\" data-testid=\"restaurant-name\">\n            {restaurant.name}\n          </h2>\n          <div className=\"flex items-center gap-4 text-white/90 text-sm\">\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"h-4 w-4 text-yellow-500\" />\n              <span>{restaurant.rating} ({restaurant.reviewCount} تقييم)</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-4 w-4\" />\n              <span>{restaurant.deliveryTime}</span>\n            </div>\n            <Badge \n              variant={restaurantStatus.isOpen ? \"default\" : \"destructive\"}\n              className={restaurantStatus.statusColor === 'green' ? \"bg-green-500 hover:bg-green-500\" : \n                        restaurantStatus.statusColor === 'yellow' ? \"bg-yellow-500 hover:bg-yellow-500\" : \"\"}\n            >\n              {restaurantStatus.isOpen ? 'مفتوح' : 'مغلق'}\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      {/* Restaurant Status Alert */}\n      {!orderStatus.canOrder && (\n        <Alert className=\"m-4 border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-800\">\n            {orderStatus.message}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Menu Categories */}\n      <div className=\"sticky top-0 bg-background border-b border-border z-30\">\n        <div className=\"flex gap-2 p-4 overflow-x-auto no-scrollbar\">\n          {menuCategories.map((category) => (\n            <Button\n              key={category}\n              variant={selectedMenuCategory === category ? \"default\" : \"secondary\"}\n              className=\"whitespace-nowrap font-medium\"\n              onClick={() => setSelectedMenuCategory(category)}\n              data-testid={`menu-category-${category}`}\n            >\n              {category}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Menu Items */}\n      <section className=\"p-4 space-y-4\">\n        {menuLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"bg-card border border-border rounded-xl p-4 flex gap-4\">\n                <div className=\"w-20 h-20 bg-muted rounded-lg animate-pulse\" />\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted rounded animate-pulse\" />\n                  <div className=\"h-3 bg-muted rounded w-3/4 animate-pulse\" />\n                  <div className=\"h-3 bg-muted rounded w-1/2 animate-pulse\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : filteredMenuItems.length ? (\n          filteredMenuItems.map((item) => (\n            <MenuItemCard \n              key={item.id} \n              item={item} \n              disabled={!orderStatus.canOrder}\n              disabledMessage={orderStatus.message}\n            />\n          ))\n        ) : (\n          <div className=\"text-center text-muted-foreground py-8\">\n            <p>لا توجد عناصر في هذا التصنيف</p>\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n","size_bytes":5760},"client/src/pages/Settings.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { ArrowRight, Bell, Globe, Moon, Sun, Lock, CreditCard, Smartphone, Settings as SettingsIcon } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useTheme } from '../context/ThemeContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { UiControlPanel } from '@/components/UiControlPanel';\n\ninterface SettingItem {\n  key: string;\n  label: string;\n  description: string;\n  type: 'switch' | 'theme' | 'select';\n  value: boolean | string;\n  onChange: (value: any) => void;\n  options?: Array<{ value: string; label: string }>;\n}\n\ninterface SettingsGroup {\n  title: string;\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n  items: SettingItem[];\n}\n\nexport default function Settings() {\n  const [, setLocation] = useLocation();\n  const { theme, toggleTheme } = useTheme();\n  const { toast } = useToast();\n  \n  const [settings, setSettings] = useState({\n    notifications: {\n      orderUpdates: true,\n      promotions: true,\n      sound: true,\n    },\n    language: 'ar',\n    currency: 'YER',\n    autoLocation: true,\n    biometric: false,\n  });\n\n  const handleNotificationChange = (setting: string, value: boolean) => {\n    setSettings(prev => ({\n      ...prev,\n      notifications: {\n        ...prev.notifications,\n        [setting]: value,\n      },\n    }));\n    \n    toast({\n      title: \"تم حفظ الإعدادات\",\n      description: \"تم تحديث إعداداتك بنجاح\",\n    });\n  };\n\n  const handleSimpleSettingChange = (setting: string, value: boolean | string) => {\n    setSettings(prev => ({\n      ...prev,\n      [setting]: value,\n    }));\n    \n    toast({\n      title: \"تم حفظ الإعدادات\",\n      description: \"تم تحديث إعداداتك بنجاح\",\n    });\n  };\n\n  const settingsGroups: SettingsGroup[] = [\n    {\n      title: 'الإشعارات',\n      icon: Bell,\n      items: [\n        {\n          key: 'orderUpdates',\n          label: 'تحديثات الطلبات',\n          description: 'إشعارات حول حالة طلباتك',\n          type: 'switch',\n          value: settings.notifications.orderUpdates,\n          onChange: (value: boolean) => handleNotificationChange('orderUpdates', value),\n        },\n        {\n          key: 'promotions',\n          label: 'العروض والتخفيضات',\n          description: 'إشعارات حول العروض الجديدة',\n          type: 'switch',\n          value: settings.notifications.promotions,\n          onChange: (value: boolean) => handleNotificationChange('promotions', value),\n        },\n        {\n          key: 'sound',\n          label: 'الأصوات',\n          description: 'تشغيل أصوات الإشعارات',\n          type: 'switch',\n          value: settings.notifications.sound,\n          onChange: (value: boolean) => handleNotificationChange('sound', value),\n        },\n      ],\n    },\n    {\n      title: 'العرض واللغة',\n      icon: Globe,\n      items: [\n        {\n          key: 'theme',\n          label: 'المظهر',\n          description: 'اختيار المظهر الفاتح أو الداكن',\n          type: 'theme',\n          value: theme,\n          onChange: toggleTheme,\n        },\n        {\n          key: 'language',\n          label: 'اللغة',\n          description: 'اختيار لغة التطبيق',\n          type: 'select',\n          value: settings.language,\n          options: [\n            { value: 'ar', label: 'العربية' },\n            { value: 'en', label: 'English' },\n          ],\n          onChange: (value: string) => handleSimpleSettingChange('language', value),\n        },\n        {\n          key: 'currency',\n          label: 'العملة',\n          description: 'وحدة العملة المستخدمة',\n          type: 'select',\n          value: settings.currency,\n          options: [\n            { value: 'YER', label: 'الريال اليمني (YER)' },\n            { value: 'SAR', label: 'الريال السعودي (SAR)' },\n            { value: 'USD', label: 'الدولار الأمريكي (USD)' },\n          ],\n          onChange: (value: string) => handleSimpleSettingChange('currency', value),\n        },\n      ],\n    },\n    {\n      title: 'الموقع والخصوصية',\n      icon: Lock,\n      items: [\n        {\n          key: 'autoLocation',\n          label: 'تحديد الموقع تلقائياً',\n          description: 'السماح للتطبيق بتحديد موقعك',\n          type: 'switch',\n          value: settings.autoLocation,\n          onChange: (value: boolean) => handleSimpleSettingChange('autoLocation', value),\n        },\n        {\n          key: 'biometric',\n          label: 'الحماية البيومترية',\n          description: 'استخدام بصمة الإصبع أو الوجه',\n          type: 'switch',\n          value: settings.biometric,\n          onChange: (value: boolean) => handleSimpleSettingChange('biometric', value),\n        },\n      ],\n    },\n  ];\n\n  const quickActions = [\n    {\n      icon: CreditCard,\n      label: 'طرق الدفع',\n      description: 'إدارة طرق الدفع المحفوظة',\n      action: () => setLocation('/payment-methods'),\n      testId: 'settings-payment-methods',\n    },\n    {\n      icon: Smartphone,\n      label: 'حول التطبيق',\n      description: 'معلومات النسخة والتحديثات',\n      action: () => setLocation('/about'),\n      testId: 'settings-about',\n    },\n  ];\n\n  return (\n    <div>\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/profile')}\n            data-testid=\"button-settings-back\"\n          >\n            <ArrowRight className=\"h-5 w-5\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-foreground\">الإعدادات</h2>\n        </div>\n      </header>\n\n      <section className=\"p-4\">\n        <Tabs defaultValue=\"general\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"general\" className=\"flex items-center gap-2\">\n              <SettingsIcon className=\"h-4 w-4\" />\n              إعدادات عامة\n            </TabsTrigger>\n            <TabsTrigger value=\"ui-control\" className=\"flex items-center gap-2\">\n              <Globe className=\"h-4 w-4\" />\n              تحكم الواجهة\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"general\" className=\"space-y-6 mt-6\">\n            {/* Settings Groups */}\n            {settingsGroups.map((group) => {\n          const Icon = group.icon;\n          return (\n            <Card key={group.title}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3 text-lg\">\n                  <Icon className=\"h-6 w-6 text-primary\" />\n                  {group.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {group.items.map((item) => (\n                  <div key={item.key} className=\"flex items-center justify-between py-2\">\n                    <div className=\"flex-1\">\n                      <Label \n                        htmlFor={item.key} \n                        className=\"text-foreground font-medium cursor-pointer\"\n                        data-testid={`setting-label-${item.key}`}\n                      >\n                        {item.label}\n                      </Label>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {item.description}\n                      </p>\n                    </div>\n                    \n                    <div className=\"ml-4\">\n                      {item.type === 'switch' && (\n                        <Switch\n                          id={item.key}\n                          checked={item.value as boolean}\n                          onCheckedChange={item.onChange}\n                          data-testid={`switch-${item.key}`}\n                        />\n                      )}\n                      \n                      {item.type === 'theme' && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={item.onChange}\n                          data-testid=\"button-toggle-theme\"\n                        >\n                          {theme === 'dark' ? (\n                            <Sun className=\"h-4 w-4 ml-2\" />\n                          ) : (\n                            <Moon className=\"h-4 w-4 ml-2\" />\n                          )}\n                          {theme === 'dark' ? 'فاتح' : 'داكن'}\n                        </Button>\n                      )}\n                      \n                      {item.type === 'select' && item.options && (\n                        <Select \n                          value={item.value as string} \n                          onValueChange={item.onChange}\n                        >\n                          <SelectTrigger className=\"w-40\" data-testid={`select-${item.key}`}>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {item.options.map((option) => (\n                              <SelectItem key={option.value} value={option.value}>\n                                {option.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          );\n        })}\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">إعدادات إضافية</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {quickActions.map((action) => {\n                  const Icon = action.icon;\n                  return (\n                    <Button\n                      key={action.testId}\n                      variant=\"ghost\"\n                      className=\"w-full h-auto p-4 justify-between hover:bg-accent\"\n                      onClick={action.action}\n                      data-testid={action.testId}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <Icon className=\"h-6 w-6 text-primary\" />\n                        <div className=\"text-right\">\n                          <div className=\"font-medium text-foreground\">{action.label}</div>\n                          <div className=\"text-sm text-muted-foreground\">{action.description}</div>\n                        </div>\n                      </div>\n                      <ArrowRight className=\"h-5 w-5 text-muted-foreground rotate-180\" />\n                    </Button>\n                  );\n                })}\n              </CardContent>\n            </Card>\n\n            {/* Sign Out */}\n            <Button\n              variant=\"destructive\"\n              className=\"w-full\"\n              data-testid=\"button-sign-out\"\n            >\n              تسجيل الخروج\n            </Button>\n          </TabsContent>\n          \n          <TabsContent value=\"ui-control\" className=\"mt-6\">\n            <UiControlPanel />\n          </TabsContent>\n        </Tabs>\n      </section>\n    </div>\n  );\n}","size_bytes":12034},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/utils/restaurantHours.ts":{"content":"export interface RestaurantStatus {\n  isOpen: boolean;\n  nextOpenTime?: string;\n  closeTime?: string;\n  message: string;\n  statusColor: 'green' | 'red' | 'yellow';\n}\n\nexport function getRestaurantStatus(restaurant: any): RestaurantStatus {\n  const now = new Date();\n  const currentDay = now.getDay(); // 0 = Sunday, 6 = Saturday\n  const currentTime = now.toTimeString().slice(0, 5); // HH:MM format\n\n  // Check if temporarily closed\n  if (restaurant.isTemporarilyClosed) {\n    return {\n      isOpen: false,\n      message: restaurant.temporaryCloseReason || 'مغلق مؤقتاً',\n      statusColor: 'red'\n    };\n  }\n\n  // Check if restaurant is manually set to closed\n  if (!restaurant.isOpen) {\n    return {\n      isOpen: false,\n      message: 'مغلق',\n      statusColor: 'red'\n    };\n  }\n\n  // Parse working days\n  const workingDays = restaurant.workingDays \n    ? restaurant.workingDays.split(',').map(Number)\n    : [0, 1, 2, 3, 4, 5, 6];\n\n  // Check if today is a working day\n  if (!workingDays.includes(currentDay)) {\n    const nextWorkingDay = getNextWorkingDay(currentDay, workingDays);\n    return {\n      isOpen: false,\n      nextOpenTime: `${getDayName(nextWorkingDay)} ${restaurant.openingTime || '08:00'}`,\n      message: `مغلق اليوم - يفتح ${getDayName(nextWorkingDay)} ${restaurant.openingTime || '08:00'}`,\n      statusColor: 'red'\n    };\n  }\n\n  const openingTime = restaurant.openingTime || '08:00';\n  const closingTime = restaurant.closingTime || '23:00';\n\n  // Check if currently within working hours\n  if (isTimeInRange(currentTime, openingTime, closingTime)) {\n    const minutesUntilClose = getMinutesUntilTime(currentTime, closingTime);\n    \n    if (minutesUntilClose <= 30) {\n      return {\n        isOpen: true,\n        closeTime: closingTime,\n        message: `مفتوح - يغلق الساعة ${closingTime}`,\n        statusColor: 'yellow'\n      };\n    }\n    \n    return {\n      isOpen: true,\n      closeTime: closingTime,\n      message: `مفتوح حتى ${closingTime}`,\n      statusColor: 'green'\n    };\n  }\n\n  // Restaurant is closed - calculate next opening time\n  if (currentTime < openingTime) {\n    // Will open today\n    return {\n      isOpen: false,\n      nextOpenTime: `اليوم ${openingTime}`,\n      message: `مغلق - يفتح اليوم الساعة ${openingTime}`,\n      statusColor: 'red'\n    };\n  } else {\n    // Will open tomorrow or next working day\n    const nextWorkingDay = getNextWorkingDay(currentDay, workingDays);\n    const dayText = nextWorkingDay === (currentDay + 1) % 7 ? 'غداً' : getDayName(nextWorkingDay);\n    \n    return {\n      isOpen: false,\n      nextOpenTime: `${dayText} ${openingTime}`,\n      message: `مغلق - يفتح ${dayText} الساعة ${openingTime}`,\n      statusColor: 'red'\n    };\n  }\n}\n\nfunction isTimeInRange(current: string, start: string, end: string): boolean {\n  const currentMinutes = timeToMinutes(current);\n  const startMinutes = timeToMinutes(start);\n  const endMinutes = timeToMinutes(end);\n\n  // Handle overnight hours (e.g., 22:00 to 02:00)\n  if (endMinutes < startMinutes) {\n    return currentMinutes >= startMinutes || currentMinutes <= endMinutes;\n  }\n  \n  return currentMinutes >= startMinutes && currentMinutes <= endMinutes;\n}\n\nfunction timeToMinutes(time: string): number {\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n}\n\nfunction getMinutesUntilTime(currentTime: string, targetTime: string): number {\n  const currentMinutes = timeToMinutes(currentTime);\n  const targetMinutes = timeToMinutes(targetTime);\n  \n  if (targetMinutes < currentMinutes) {\n    // Next day\n    return (24 * 60) - currentMinutes + targetMinutes;\n  }\n  \n  return targetMinutes - currentMinutes;\n}\n\nfunction getNextWorkingDay(currentDay: number, workingDays: number[]): number {\n  for (let i = 1; i <= 7; i++) {\n    const nextDay = (currentDay + i) % 7;\n    if (workingDays.includes(nextDay)) {\n      return nextDay;\n    }\n  }\n  return workingDays[0] || 0;\n}\n\nfunction getDayName(day: number): string {\n  const days = ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];\n  return days[day] || '';\n}\n\nexport function canOrderFromRestaurant(restaurant: any): { canOrder: boolean; message?: string } {\n  const status = getRestaurantStatus(restaurant);\n  \n  if (!status.isOpen) {\n    return {\n      canOrder: false,\n      message: `عذراً، لا يمكن الطلب الآن. ${status.message}`\n    };\n  }\n  \n  return { canOrder: true };\n}","size_bytes":4550},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"migrations/scripts/setup-database.js":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as dotenv from \"dotenv\";\nimport { \n  categories, restaurants, menuItems, drivers, specialOffers, uiSettings, adminUsers,\n  adminSessions, orders, users, userAddresses\n } from \"../../shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport { eq } from \"drizzle-orm\";\n\ndotenv.config();\n\nif (!process.env.DATABASE_URL) {\n  console.error(\"❌ DATABASE_URL is not defined in environment variables\");\n  process.exit(1);\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nconst db = drizzle(sql);\n\nasync function setupInitialData() {\n  try {\n    console.log(\"🚀 Setting up initial data...\");\n\n    // التحقق من وجود بيانات مسبقاً وتخطي الإضافة إذا كانت موجودة\n    const existingCategories = await db.select().from(categories);\n    if (existingCategories.length > 0) {\n      console.log(\"📂 Categories already exist, skipping...\");\n      return;\n    }\n\n    // Create categories\n    console.log(\"📂 Creating categories...\");\n    const categoryData = [\n      { id: \"1\", name: \"مطاعم\", icon: \"fas fa-utensils\", isActive: true },\n      { id: \"2\", name: \"مقاهي\", icon: \"fas fa-coffee\", isActive: true },\n      { id: \"3\", name: \"حلويات\", icon: \"fas fa-candy-cane\", isActive: true },\n      { id: \"4\", name: \"سوبرماركت\", icon: \"fas fa-shopping-cart\", isActive: true },\n      { id: \"5\", name: \"صيدليات\", icon: \"fas fa-pills\", isActive: true },\n    ];\n\n    const createdCategories = await db.insert(categories).values(categoryData).returning();\n    console.log(`✅ Created ${createdCategories.length} categories`);\n\n    // Create restaurants\n    console.log(\"🏪 Creating restaurants...\");\n    const restaurantData = [\n      {\n        id: \"1\",\n        name: \"مطعم الوزيكو للعربكة\",\n        description: \"مطعم يمني تقليدي متخصص في الأطباق الشعبية\",\n        image: \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        rating: \"4.8\",\n        reviewCount: 4891,\n        deliveryTime: \"40-60 دقيقة\",\n        isOpen: true,\n        minimumOrder: 25,\n        deliveryFee: 5,\n        categoryId: createdCategories[0].id,\n        openingTime: \"08:00\",\n        closingTime: \"23:00\",\n        workingDays: \"0,1,2,3,4,5,6\",\n        isTemporarilyClosed: false,\n        temporaryCloseReason: null,\n      },\n      {\n        id: \"2\",\n        name: \"حلويات الشام\",\n        description: \"أفضل الحلويات الشامية والعربية\",\n        image: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        rating: \"4.6\",\n        reviewCount: 2341,\n        deliveryTime: \"30-45 دقيقة\",\n        isOpen: true,\n        minimumOrder: 15,\n        deliveryFee: 3,\n        categoryId: createdCategories[2].id,\n        openingTime: \"08:00\",\n        closingTime: \"23:00\",\n        workingDays: \"0,1,2,3,4,5,6\",\n        isTemporarilyClosed: false,\n        temporaryCloseReason: null,\n      },\n      {\n        id: \"3\",\n        name: \"مقهى العروبة\",\n        description: \"مقهى شعبي بالطابع العربي الأصيل\",\n        image: \"https://images.unsplash.com/photo-1442512595331-e89e73853f31?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        rating: \"4.5\",\n        reviewCount: 1876,\n        deliveryTime: \"يفتح في 8:00 ص\",\n        isOpen: false,\n        minimumOrder: 20,\n        deliveryFee: 4,\n        categoryId: createdCategories[1].id,\n        openingTime: \"08:00\",\n        closingTime: \"23:00\",\n        workingDays: \"0,1,2,3,4,5,6\",\n        isTemporarilyClosed: false,\n        temporaryCloseReason: null,\n      }\n    ];\n\n    const createdRestaurants = await db.insert(restaurants).values(restaurantData).returning();\n    console.log(`✅ Created ${createdRestaurants.length} restaurants`);\n\n    // Create menu items\n    console.log(\"🍽️ Creating menu items...\");\n    const menuItemData = [\n      {\n        id: \"1\",\n        name: \"عربكة بالقشطة والعسل\",\n        description: \"حلوى يمنية تقليدية بالقشطة الطازجة والعسل الطبيعي\",\n        price: 55,\n        image: \"https://images.unsplash.com/photo-1551024506-0bccd828d307?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\",\n        category: \"وجبات رمضان\",\n        isAvailable: true,\n        isSpecialOffer: false,\n        originalPrice: null,\n        restaurantId: createdRestaurants[0].id,\n      },\n      {\n        id: \"2\",\n        name: \"معصوب بالقشطة والعسل\",\n        description: \"طبق يمني شعبي بالموز والقشطة والعسل\",\n        price: 55,\n        image: \"https://images.unsplash.com/photo-1565299507177-b0ac66763828?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\",\n        category: \"وجبات رمضان\",\n        isAvailable: true,\n        isSpecialOffer: false,\n        originalPrice: null,\n        restaurantId: createdRestaurants[0].id,\n      },\n      {\n        id: \"3\",\n        name: \"مياه معدنية 750 مل\",\n        description: \"مياه طبيعية معدنية عالية الجودة\",\n        price: 3,\n        image: \"https://images.unsplash.com/photo-1559839734-2b71ea197ec2?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\",\n        category: \"المشروبات\",\n        isAvailable: true,\n        isSpecialOffer: false,\n        originalPrice: null,\n        restaurantId: createdRestaurants[0].id,\n      },\n      {\n        id: \"4\",\n        name: \"كومبو عربكة خاص\",\n        description: \"عربكة + مطبق عادي + مشروب غازي\",\n        price: 55,\n        originalPrice: 60,\n        image: \"https://images.unsplash.com/photo-1565299507177-b0ac66763828?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\",\n        category: \"العروض\",\n        isAvailable: true,\n        isSpecialOffer: true,\n        restaurantId: createdRestaurants[0].id,\n      }\n    ];\n\n    const createdMenuItems = await db.insert(menuItems).values(menuItemData).returning();\n    console.log(`✅ Created ${createdMenuItems.length} menu items`);\n\n    // Create drivers\n    console.log(\"🚗 Creating drivers...\");\n    const hashedPassword = await bcrypt.hash(\"password123\", 10);\n    const driverData = [\n      {\n        id: \"1\",\n        name: \"أحمد محمد\",\n        phone: \"+967771234567\",\n        password: hashedPassword,\n        isAvailable: true,\n        isActive: true,\n        currentLocation: \"صنعاء\",\n        earnings: 2500,\n      },\n      {\n        id: \"2\",\n        name: \"علي حسن\",\n        phone: \"+967779876543\",\n        password: hashedPassword,\n        isAvailable: true,\n        isActive: true,\n        currentLocation: \"تعز\",\n        earnings: 3200,\n      }\n    ];\n\n    const createdDrivers = await db.insert(drivers).values(driverData).returning();\n    console.log(`✅ Created ${createdDrivers.length} drivers`);\n\n    // Create special offers\n    console.log(\"🎁 Creating special offers...\");\n    const offerData = [\n      {\n        id: \"1\",\n        title: \"خصم 20% على الطلبات فوق 100 ريال\",\n        description: \"احصل على خصم 20% عند طلب بقيمة 100 ريال أو أكثر\",\n        image: \"https://images.unsplash.com/photo-1571091718767-18b5b1457add?w=400\",\n        discountPercent: 20,\n        discountAmount: null,\n        minimumOrder: 100,\n        isActive: true,\n        validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      },\n      {\n        id: \"2\",\n        title: \"توصيل مجاني\",\n        description: \"توصيل مجاني للطلبات فوق 50 ريال\",\n        image: \"https://images.unsplash.com/photo-1571091718767-18b5b1457add?w=400\",\n        discountPercent: null,\n        discountAmount: 5,\n        minimumOrder: 50,\n        isActive: true,\n        validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      }\n    ];\n\n    const createdOffers = await db.insert(specialOffers).values(offerData).returning();\n    console.log(`✅ Created ${createdOffers.length} special offers`);\n\n    // Create UI settings\n    console.log(\"⚙️ Creating UI settings...\");\n    const uiSettingsData = [\n      { key: \"app_name\", value: \"السريع ون للتوصيل\", description: \"اسم التطبيق\" },\n      { key: \"app_logo\", value: \"/logo.png\", description: \"شعار التطبيق\" },\n      { key: \"primary_color\", value: \"#f6863bff\", description: \"اللون الأساسي\" },\n      { key: \"secondary_color\", value: \"#10B981\", description: \"اللون الثانوي\" },\n      { key: \"delivery_fee\", value: \"5\", description: \"رسوم التوصيل الافتراضية\" },\n      { key: \"minimum_order\", value: \"25\", description: \"الحد الأدنى للطلب\" },\n      { key: \"contact_phone\", value: \"+967771234567\", description: \"رقم التواصل\" },\n      { key: \"contact_email\", value: \"info@alsarie-one.com\", description: \"بريد التواصل\" },\n    ];\n\n    const createdSettings = await db.insert(uiSettings).values(uiSettingsData).returning();\n    console.log(`✅ Created ${createdSettings.length} UI settings`);\n\n    // Create default admin\n    console.log(\"👤 Creating default admin...\");\n    const adminPassword = process.env.DEFAULT_ADMIN_PASSWORD || 'admin123456';\n    const hashedAdminPassword = await bcrypt.hash(adminPassword, 10);\n    \n    const adminData = {\n      id: \"1\",\n      name: 'مدير النظام',\n      email: 'admin@alsarie-one.com',\n      password: hashedAdminPassword,\n      userType: 'admin',\n      isActive: true\n    };\n\n    const [createdAdmin] = await db.insert(adminUsers).values(adminData).returning();\n    console.log(`✅ Created admin user: ${createdAdmin.email}`);\n\n    console.log(\"🎉 Initial data setup completed successfully!\");\n    console.log(\"\\n📋 Summary:\");\n    console.log(`   Categories: ${createdCategories.length}`);\n    console.log(`   Restaurants: ${createdRestaurants.length}`);\n    console.log(`   Menu Items: ${createdMenuItems.length}`);\n    console.log(`   Drivers: ${createdDrivers.length}`);\n    console.log(`   Special Offers: ${createdOffers.length}`);\n    console.log(`   UI Settings: ${createdSettings.length}`);\n    console.log(`   Admin Users: 1`);\n\n  } catch (error) {\n    console.error(\"❌ Error setting up initial data:\", error);\n    process.exit(1);\n  }\n}\n\nsetupInitialData();","size_bytes":10541},"client/src/components/DriverControlPanel.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { useUiSettings } from '@/context/UiSettingsContext';\nimport { Truck, DollarSign, Bell, Navigation, MapPin, Clock } from 'lucide-react';\n\nexport function DriverControlPanel() {\n  const { loading, updateSetting, isFeatureEnabled } = useUiSettings();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-gray-100\"></div>\n      </div>\n    );\n  }\n\n  const handleToggle = (key: string, enabled: boolean) => {\n    updateSetting(key, enabled.toString());\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-2 mb-6\">\n        <Truck className=\"h-6 w-6\" />\n        <h2 className=\"text-2xl font-bold\">إعدادات تطبيق السائق</h2>\n      </div>\n\n      {/* إعدادات الأرباح والمعلومات */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-5 w-5\" />\n            إعدادات الأرباح والمعلومات\n          </CardTitle>\n          <CardDescription>\n            تحكم في عرض معلومات الأرباح والإحصائيات\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"driver_show_earnings\" className=\"flex-1\">\n              عرض الأرباح للسائق\n            </Label>\n            <Switch\n              id=\"driver_show_earnings\"\n              checked={isFeatureEnabled('driver_show_earnings')}\n              onCheckedChange={(checked) => handleToggle('driver_show_earnings', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"driver_show_customer_info\" className=\"flex-1\">\n              عرض معلومات العميل\n            </Label>\n            <Switch\n              id=\"driver_show_customer_info\"\n              checked={isFeatureEnabled('driver_show_customer_info')}\n              onCheckedChange={(checked) => handleToggle('driver_show_customer_info', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"driver_show_order_details\" className=\"flex-1\">\n              عرض تفاصيل الطلب\n            </Label>\n            <Switch\n              id=\"driver_show_order_details\"\n              checked={isFeatureEnabled('driver_show_order_details')}\n              onCheckedChange={(checked) => handleToggle('driver_show_order_details', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* إعدادات الطلبات والتوصيل */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            إعدادات الطلبات والتوصيل\n          </CardTitle>\n          <CardDescription>\n            تحكم في عرض الطلبات وإعدادات التوصيل\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"driver_show_available_orders\" className=\"flex-1\">\n              عرض الطلبات المتاحة\n            </Label>\n            <Switch\n              id=\"driver_show_available_orders\"\n              checked={isFeatureEnabled('driver_show_available_orders')}\n              onCheckedChange={(checked) => handleToggle('driver_show_available_orders', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"driver_auto_refresh\" className=\"flex-1\">\n              التحديث التلقائي للطلبات\n            </Label>\n            <Switch\n              id=\"driver_auto_refresh\"\n              checked={isFeatureEnabled('driver_auto_refresh')}\n              onCheckedChange={(checked) => handleToggle('driver_auto_refresh', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"driver_show_status_toggle\" className=\"flex-1\">\n              عرض مفتاح تغيير الحالة\n            </Label>\n            <Switch\n              id=\"driver_show_status_toggle\"\n              checked={isFeatureEnabled('driver_show_status_toggle')}\n              onCheckedChange={(checked) => handleToggle('driver_show_status_toggle', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* إعدادات التنقل والموقع */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Navigation className=\"h-5 w-5\" />\n            إعدادات التنقل والموقع\n          </CardTitle>\n          <CardDescription>\n            تحكم في خدمات التنقل والموقع\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"driver_show_location_button\" className=\"flex-1\">\n              عرض زر تحديث الموقع\n            </Label>\n            <Switch\n              id=\"driver_show_location_button\"\n              checked={isFeatureEnabled('driver_show_location_button')}\n              onCheckedChange={(checked) => handleToggle('driver_show_location_button', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"driver_show_navigation_help\" className=\"flex-1\">\n              عرض مساعدة التنقل\n            </Label>\n            <Switch\n              id=\"driver_show_navigation_help\"\n              checked={isFeatureEnabled('driver_show_navigation_help')}\n              onCheckedChange={(checked) => handleToggle('driver_show_navigation_help', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* إعدادات الإشعارات */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"h-5 w-5\" />\n            إعدادات الإشعارات\n          </CardTitle>\n          <CardDescription>\n            تحكم في الإشعارات والتنبيهات\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"driver_notification_sound\" className=\"flex-1\">\n              تفعيل صوت الإشعارات\n            </Label>\n            <Switch\n              id=\"driver_notification_sound\"\n              checked={isFeatureEnabled('driver_notification_sound')}\n              onCheckedChange={(checked) => handleToggle('driver_notification_sound', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7338},"client/src/components/UiControlPanel.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { useUiSettings } from '@/context/UiSettingsContext';\nimport { Settings, Eye, EyeOff, Palette, Smartphone } from 'lucide-react';\n\nexport function UiControlPanel() {\n  const { settings, loading, updateSetting, isFeatureEnabled } = useUiSettings();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-gray-100\"></div>\n      </div>\n    );\n  }\n\n  const handleToggle = (key: string, enabled: boolean) => {\n    updateSetting(key, enabled.toString());\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-2 mb-6\">\n        <Settings className=\"h-6 w-6\" />\n        <h2 className=\"text-2xl font-bold\">إعدادات التحكم في الواجهة</h2>\n      </div>\n\n      {/* إعدادات العرض الأساسية */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Eye className=\"h-5 w-5\" />\n            إعدادات العرض الأساسية\n          </CardTitle>\n          <CardDescription>\n            تحكم في العناصر المعروضة في الصفحة الرئيسية\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show_categories\" className=\"flex-1\">\n              عرض تصنيفات المطاعم\n            </Label>\n            <Switch\n              id=\"show_categories\"\n              checked={isFeatureEnabled('show_categories')}\n              onCheckedChange={(checked) => handleToggle('show_categories', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show_search_bar\" className=\"flex-1\">\n              عرض شريط البحث\n            </Label>\n            <Switch\n              id=\"show_search_bar\"\n              checked={isFeatureEnabled('show_search_bar')}\n              onCheckedChange={(checked) => handleToggle('show_search_bar', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show_special_offers\" className=\"flex-1\">\n              عرض العروض الخاصة\n            </Label>\n            <Switch\n              id=\"show_special_offers\"\n              checked={isFeatureEnabled('show_special_offers')}\n              onCheckedChange={(checked) => handleToggle('show_special_offers', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show_cart_button\" className=\"flex-1\">\n              عرض زر السلة\n            </Label>\n            <Switch\n              id=\"show_cart_button\"\n              checked={isFeatureEnabled('show_cart_button')}\n              onCheckedChange={(checked) => handleToggle('show_cart_button', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* إعدادات المطاعم */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Smartphone className=\"h-5 w-5\" />\n            إعدادات عرض المطاعم\n          </CardTitle>\n          <CardDescription>\n            تحكم في المعلومات المعروضة للمطاعم\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show_ratings\" className=\"flex-1\">\n              عرض تقييمات المطاعم\n            </Label>\n            <Switch\n              id=\"show_ratings\"\n              checked={isFeatureEnabled('show_ratings')}\n              onCheckedChange={(checked) => handleToggle('show_ratings', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show_delivery_time\" className=\"flex-1\">\n              عرض وقت التوصيل\n            </Label>\n            <Switch\n              id=\"show_delivery_time\"\n              checked={isFeatureEnabled('show_delivery_time')}\n              onCheckedChange={(checked) => handleToggle('show_delivery_time', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show_minimum_order\" className=\"flex-1\">\n              عرض الحد الأدنى للطلب\n            </Label>\n            <Switch\n              id=\"show_minimum_order\"\n              checked={isFeatureEnabled('show_minimum_order')}\n              onCheckedChange={(checked) => handleToggle('show_minimum_order', checked)}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show_restaurant_description\" className=\"flex-1\">\n              عرض وصف المطعم\n            </Label>\n            <Switch\n              id=\"show_restaurant_description\"\n              checked={isFeatureEnabled('show_restaurant_description')}\n              onCheckedChange={(checked) => handleToggle('show_restaurant_description', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* إعدادات الخدمات */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Palette className=\"h-5 w-5\" />\n            إعدادات الخدمات والميزات\n          </CardTitle>\n          <CardDescription>\n            تحكم في الخدمات المتاحة في التطبيق\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"enable_location_services\" className=\"flex-1\">\n              تفعيل خدمات الموقع\n            </Label>\n            <Switch\n              id=\"enable_location_services\"\n              checked={isFeatureEnabled('enable_location_services')}\n              onCheckedChange={(checked) => handleToggle('enable_location_services', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6606},"client/src/context/UiSettingsContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\ninterface UiSetting {\n  id: string;\n  settingKey: string;\n  settingValue: string;\n  description: string | null;\n  isActive: boolean;\n}\n\ninterface UiSettingsContextType {\n  settings: Record<string, string>;\n  loading: boolean;\n  updateSetting: (key: string, value: string) => Promise<void>;\n  getSetting: (key: string, defaultValue?: string) => string;\n  isFeatureEnabled: (key: string) => boolean;\n  refreshSettings: () => Promise<void>;\n}\n\nconst UiSettingsContext = createContext<UiSettingsContextType | undefined>(undefined);\n\nexport function UiSettingsProvider({ children }: { children: React.ReactNode }) {\n  const [settings, setSettings] = useState<Record<string, string>>({});\n  const [loading, setLoading] = useState(true);\n\n  const loadSettings = async () => {\n    try {\n      const response = await fetch('/api/ui-settings');\n      if (response.ok) {\n        const settingsData: UiSetting[] = await response.json();\n        const settingsMap = settingsData.reduce((acc, setting) => {\n          acc[setting.settingKey] = setting.settingValue;\n          return acc;\n        }, {} as Record<string, string>);\n        setSettings(settingsMap);\n      }\n    } catch (error) {\n      console.error('خطأ في تحميل إعدادات الواجهة:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateSetting = async (key: string, value: string) => {\n    try {\n      const response = await fetch(`/api/ui-settings/${key}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ value }),\n      });\n\n      if (response.ok) {\n        setSettings(prev => ({ ...prev, [key]: value }));\n      }\n    } catch (error) {\n      console.error('خطأ في تحديث الإعداد:', error);\n    }\n  };\n\n  const getSetting = (key: string, defaultValue: string = '') => {\n    return settings[key] || defaultValue;\n  };\n\n  const isFeatureEnabled = (key: string) => {\n    return getSetting(key) === 'true';\n  };\n\n  const refreshSettings = async () => {\n    setLoading(true);\n    await loadSettings();\n  };\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  return (\n    <UiSettingsContext.Provider value={{\n      settings,\n      loading,\n      updateSetting,\n      getSetting,\n      isFeatureEnabled,\n      refreshSettings\n    }}>\n      {children}\n    </UiSettingsContext.Provider>\n  );\n}\n\nexport function useUiSettings() {\n  const context = useContext(UiSettingsContext);\n  if (context === undefined) {\n    throw new Error('useUiSettings must be used within a UiSettingsProvider');\n  }\n  return context;\n}","size_bytes":2683}},"version":1}